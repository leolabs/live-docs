<?xml-stylesheet type="text/css" href="Live.css"?>
<Live>
Live API version 12.1.0
<Doc>Unofficial Live API documentation generated by the "API_MakeDoc" MIDI Remote Script.
            <requirement xmlns:html="http://www.w3.org/1999/xhtml">
            <html:a href="http://remotescripts.blogspot.com">http://remotescripts.blogspot.com</html:a></requirement>
            </Doc>
<Doc>This is unofficial documentation. Please do not contact Ableton with questions or problems relating to the use of this documentation.</Doc>
<Module>Live<Description>Module</Description></Module>
<Module>Live.Application<Description>Module</Description></Module>
<Built-In>Live.Application.combine_apcs()<Description>Built-In</Description></Built-In>
<Doc>combine_apcs() -&gt; bool : Returns true if multiple APCs should be combined. C++ signature :  bool combine_apcs()</Doc>
<Built-In>Live.Application.encrypt_challenge()<Description>Built-In</Description></Built-In>
<Doc>encrypt_challenge( (int)dongle1, (int)dongle2 [, (int)key_index=0]) -&gt; tuple : Returns an encrypted challenge based on the TEA algortithm C++ signature :  boost::python::tuple encrypt_challenge(int,int [,int=0])</Doc>
<Built-In>Live.Application.encrypt_challenge2()<Description>Built-In</Description></Built-In>
<Doc>encrypt_challenge2( (int)arg1) -&gt; int : Returns the UMAC hash for the given challenge. C++ signature :  int encrypt_challenge2(int)</Doc>
<Built-In>Live.Application.get_application()<Description>Built-In</Description></Built-In>
<Doc>get_application() -&gt; Application : Returns the application instance. C++ signature :  TWeakPtr&lt;TPyHandle&lt;ASongApp&gt;&gt; get_application()</Doc>
<Built-In>Live.Application.get_random_int()<Description>Built-In</Description></Built-In>
<Doc>get_random_int( (int)arg1, (int)arg2) -&gt; int : Returns a random integer from the given range. C++ signature :  int get_random_int(int,int)</Doc>
<Class>Live.Application.Application<Description>Class</Description></Class>
<Doc>This class represents the Live application.</Doc>
<Built-In>Live.Application.Application.add_average_process_usage_listener()<Description>Built-In</Description></Built-In>
<Doc>add_average_process_usage_listener( (Application)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "average_process_usage" has changed. C++ signature :  void add_average_process_usage_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Application.Application.add_control_surfaces_listener()<Description>Built-In</Description></Built-In>
<Doc>add_control_surfaces_listener( (Application)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "control_surfaces" has changed. C++ signature :  void add_control_surfaces_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Application.Application.add_open_dialog_count_listener()<Description>Built-In</Description></Built-In>
<Doc>add_open_dialog_count_listener( (Application)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "open_dialog_count" has changed. C++ signature :  void add_open_dialog_count_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Application.Application.add_peak_process_usage_listener()<Description>Built-In</Description></Built-In>
<Doc>add_peak_process_usage_listener( (Application)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "peak_process_usage" has changed. C++ signature :  void add_peak_process_usage_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Application.Application.add_unavailable_features_listener()<Description>Built-In</Description></Built-In>
<Doc>add_unavailable_features_listener( (Application)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "unavailable_features" has changed. C++ signature :  void add_unavailable_features_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Application.Application.average_process_usage_has_listener()<Description>Built-In</Description></Built-In>
<Doc>average_process_usage_has_listener( (Application)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "average_process_usage". C++ signature :  bool average_process_usage_has_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Application.Application.control_surfaces_has_listener()<Description>Built-In</Description></Built-In>
<Doc>control_surfaces_has_listener( (Application)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "control_surfaces". C++ signature :  bool control_surfaces_has_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Application.Application.get_bugfix_version()<Description>Built-In</Description></Built-In>
<Doc>get_bugfix_version( (Application)arg1) -&gt; int : Returns an integer representing the bugfix version of Live. C++ signature :  int get_bugfix_version(TPyHandle&lt;ASongApp&gt;)</Doc>
<Built-In>Live.Application.Application.get_build_id()<Description>Built-In</Description></Built-In>
<Doc>get_build_id( (Application)arg1) -&gt; str : Returns a string identifying the build. C++ signature :  TString get_build_id(TPyHandle&lt;ASongApp&gt;)</Doc>
<Built-In>Live.Application.Application.get_document()<Description>Built-In</Description></Built-In>
<Doc>get_document( (Application)arg1) -&gt; Song : Returns the current Live Set. C++ signature :  TWeakPtr&lt;TPyHandle&lt;ASong&gt;&gt; get_document(TPyHandle&lt;ASongApp&gt;)</Doc>
<Built-In>Live.Application.Application.get_major_version()<Description>Built-In</Description></Built-In>
<Doc>get_major_version( (Application)arg1) -&gt; int : Returns an integer representing the major version of Live. C++ signature :  int get_major_version(TPyHandle&lt;ASongApp&gt;)</Doc>
<Built-In>Live.Application.Application.get_minor_version()<Description>Built-In</Description></Built-In>
<Doc>get_minor_version( (Application)arg1) -&gt; int : Returns an integer representing the minor version of Live. C++ signature :  int get_minor_version(TPyHandle&lt;ASongApp&gt;)</Doc>
<Built-In>Live.Application.Application.get_variant()<Description>Built-In</Description></Built-In>
<Doc>get_variant( (Application)arg1) -&gt; str : Returns one of the strings in Live.Application.Variants. C++ signature :  TString get_variant(TPyHandle&lt;ASongApp&gt;)</Doc>
<Built-In>Live.Application.Application.get_version_string()<Description>Built-In</Description></Built-In>
<Doc>get_version_string( (Application)arg1) -&gt; str : Returns the full version string of Live. C++ signature :  TString get_version_string(TPyHandle&lt;ASongApp&gt;)</Doc>
<Built-In>Live.Application.Application.has_option()<Description>Built-In</Description></Built-In>
<Doc>has_option( (Application)arg1, (object)arg2) -&gt; bool : Returns True if the given entry exists in Options.txt, False otherwise. C++ signature :  bool has_option(TPyHandle&lt;ASongApp&gt;,TString)</Doc>
<Built-In>Live.Application.Application.open_dialog_count_has_listener()<Description>Built-In</Description></Built-In>
<Doc>open_dialog_count_has_listener( (Application)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "open_dialog_count". C++ signature :  bool open_dialog_count_has_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Application.Application.peak_process_usage_has_listener()<Description>Built-In</Description></Built-In>
<Doc>peak_process_usage_has_listener( (Application)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "peak_process_usage". C++ signature :  bool peak_process_usage_has_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Application.Application.press_current_dialog_button()<Description>Built-In</Description></Built-In>
<Doc>press_current_dialog_button( (Application)arg1, (int)arg2) -&gt; None : Press a button, by index, on the current message box. C++ signature :  void press_current_dialog_button(TPyHandle&lt;ASongApp&gt;,int)</Doc>
<Built-In>Live.Application.Application.remove_average_process_usage_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_average_process_usage_listener( (Application)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "average_process_usage". C++ signature :  void remove_average_process_usage_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Application.Application.remove_control_surfaces_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_control_surfaces_listener( (Application)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "control_surfaces". C++ signature :  void remove_control_surfaces_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Application.Application.remove_open_dialog_count_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_open_dialog_count_listener( (Application)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "open_dialog_count". C++ signature :  void remove_open_dialog_count_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Application.Application.remove_peak_process_usage_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_peak_process_usage_listener( (Application)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "peak_process_usage". C++ signature :  void remove_peak_process_usage_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Application.Application.remove_unavailable_features_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_unavailable_features_listener( (Application)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "unavailable_features". C++ signature :  void remove_unavailable_features_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Application.Application.show_message()<Description>Built-In</Description></Built-In>
<Doc>show_message( (Application)arg1, (Text)text [, (int)buttons=Application.MessageButtons.OK_BUTTON [, (bool)enable_markup=False [, (bool)show_success_icon=False]]]) -&gt; int : Shows a message box, returning the position of the pressed button. C++ signature :  int show_message(TPyHandle&lt;ASongApp&gt;,TText [,int=Application.MessageButtons.OK_BUTTON [,bool=False [,bool=False]]])</Doc>
<Built-In>Live.Application.Application.show_on_the_fly_message()<Description>Built-In</Description></Built-In>
<Doc>show_on_the_fly_message( (Application)arg1, (str)message [, (int)buttons=Application.MessageButtons.OK_BUTTON [, (bool)enable_markup=False [, (bool)show_success_icon=False]]]) -&gt; int : Same as show_message, but for when there is no predefined Text object. C++ signature :  int show_on_the_fly_message(TPyHandle&lt;ASongApp&gt;,std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; [,int=Application.MessageButtons.OK_BUTTON [,bool=False [,bool=False]]])</Doc>
<Built-In>Live.Application.Application.unavailable_features_has_listener()<Description>Built-In</Description></Built-In>
<Doc>unavailable_features_has_listener( (Application)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "unavailable_features". C++ signature :  bool unavailable_features_has_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Value>Live.Application.Application.View<Description>Value</Description></Value>
<Doc>This class represents the view aspects of the Live application.</Doc>
<Value>Live.Application.Application.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Application.Application._live_ptr<Description>Value</Description></Value>
<Value>Live.Application.Application.add_average_process_usage_listener()<Description>Value</Description></Value>
<Doc>add_average_process_usage_listener( (Application)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "average_process_usage" has changed. C++ signature :  void add_average_process_usage_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Value>Live.Application.Application.add_control_surfaces_listener()<Description>Value</Description></Value>
<Doc>add_control_surfaces_listener( (Application)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "control_surfaces" has changed. C++ signature :  void add_control_surfaces_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Value>Live.Application.Application.add_open_dialog_count_listener()<Description>Value</Description></Value>
<Doc>add_open_dialog_count_listener( (Application)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "open_dialog_count" has changed. C++ signature :  void add_open_dialog_count_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Value>Live.Application.Application.add_peak_process_usage_listener()<Description>Value</Description></Value>
<Doc>add_peak_process_usage_listener( (Application)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "peak_process_usage" has changed. C++ signature :  void add_peak_process_usage_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Value>Live.Application.Application.add_unavailable_features_listener()<Description>Value</Description></Value>
<Doc>add_unavailable_features_listener( (Application)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "unavailable_features" has changed. C++ signature :  void add_unavailable_features_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Value>Live.Application.Application.average_process_usage<Description>Value</Description></Value>
<Doc>Reports Live's average CPU load.</Doc>
<Value>Live.Application.Application.average_process_usage_has_listener()<Description>Value</Description></Value>
<Doc>average_process_usage_has_listener( (Application)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "average_process_usage". C++ signature :  bool average_process_usage_has_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Value>Live.Application.Application.browser<Description>Value</Description></Value>
<Doc>Returns an interface to the browser.</Doc>
<Value>Live.Application.Application.canonical_parent<Description>Value</Description></Value>
<Doc>Returns the canonical parent of the application.</Doc>
<Value>Live.Application.Application.control_surfaces<Description>Value</Description></Value>
<Doc>Const access to a list of the control surfaces selected in preferences, in the same order.The list contains None if no control surface is active at that index.</Doc>
<Value>Live.Application.Application.control_surfaces_has_listener()<Description>Value</Description></Value>
<Doc>control_surfaces_has_listener( (Application)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "control_surfaces". C++ signature :  bool control_surfaces_has_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Value>Live.Application.Application.current_dialog_button_count<Description>Value</Description></Value>
<Doc>Number of buttons on the current dialog.</Doc>
<Value>Live.Application.Application.current_dialog_message<Description>Value</Description></Value>
<Doc>Text of the last dialog that appeared; Empty if all dialogs just disappeared.</Doc>
<Value>Live.Application.Application.get_bugfix_version()<Description>Value</Description></Value>
<Doc>get_bugfix_version( (Application)arg1) -&gt; int : Returns an integer representing the bugfix version of Live. C++ signature :  int get_bugfix_version(TPyHandle&lt;ASongApp&gt;)</Doc>
<Value>Live.Application.Application.get_build_id()<Description>Value</Description></Value>
<Doc>get_build_id( (Application)arg1) -&gt; str : Returns a string identifying the build. C++ signature :  TString get_build_id(TPyHandle&lt;ASongApp&gt;)</Doc>
<Value>Live.Application.Application.get_document()<Description>Value</Description></Value>
<Doc>get_document( (Application)arg1) -&gt; Song : Returns the current Live Set. C++ signature :  TWeakPtr&lt;TPyHandle&lt;ASong&gt;&gt; get_document(TPyHandle&lt;ASongApp&gt;)</Doc>
<Value>Live.Application.Application.get_major_version()<Description>Value</Description></Value>
<Doc>get_major_version( (Application)arg1) -&gt; int : Returns an integer representing the major version of Live. C++ signature :  int get_major_version(TPyHandle&lt;ASongApp&gt;)</Doc>
<Value>Live.Application.Application.get_minor_version()<Description>Value</Description></Value>
<Doc>get_minor_version( (Application)arg1) -&gt; int : Returns an integer representing the minor version of Live. C++ signature :  int get_minor_version(TPyHandle&lt;ASongApp&gt;)</Doc>
<Value>Live.Application.Application.get_variant()<Description>Value</Description></Value>
<Doc>get_variant( (Application)arg1) -&gt; str : Returns one of the strings in Live.Application.Variants. C++ signature :  TString get_variant(TPyHandle&lt;ASongApp&gt;)</Doc>
<Value>Live.Application.Application.get_version_string()<Description>Value</Description></Value>
<Doc>get_version_string( (Application)arg1) -&gt; str : Returns the full version string of Live. C++ signature :  TString get_version_string(TPyHandle&lt;ASongApp&gt;)</Doc>
<Value>Live.Application.Application.has_option()<Description>Value</Description></Value>
<Doc>has_option( (Application)arg1, (object)arg2) -&gt; bool : Returns True if the given entry exists in Options.txt, False otherwise. C++ signature :  bool has_option(TPyHandle&lt;ASongApp&gt;,TString)</Doc>
<Value>Live.Application.Application.number_of_push_apps_running<Description>Value</Description></Value>
<Doc>Returns the number of connected Push apps.</Doc>
<Value>Live.Application.Application.open_dialog_count<Description>Value</Description></Value>
<Doc>The number of open dialogs in Live. 0 if not dialog is open.</Doc>
<Value>Live.Application.Application.open_dialog_count_has_listener()<Description>Value</Description></Value>
<Doc>open_dialog_count_has_listener( (Application)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "open_dialog_count". C++ signature :  bool open_dialog_count_has_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Value>Live.Application.Application.peak_process_usage<Description>Value</Description></Value>
<Doc>Reports Live's peak CPU load.</Doc>
<Value>Live.Application.Application.peak_process_usage_has_listener()<Description>Value</Description></Value>
<Doc>peak_process_usage_has_listener( (Application)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "peak_process_usage". C++ signature :  bool peak_process_usage_has_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Value>Live.Application.Application.press_current_dialog_button()<Description>Value</Description></Value>
<Doc>press_current_dialog_button( (Application)arg1, (int)arg2) -&gt; None : Press a button, by index, on the current message box. C++ signature :  void press_current_dialog_button(TPyHandle&lt;ASongApp&gt;,int)</Doc>
<Value>Live.Application.Application.remove_average_process_usage_listener()<Description>Value</Description></Value>
<Doc>remove_average_process_usage_listener( (Application)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "average_process_usage". C++ signature :  void remove_average_process_usage_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Value>Live.Application.Application.remove_control_surfaces_listener()<Description>Value</Description></Value>
<Doc>remove_control_surfaces_listener( (Application)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "control_surfaces". C++ signature :  void remove_control_surfaces_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Value>Live.Application.Application.remove_open_dialog_count_listener()<Description>Value</Description></Value>
<Doc>remove_open_dialog_count_listener( (Application)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "open_dialog_count". C++ signature :  void remove_open_dialog_count_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Value>Live.Application.Application.remove_peak_process_usage_listener()<Description>Value</Description></Value>
<Doc>remove_peak_process_usage_listener( (Application)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "peak_process_usage". C++ signature :  void remove_peak_process_usage_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Value>Live.Application.Application.remove_unavailable_features_listener()<Description>Value</Description></Value>
<Doc>remove_unavailable_features_listener( (Application)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "unavailable_features". C++ signature :  void remove_unavailable_features_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Value>Live.Application.Application.show_message()<Description>Value</Description></Value>
<Doc>show_message( (Application)arg1, (Text)text [, (int)buttons=Application.MessageButtons.OK_BUTTON [, (bool)enable_markup=False [, (bool)show_success_icon=False]]]) -&gt; int : Shows a message box, returning the position of the pressed button. C++ signature :  int show_message(TPyHandle&lt;ASongApp&gt;,TText [,int=Application.MessageButtons.OK_BUTTON [,bool=False [,bool=False]]])</Doc>
<Value>Live.Application.Application.show_on_the_fly_message()<Description>Value</Description></Value>
<Doc>show_on_the_fly_message( (Application)arg1, (str)message [, (int)buttons=Application.MessageButtons.OK_BUTTON [, (bool)enable_markup=False [, (bool)show_success_icon=False]]]) -&gt; int : Same as show_message, but for when there is no predefined Text object. C++ signature :  int show_on_the_fly_message(TPyHandle&lt;ASongApp&gt;,std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; [,int=Application.MessageButtons.OK_BUTTON [,bool=False [,bool=False]]])</Doc>
<Value>Live.Application.Application.unavailable_features<Description>Value</Description></Value>
<Doc>List of features that are unavailable due to limitations of the current Live edition.</Doc>
<Value>Live.Application.Application.unavailable_features_has_listener()<Description>Value</Description></Value>
<Doc>unavailable_features_has_listener( (Application)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "unavailable_features". C++ signature :  bool unavailable_features_has_listener(TPyHandle&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Value>Live.Application.Application.view<Description>Value</Description></Value>
<Doc>Returns the applications view component.</Doc>
<Class>Live.Application.Application.View<Description>Class</Description></Class>
<Doc>This class represents the view aspects of the Live application.</Doc>
<Built-In>Live.Application.Application.View.add_browse_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>add_browse_mode_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "browse_mode" has changed. C++ signature :  void add_browse_mode_listener(TPyViewData&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Application.Application.View.add_focused_document_view_listener()<Description>Built-In</Description></Built-In>
<Doc>add_focused_document_view_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "focused_document_view" has changed. C++ signature :  void add_focused_document_view_listener(TPyViewData&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Application.Application.View.add_is_view_visible_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_view_visible_listener( (View)arg1, (object)arg2, (object)arg3) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_view_visible" has changed. C++ signature :  void add_is_view_visible_listener(TPyViewData&lt;ASongApp&gt;,TString,boost::python::api::object)</Doc>
<Built-In>Live.Application.Application.View.add_view_focus_changed_listener()<Description>Built-In</Description></Built-In>
<Doc>add_view_focus_changed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "view_focus_changed" has changed. C++ signature :  void add_view_focus_changed_listener(TPyViewData&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Application.Application.View.available_main_views()<Description>Built-In</Description></Built-In>
<Doc>available_main_views( (View)arg1) -&gt; StringVector : Return a list of strings with the available subcomponent views, which is to be specified, when using the rest of this classes functions. A 'subcomponent view' is a main view component of a document view, like the Session view, the Arranger or Detailview and so on... C++ signature :  std::__1::vector&lt;TString, std::__1::allocator&lt;TString&gt;&gt; available_main_views(TPyViewData&lt;ASongApp&gt;)</Doc>
<Built-In>Live.Application.Application.View.browse_mode_has_listener()<Description>Built-In</Description></Built-In>
<Doc>browse_mode_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "browse_mode". C++ signature :  bool browse_mode_has_listener(TPyViewData&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Application.Application.View.focus_view()<Description>Built-In</Description></Built-In>
<Doc>focus_view( (View)arg1, (object)arg2) -&gt; None : Show and focus one through the identifier string specified view. C++ signature :  void focus_view(TPyViewData&lt;ASongApp&gt;,TString)</Doc>
<Built-In>Live.Application.Application.View.focused_document_view_has_listener()<Description>Built-In</Description></Built-In>
<Doc>focused_document_view_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "focused_document_view". C++ signature :  bool focused_document_view_has_listener(TPyViewData&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Application.Application.View.hide_view()<Description>Built-In</Description></Built-In>
<Doc>hide_view( (View)arg1, (object)arg2) -&gt; None : Hide one through the identifier string specified view. C++ signature :  void hide_view(TPyViewData&lt;ASongApp&gt;,TString)</Doc>
<Built-In>Live.Application.Application.View.is_view_visible()<Description>Built-In</Description></Built-In>
<Doc>is_view_visible( (View)arg1, (object)identifier [, (bool)main_window_only=True]) -&gt; bool : Return true if the through the identifier string specified view is currently visible. If main_window_only is set to False, this will also check in second window. Notifications from the second window are not yet supported. C++ signature :  bool is_view_visible(TPyViewData&lt;ASongApp&gt;,TString [,bool=True])</Doc>
<Built-In>Live.Application.Application.View.is_view_visible_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_view_visible_has_listener( (View)arg1, (object)arg2, (object)arg3) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_view_visible". C++ signature :  bool is_view_visible_has_listener(TPyViewData&lt;ASongApp&gt;,TString,boost::python::api::object)</Doc>
<Built-In>Live.Application.Application.View.remove_browse_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_browse_mode_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "browse_mode". C++ signature :  void remove_browse_mode_listener(TPyViewData&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Application.Application.View.remove_focused_document_view_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_focused_document_view_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "focused_document_view". C++ signature :  void remove_focused_document_view_listener(TPyViewData&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Application.Application.View.remove_is_view_visible_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_view_visible_listener( (View)arg1, (object)arg2, (object)arg3) -&gt; None : Remove a previously set listener function or method from property "is_view_visible". C++ signature :  void remove_is_view_visible_listener(TPyViewData&lt;ASongApp&gt;,TString,boost::python::api::object)</Doc>
<Built-In>Live.Application.Application.View.remove_view_focus_changed_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_view_focus_changed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "view_focus_changed". C++ signature :  void remove_view_focus_changed_listener(TPyViewData&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Application.Application.View.scroll_view()<Description>Built-In</Description></Built-In>
<Doc>scroll_view( (View)arg1, (int)arg2, (object)arg3, (bool)arg4) -&gt; None : Scroll through the identifier string specified view into the given direction, if possible.  Will silently return if the specified view can not perform the requested action. C++ signature :  void scroll_view(TPyViewData&lt;ASongApp&gt;,int,TString,bool)</Doc>
<Built-In>Live.Application.Application.View.show_view()<Description>Built-In</Description></Built-In>
<Doc>show_view( (View)arg1, (object)arg2) -&gt; None : Show one through the identifier string specified view. Will throw a runtime error if this is called in Live's initialization scope. C++ signature :  void show_view(TPyViewData&lt;ASongApp&gt;,TString)</Doc>
<Built-In>Live.Application.Application.View.toggle_browse()<Description>Built-In</Description></Built-In>
<Doc>toggle_browse( (View)arg1) -&gt; None : Reveals the device chain, the browser and starts hot swap for the selected device. Calling this function again stops hot swap. C++ signature :  void toggle_browse(TPyViewData&lt;ASongApp&gt;)</Doc>
<Built-In>Live.Application.Application.View.view_focus_changed_has_listener()<Description>Built-In</Description></Built-In>
<Doc>view_focus_changed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "view_focus_changed". C++ signature :  bool view_focus_changed_has_listener(TPyViewData&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Application.Application.View.zoom_view()<Description>Built-In</Description></Built-In>
<Doc>zoom_view( (View)arg1, (int)arg2, (object)arg3, (bool)arg4) -&gt; None : Zoom through the identifier string specified view into the given direction, if possible.  Will silently return if the specified view can not perform the requested action. C++ signature :  void zoom_view(TPyViewData&lt;ASongApp&gt;,int,TString,bool)</Doc>
<Value>Live.Application.Application.View.NavDirection<Description>Value</Description></Value>
<Value>Live.Application.Application.View.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Application.Application.View._live_ptr<Description>Value</Description></Value>
<Value>Live.Application.Application.View.add_browse_mode_listener()<Description>Value</Description></Value>
<Doc>add_browse_mode_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "browse_mode" has changed. C++ signature :  void add_browse_mode_listener(TPyViewData&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Value>Live.Application.Application.View.add_focused_document_view_listener()<Description>Value</Description></Value>
<Doc>add_focused_document_view_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "focused_document_view" has changed. C++ signature :  void add_focused_document_view_listener(TPyViewData&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Value>Live.Application.Application.View.add_is_view_visible_listener()<Description>Value</Description></Value>
<Doc>add_is_view_visible_listener( (View)arg1, (object)arg2, (object)arg3) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_view_visible" has changed. C++ signature :  void add_is_view_visible_listener(TPyViewData&lt;ASongApp&gt;,TString,boost::python::api::object)</Doc>
<Value>Live.Application.Application.View.add_view_focus_changed_listener()<Description>Value</Description></Value>
<Doc>add_view_focus_changed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "view_focus_changed" has changed. C++ signature :  void add_view_focus_changed_listener(TPyViewData&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Value>Live.Application.Application.View.available_main_views()<Description>Value</Description></Value>
<Doc>available_main_views( (View)arg1) -&gt; StringVector : Return a list of strings with the available subcomponent views, which is to be specified, when using the rest of this classes functions. A 'subcomponent view' is a main view component of a document view, like the Session view, the Arranger or Detailview and so on... C++ signature :  std::__1::vector&lt;TString, std::__1::allocator&lt;TString&gt;&gt; available_main_views(TPyViewData&lt;ASongApp&gt;)</Doc>
<Value>Live.Application.Application.View.browse_mode<Description>Value</Description></Value>
<Doc>Return true if HotSwap mode is active for any target.</Doc>
<Value>Live.Application.Application.View.browse_mode_has_listener()<Description>Value</Description></Value>
<Doc>browse_mode_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "browse_mode". C++ signature :  bool browse_mode_has_listener(TPyViewData&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Value>Live.Application.Application.View.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the application view.</Doc>
<Value>Live.Application.Application.View.focus_view()<Description>Value</Description></Value>
<Doc>focus_view( (View)arg1, (object)arg2) -&gt; None : Show and focus one through the identifier string specified view. C++ signature :  void focus_view(TPyViewData&lt;ASongApp&gt;,TString)</Doc>
<Value>Live.Application.Application.View.focused_document_view<Description>Value</Description></Value>
<Doc>Return the name of the document view ('Session' or 'Arranger')shown in the currently selected window.</Doc>
<Value>Live.Application.Application.View.focused_document_view_has_listener()<Description>Value</Description></Value>
<Doc>focused_document_view_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "focused_document_view". C++ signature :  bool focused_document_view_has_listener(TPyViewData&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Value>Live.Application.Application.View.hide_view()<Description>Value</Description></Value>
<Doc>hide_view( (View)arg1, (object)arg2) -&gt; None : Hide one through the identifier string specified view. C++ signature :  void hide_view(TPyViewData&lt;ASongApp&gt;,TString)</Doc>
<Value>Live.Application.Application.View.is_view_visible()<Description>Value</Description></Value>
<Doc>is_view_visible( (View)arg1, (object)identifier [, (bool)main_window_only=True]) -&gt; bool : Return true if the through the identifier string specified view is currently visible. If main_window_only is set to False, this will also check in second window. Notifications from the second window are not yet supported. C++ signature :  bool is_view_visible(TPyViewData&lt;ASongApp&gt;,TString [,bool=True])</Doc>
<Value>Live.Application.Application.View.is_view_visible_has_listener()<Description>Value</Description></Value>
<Doc>is_view_visible_has_listener( (View)arg1, (object)arg2, (object)arg3) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_view_visible". C++ signature :  bool is_view_visible_has_listener(TPyViewData&lt;ASongApp&gt;,TString,boost::python::api::object)</Doc>
<Value>Live.Application.Application.View.remove_browse_mode_listener()<Description>Value</Description></Value>
<Doc>remove_browse_mode_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "browse_mode". C++ signature :  void remove_browse_mode_listener(TPyViewData&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Value>Live.Application.Application.View.remove_focused_document_view_listener()<Description>Value</Description></Value>
<Doc>remove_focused_document_view_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "focused_document_view". C++ signature :  void remove_focused_document_view_listener(TPyViewData&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Value>Live.Application.Application.View.remove_is_view_visible_listener()<Description>Value</Description></Value>
<Doc>remove_is_view_visible_listener( (View)arg1, (object)arg2, (object)arg3) -&gt; None : Remove a previously set listener function or method from property "is_view_visible". C++ signature :  void remove_is_view_visible_listener(TPyViewData&lt;ASongApp&gt;,TString,boost::python::api::object)</Doc>
<Value>Live.Application.Application.View.remove_view_focus_changed_listener()<Description>Value</Description></Value>
<Doc>remove_view_focus_changed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "view_focus_changed". C++ signature :  void remove_view_focus_changed_listener(TPyViewData&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Value>Live.Application.Application.View.scroll_view()<Description>Value</Description></Value>
<Doc>scroll_view( (View)arg1, (int)arg2, (object)arg3, (bool)arg4) -&gt; None : Scroll through the identifier string specified view into the given direction, if possible.  Will silently return if the specified view can not perform the requested action. C++ signature :  void scroll_view(TPyViewData&lt;ASongApp&gt;,int,TString,bool)</Doc>
<Value>Live.Application.Application.View.show_view()<Description>Value</Description></Value>
<Doc>show_view( (View)arg1, (object)arg2) -&gt; None : Show one through the identifier string specified view. Will throw a runtime error if this is called in Live's initialization scope. C++ signature :  void show_view(TPyViewData&lt;ASongApp&gt;,TString)</Doc>
<Value>Live.Application.Application.View.toggle_browse()<Description>Value</Description></Value>
<Doc>toggle_browse( (View)arg1) -&gt; None : Reveals the device chain, the browser and starts hot swap for the selected device. Calling this function again stops hot swap. C++ signature :  void toggle_browse(TPyViewData&lt;ASongApp&gt;)</Doc>
<Value>Live.Application.Application.View.view_focus_changed_has_listener()<Description>Value</Description></Value>
<Doc>view_focus_changed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "view_focus_changed". C++ signature :  bool view_focus_changed_has_listener(TPyViewData&lt;ASongApp&gt;,boost::python::api::object)</Doc>
<Value>Live.Application.Application.View.zoom_view()<Description>Value</Description></Value>
<Doc>zoom_view( (View)arg1, (int)arg2, (object)arg3, (bool)arg4) -&gt; None : Zoom through the identifier string specified view into the given direction, if possible.  Will silently return if the specified view can not perform the requested action. C++ signature :  void zoom_view(TPyViewData&lt;ASongApp&gt;,int,TString,bool)</Doc>
<Class>Live.Application.Application.View.NavDirection<Description>Class</Description></Class>
<Built-In>Live.Application.Application.View.NavDirection.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Application.Application.View.NavDirection.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Application.Application.View.NavDirection.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.Application.Application.View.NavDirection.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.Application.Application.View.NavDirection.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.Application.Application.View.NavDirection.down<Description>Value</Description></Value>
<Value>Live.Application.Application.View.NavDirection.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Application.Application.View.NavDirection.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.Application.Application.View.NavDirection.left<Description>Value</Description></Value>
<Value>Live.Application.Application.View.NavDirection.name<Description>Value</Description></Value>
<Value>Live.Application.Application.View.NavDirection.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.Application.Application.View.NavDirection.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.Application.Application.View.NavDirection.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.Application.Application.View.NavDirection.right<Description>Value</Description></Value>
<Value>Live.Application.Application.View.NavDirection.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.Application.Application.View.NavDirection.up<Description>Value</Description></Value>
<Value>Live.Application.Application.View.NavDirection.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.Application.ControlDescription<Description>Class</Description></Class>
<Doc>Describes a control present in a control surface proxy</Doc>
<Value>Live.Application.ControlDescription.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Application.ControlDescription.id<Description>Value</Description></Value>
<Value>Live.Application.ControlDescription.name<Description>Value</Description></Value>
<Class>Live.Application.ControlDescriptionVector<Description>Class</Description></Class>
<Doc>A container for returning control descriptions.</Doc>
<Built-In>Live.Application.ControlDescriptionVector.append()<Description>Built-In</Description></Built-In>
<Doc>append( (ControlDescriptionVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;TControlDescription, std::__1::allocator&lt;TControlDescription&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Built-In>Live.Application.ControlDescriptionVector.extend()<Description>Built-In</Description></Built-In>
<Doc>extend( (ControlDescriptionVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;TControlDescription, std::__1::allocator&lt;TControlDescription&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Application.ControlDescriptionVector.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Application.ControlDescriptionVector.append()<Description>Value</Description></Value>
<Doc>append( (ControlDescriptionVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;TControlDescription, std::__1::allocator&lt;TControlDescription&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Application.ControlDescriptionVector.extend()<Description>Value</Description></Value>
<Doc>extend( (ControlDescriptionVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;TControlDescription, std::__1::allocator&lt;TControlDescription&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Class>Live.Application.ControlSurfaceProxy<Description>Class</Description></Class>
<Doc>Represents a control surface running in a different process. For use by M4L</Doc>
<Built-In>Live.Application.ControlSurfaceProxy.add_control_values_arrived_listener()<Description>Built-In</Description></Built-In>
<Doc>add_control_values_arrived_listener( (ControlSurfaceProxy)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "control_values_arrived" has changed. C++ signature :  void add_control_values_arrived_listener(APythonControlSurfaceProxy,boost::python::api::object)</Doc>
<Built-In>Live.Application.ControlSurfaceProxy.add_midi_received_listener()<Description>Built-In</Description></Built-In>
<Doc>add_midi_received_listener( (ControlSurfaceProxy)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "midi_received" has changed. C++ signature :  void add_midi_received_listener(APythonControlSurfaceProxy,boost::python::api::object)</Doc>
<Built-In>Live.Application.ControlSurfaceProxy.control_values_arrived_has_listener()<Description>Built-In</Description></Built-In>
<Doc>control_values_arrived_has_listener( (ControlSurfaceProxy)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "control_values_arrived". C++ signature :  bool control_values_arrived_has_listener(APythonControlSurfaceProxy,boost::python::api::object)</Doc>
<Built-In>Live.Application.ControlSurfaceProxy.enable_receive_midi()<Description>Built-In</Description></Built-In>
<Doc>enable_receive_midi( (ControlSurfaceProxy)arg1, (bool)arg2) -&gt; None : C++ signature :  void enable_receive_midi(APythonControlSurfaceProxy {lvalue},bool)</Doc>
<Built-In>Live.Application.ControlSurfaceProxy.fetch_received_midi_messages()<Description>Built-In</Description></Built-In>
<Doc>fetch_received_midi_messages( (ControlSurfaceProxy)arg1) -&gt; tuple : C++ signature :  boost::python::tuple fetch_received_midi_messages(APythonControlSurfaceProxy {lvalue})</Doc>
<Built-In>Live.Application.ControlSurfaceProxy.fetch_received_values()<Description>Built-In</Description></Built-In>
<Doc>fetch_received_values( (ControlSurfaceProxy)arg1) -&gt; tuple : C++ signature :  boost::python::tuple fetch_received_values(APythonControlSurfaceProxy {lvalue})</Doc>
<Built-In>Live.Application.ControlSurfaceProxy.grab_control()<Description>Built-In</Description></Built-In>
<Doc>grab_control( (ControlSurfaceProxy)arg1, (int)arg2) -&gt; None : C++ signature :  void grab_control(APythonControlSurfaceProxy {lvalue},int)</Doc>
<Built-In>Live.Application.ControlSurfaceProxy.midi_received_has_listener()<Description>Built-In</Description></Built-In>
<Doc>midi_received_has_listener( (ControlSurfaceProxy)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "midi_received". C++ signature :  bool midi_received_has_listener(APythonControlSurfaceProxy,boost::python::api::object)</Doc>
<Built-In>Live.Application.ControlSurfaceProxy.release_control()<Description>Built-In</Description></Built-In>
<Doc>release_control( (ControlSurfaceProxy)arg1, (int)arg2) -&gt; None : C++ signature :  void release_control(APythonControlSurfaceProxy {lvalue},int)</Doc>
<Built-In>Live.Application.ControlSurfaceProxy.remove_control_values_arrived_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_control_values_arrived_listener( (ControlSurfaceProxy)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "control_values_arrived". C++ signature :  void remove_control_values_arrived_listener(APythonControlSurfaceProxy,boost::python::api::object)</Doc>
<Built-In>Live.Application.ControlSurfaceProxy.remove_midi_received_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_midi_received_listener( (ControlSurfaceProxy)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "midi_received". C++ signature :  void remove_midi_received_listener(APythonControlSurfaceProxy,boost::python::api::object)</Doc>
<Built-In>Live.Application.ControlSurfaceProxy.send_midi()<Description>Built-In</Description></Built-In>
<Doc>send_midi( (ControlSurfaceProxy)arg1, (tuple)arg2) -&gt; None : C++ signature :  void send_midi(APythonControlSurfaceProxy {lvalue},boost::python::tuple)</Doc>
<Built-In>Live.Application.ControlSurfaceProxy.send_value()<Description>Built-In</Description></Built-In>
<Doc>send_value( (ControlSurfaceProxy)arg1, (tuple)arg2) -&gt; None : C++ signature :  void send_value(APythonControlSurfaceProxy {lvalue},boost::python::tuple)</Doc>
<Built-In>Live.Application.ControlSurfaceProxy.subscribe_to_control()<Description>Built-In</Description></Built-In>
<Doc>subscribe_to_control( (ControlSurfaceProxy)arg1, (int)arg2) -&gt; None : C++ signature :  void subscribe_to_control(APythonControlSurfaceProxy {lvalue},int)</Doc>
<Built-In>Live.Application.ControlSurfaceProxy.unsubscribe_from_control()<Description>Built-In</Description></Built-In>
<Doc>unsubscribe_from_control( (ControlSurfaceProxy)arg1, (int)arg2) -&gt; None : C++ signature :  void unsubscribe_from_control(APythonControlSurfaceProxy {lvalue},int)</Doc>
<Value>Live.Application.ControlSurfaceProxy.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Application.ControlSurfaceProxy.add_control_values_arrived_listener()<Description>Value</Description></Value>
<Doc>add_control_values_arrived_listener( (ControlSurfaceProxy)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "control_values_arrived" has changed. C++ signature :  void add_control_values_arrived_listener(APythonControlSurfaceProxy,boost::python::api::object)</Doc>
<Value>Live.Application.ControlSurfaceProxy.add_midi_received_listener()<Description>Value</Description></Value>
<Doc>add_midi_received_listener( (ControlSurfaceProxy)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "midi_received" has changed. C++ signature :  void add_midi_received_listener(APythonControlSurfaceProxy,boost::python::api::object)</Doc>
<Value>Live.Application.ControlSurfaceProxy.control_descriptions<Description>Value</Description></Value>
<Value>Live.Application.ControlSurfaceProxy.control_values_arrived_has_listener()<Description>Value</Description></Value>
<Doc>control_values_arrived_has_listener( (ControlSurfaceProxy)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "control_values_arrived". C++ signature :  bool control_values_arrived_has_listener(APythonControlSurfaceProxy,boost::python::api::object)</Doc>
<Value>Live.Application.ControlSurfaceProxy.enable_receive_midi()<Description>Value</Description></Value>
<Doc>enable_receive_midi( (ControlSurfaceProxy)arg1, (bool)arg2) -&gt; None : C++ signature :  void enable_receive_midi(APythonControlSurfaceProxy {lvalue},bool)</Doc>
<Value>Live.Application.ControlSurfaceProxy.fetch_received_midi_messages()<Description>Value</Description></Value>
<Doc>fetch_received_midi_messages( (ControlSurfaceProxy)arg1) -&gt; tuple : C++ signature :  boost::python::tuple fetch_received_midi_messages(APythonControlSurfaceProxy {lvalue})</Doc>
<Value>Live.Application.ControlSurfaceProxy.fetch_received_values()<Description>Value</Description></Value>
<Doc>fetch_received_values( (ControlSurfaceProxy)arg1) -&gt; tuple : C++ signature :  boost::python::tuple fetch_received_values(APythonControlSurfaceProxy {lvalue})</Doc>
<Value>Live.Application.ControlSurfaceProxy.grab_control()<Description>Value</Description></Value>
<Doc>grab_control( (ControlSurfaceProxy)arg1, (int)arg2) -&gt; None : C++ signature :  void grab_control(APythonControlSurfaceProxy {lvalue},int)</Doc>
<Value>Live.Application.ControlSurfaceProxy.midi_received_has_listener()<Description>Value</Description></Value>
<Doc>midi_received_has_listener( (ControlSurfaceProxy)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "midi_received". C++ signature :  bool midi_received_has_listener(APythonControlSurfaceProxy,boost::python::api::object)</Doc>
<Value>Live.Application.ControlSurfaceProxy.release_control()<Description>Value</Description></Value>
<Doc>release_control( (ControlSurfaceProxy)arg1, (int)arg2) -&gt; None : C++ signature :  void release_control(APythonControlSurfaceProxy {lvalue},int)</Doc>
<Value>Live.Application.ControlSurfaceProxy.remove_control_values_arrived_listener()<Description>Value</Description></Value>
<Doc>remove_control_values_arrived_listener( (ControlSurfaceProxy)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "control_values_arrived". C++ signature :  void remove_control_values_arrived_listener(APythonControlSurfaceProxy,boost::python::api::object)</Doc>
<Value>Live.Application.ControlSurfaceProxy.remove_midi_received_listener()<Description>Value</Description></Value>
<Doc>remove_midi_received_listener( (ControlSurfaceProxy)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "midi_received". C++ signature :  void remove_midi_received_listener(APythonControlSurfaceProxy,boost::python::api::object)</Doc>
<Value>Live.Application.ControlSurfaceProxy.send_midi()<Description>Value</Description></Value>
<Doc>send_midi( (ControlSurfaceProxy)arg1, (tuple)arg2) -&gt; None : C++ signature :  void send_midi(APythonControlSurfaceProxy {lvalue},boost::python::tuple)</Doc>
<Value>Live.Application.ControlSurfaceProxy.send_value()<Description>Value</Description></Value>
<Doc>send_value( (ControlSurfaceProxy)arg1, (tuple)arg2) -&gt; None : C++ signature :  void send_value(APythonControlSurfaceProxy {lvalue},boost::python::tuple)</Doc>
<Value>Live.Application.ControlSurfaceProxy.subscribe_to_control()<Description>Value</Description></Value>
<Doc>subscribe_to_control( (ControlSurfaceProxy)arg1, (int)arg2) -&gt; None : C++ signature :  void subscribe_to_control(APythonControlSurfaceProxy {lvalue},int)</Doc>
<Value>Live.Application.ControlSurfaceProxy.type_name<Description>Value</Description></Value>
<Value>Live.Application.ControlSurfaceProxy.unsubscribe_from_control()<Description>Value</Description></Value>
<Doc>unsubscribe_from_control( (ControlSurfaceProxy)arg1, (int)arg2) -&gt; None : C++ signature :  void unsubscribe_from_control(APythonControlSurfaceProxy {lvalue},int)</Doc>
<Class>Live.Application.MessageButtons<Description>Class</Description></Class>
<Doc>Specifies the characteristics of the message box, e.g. which buttons to show.</Doc>
<Built-In>Live.Application.MessageButtons.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Application.MessageButtons.OK_BUTTON<Description>Value</Description></Value>
<Doc>Specifies the characteristics of the message box, e.g. which buttons to show.</Doc>
<Value>Live.Application.MessageButtons.OK_NEW_SET_BUTTON<Description>Value</Description></Value>
<Doc>Specifies the characteristics of the message box, e.g. which buttons to show.</Doc>
<Value>Live.Application.MessageButtons.OK_RETRY_BUTTON<Description>Value</Description></Value>
<Doc>Specifies the characteristics of the message box, e.g. which buttons to show.</Doc>
<Value>Live.Application.MessageButtons.SAVE_DONT_SAVE_BUTTON<Description>Value</Description></Value>
<Doc>Specifies the characteristics of the message box, e.g. which buttons to show.</Doc>
<Value>Live.Application.MessageButtons.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Application.MessageButtons.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.Application.MessageButtons.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.Application.MessageButtons.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.Application.MessageButtons.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Application.MessageButtons.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.Application.MessageButtons.name<Description>Value</Description></Value>
<Value>Live.Application.MessageButtons.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.Application.MessageButtons.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.Application.MessageButtons.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.Application.MessageButtons.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.Application.MessageButtons.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.Application.UnavailableFeature<Description>Class</Description></Class>
<Built-In>Live.Application.UnavailableFeature.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Application.UnavailableFeature.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Application.UnavailableFeature.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.Application.UnavailableFeature.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.Application.UnavailableFeature.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.Application.UnavailableFeature.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Application.UnavailableFeature.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.Application.UnavailableFeature.name<Description>Value</Description></Value>
<Value>Live.Application.UnavailableFeature.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.Application.UnavailableFeature.note_velocity_ranges_and_probabilities<Description>Value</Description></Value>
<Value>Live.Application.UnavailableFeature.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.Application.UnavailableFeature.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.Application.UnavailableFeature.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.Application.UnavailableFeature.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.Application.UnavailableFeatureVector<Description>Class</Description></Class>
<Doc>A container for returning unavailable features.</Doc>
<Built-In>Live.Application.UnavailableFeatureVector.append()<Description>Built-In</Description></Built-In>
<Doc>append( (UnavailableFeatureVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;NPythonApplication::TUnavailableFeature, std::__1::allocator&lt;NPythonApplication::TUnavailableFeature&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Built-In>Live.Application.UnavailableFeatureVector.extend()<Description>Built-In</Description></Built-In>
<Doc>extend( (UnavailableFeatureVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;NPythonApplication::TUnavailableFeature, std::__1::allocator&lt;NPythonApplication::TUnavailableFeature&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Application.UnavailableFeatureVector.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Application.UnavailableFeatureVector.append()<Description>Value</Description></Value>
<Doc>append( (UnavailableFeatureVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;NPythonApplication::TUnavailableFeature, std::__1::allocator&lt;NPythonApplication::TUnavailableFeature&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Application.UnavailableFeatureVector.extend()<Description>Value</Description></Value>
<Doc>extend( (UnavailableFeatureVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;NPythonApplication::TUnavailableFeature, std::__1::allocator&lt;NPythonApplication::TUnavailableFeature&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Class>Live.Application.Variants<Description>Class</Description></Class>
<Doc>Holds strings representing what type of Live is running.</Doc>
<Value>Live.Application.Variants.BETA<Description>Value</Description></Value>
<Value>Live.Application.Variants.INTRO<Description>Value</Description></Value>
<Value>Live.Application.Variants.LITE<Description>Value</Description></Value>
<Value>Live.Application.Variants.STANDARD<Description>Value</Description></Value>
<Value>Live.Application.Variants.SUITE<Description>Value</Description></Value>
<Value>Live.Application.Variants.TRIAL<Description>Value</Description></Value>
<Value>Live.Application.Variants.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Module>Live.Base<Description>Module</Description></Module>
<Built-In>Live.Base.get_text()<Description>Built-In</Description></Built-In>
<Doc>get_text( (str)classname, (str)textname) -&gt; Text : Retrieves the (translated) Text identified by `classname` and `textname`. C++ signature :  TText const* get_text(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;,std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;)</Doc>
<Built-In>Live.Base.log()<Description>Built-In</Description></Built-In>
<Doc>log( (str)arg1) -&gt; None : C++ signature :  void log(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;)</Doc>
<Built-In>Live.Base.subst_args()<Description>Built-In</Description></Built-In>
<Doc>subst_args( (Text)text [, (str)arg1='' [, (str)arg2='' [, (str)arg3='' [, (str)arg4='' [, (str)arg5='']]]]]) -&gt; str : C++ signature :  std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; subst_args(TText [,std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;='' [,std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;='' [,std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;='' [,std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;='' [,std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;='']]]]])</Doc>
<Class>Live.Base.FloatVector<Description>Class</Description></Class>
<Doc>A simple container for returning floats from Live.</Doc>
<Built-In>Live.Base.FloatVector.append()<Description>Built-In</Description></Built-In>
<Doc>append( (FloatVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Built-In>Live.Base.FloatVector.extend()<Description>Built-In</Description></Built-In>
<Doc>extend( (FloatVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Base.FloatVector.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Base.FloatVector.append()<Description>Value</Description></Value>
<Doc>append( (FloatVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Base.FloatVector.extend()<Description>Value</Description></Value>
<Doc>extend( (FloatVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Class>Live.Base.IntU64Vector<Description>Class</Description></Class>
<Doc>A simple container for returning unsigned long integers from Live.</Doc>
<Built-In>Live.Base.IntU64Vector.append()<Description>Built-In</Description></Built-In>
<Doc>append( (IntU64Vector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;unsigned long long, std::__1::allocator&lt;unsigned long long&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Built-In>Live.Base.IntU64Vector.extend()<Description>Built-In</Description></Built-In>
<Doc>extend( (IntU64Vector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;unsigned long long, std::__1::allocator&lt;unsigned long long&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Base.IntU64Vector.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Base.IntU64Vector.append()<Description>Value</Description></Value>
<Doc>append( (IntU64Vector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;unsigned long long, std::__1::allocator&lt;unsigned long long&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Base.IntU64Vector.extend()<Description>Value</Description></Value>
<Doc>extend( (IntU64Vector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;unsigned long long, std::__1::allocator&lt;unsigned long long&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Class>Live.Base.IntVector<Description>Class</Description></Class>
<Doc>A simple container for returning integers from Live.</Doc>
<Built-In>Live.Base.IntVector.append()<Description>Built-In</Description></Built-In>
<Doc>append( (IntVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Built-In>Live.Base.IntVector.extend()<Description>Built-In</Description></Built-In>
<Doc>extend( (IntVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Base.IntVector.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Base.IntVector.append()<Description>Value</Description></Value>
<Doc>append( (IntVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Base.IntVector.extend()<Description>Value</Description></Value>
<Doc>extend( (IntVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Class>Live.Base.LimitationError<Description>Class</Description></Class>
<Doc>exception cause</Doc>
<Value>Live.Base.LimitationError.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Base.LimitationError.add_note<Description>Value</Description></Value>
<Doc>Exception.add_note(note) -- add a note to the exception</Doc>
<Value>Live.Base.LimitationError.args<Description>Value</Description></Value>
<Value>Live.Base.LimitationError.with_traceback<Description>Value</Description></Value>
<Class>Live.Base.ObjectVector<Description>Class</Description></Class>
<Doc>A simple read only container for returning python objects.</Doc>
<Built-In>Live.Base.ObjectVector.append()<Description>Built-In</Description></Built-In>
<Doc>append( (ObjectVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;boost::python::api::object, std::__1::allocator&lt;boost::python::api::object&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Built-In>Live.Base.ObjectVector.extend()<Description>Built-In</Description></Built-In>
<Doc>extend( (ObjectVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;boost::python::api::object, std::__1::allocator&lt;boost::python::api::object&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Base.ObjectVector.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Base.ObjectVector.append()<Description>Value</Description></Value>
<Doc>append( (ObjectVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;boost::python::api::object, std::__1::allocator&lt;boost::python::api::object&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Base.ObjectVector.extend()<Description>Value</Description></Value>
<Doc>extend( (ObjectVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;boost::python::api::object, std::__1::allocator&lt;boost::python::api::object&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Class>Live.Base.StringVector<Description>Class</Description></Class>
<Doc>A simple container for returning strings from Live.</Doc>
<Built-In>Live.Base.StringVector.append()<Description>Built-In</Description></Built-In>
<Doc>append( (StringVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;TString, std::__1::allocator&lt;TString&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Built-In>Live.Base.StringVector.extend()<Description>Built-In</Description></Built-In>
<Doc>extend( (StringVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;TString, std::__1::allocator&lt;TString&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Base.StringVector.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Base.StringVector.append()<Description>Value</Description></Value>
<Doc>append( (StringVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;TString, std::__1::allocator&lt;TString&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Base.StringVector.extend()<Description>Value</Description></Value>
<Doc>extend( (StringVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;TString, std::__1::allocator&lt;TString&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Class>Live.Base.Text<Description>Class</Description></Class>
<Doc>A translatable, immutable string.</Doc>
<Value>Live.Base.Text.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Base.Text.text<Description>Value</Description></Value>
<Class>Live.Base.Timer<Description>Class</Description></Class>
<Doc>A timer that will trigger a callback after a certain inverval. The timer can be repeated and will trigger the callback every interval. Errors in the callback will stop the timer.</Doc>
<Built-In>Live.Base.Timer.restart()<Description>Built-In</Description></Built-In>
<Doc>restart( (Timer)arg1) -&gt; None : C++ signature :  void restart(PythonTimer {lvalue})</Doc>
<Built-In>Live.Base.Timer.start()<Description>Built-In</Description></Built-In>
<Doc>start( (Timer)arg1) -&gt; None : C++ signature :  void start(PythonTimer {lvalue})</Doc>
<Built-In>Live.Base.Timer.stop()<Description>Built-In</Description></Built-In>
<Doc>stop( (Timer)arg1) -&gt; None : C++ signature :  void stop(PythonTimer {lvalue})</Doc>
<Value>Live.Base.Timer.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Base.Timer.restart()<Description>Value</Description></Value>
<Doc>restart( (Timer)arg1) -&gt; None : C++ signature :  void restart(PythonTimer {lvalue})</Doc>
<Value>Live.Base.Timer.running<Description>Value</Description></Value>
<Value>Live.Base.Timer.start()<Description>Value</Description></Value>
<Doc>start( (Timer)arg1) -&gt; None : C++ signature :  void start(PythonTimer {lvalue})</Doc>
<Value>Live.Base.Timer.stop()<Description>Value</Description></Value>
<Doc>stop( (Timer)arg1) -&gt; None : C++ signature :  void stop(PythonTimer {lvalue})</Doc>
<Class>Live.Base.Vector<Description>Class</Description></Class>
<Doc>A simple read only container for returning objects from Live.</Doc>
<Built-In>Live.Base.Vector.append()<Description>Built-In</Description></Built-In>
<Doc>append( (Vector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;TWeakPtr&lt;TPyHandleBase&gt;, std::__1::allocator&lt;TWeakPtr&lt;TPyHandleBase&gt;&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Built-In>Live.Base.Vector.extend()<Description>Built-In</Description></Built-In>
<Doc>extend( (Vector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;TWeakPtr&lt;TPyHandleBase&gt;, std::__1::allocator&lt;TWeakPtr&lt;TPyHandleBase&gt;&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Base.Vector.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Base.Vector.append()<Description>Value</Description></Value>
<Doc>append( (Vector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;TWeakPtr&lt;TPyHandleBase&gt;, std::__1::allocator&lt;TWeakPtr&lt;TPyHandleBase&gt;&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Base.Vector.extend()<Description>Value</Description></Value>
<Doc>extend( (Vector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;TWeakPtr&lt;TPyHandleBase&gt;, std::__1::allocator&lt;TWeakPtr&lt;TPyHandleBase&gt;&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Module>Live.Browser<Description>Module</Description></Module>
<Class>Live.Browser.Browser<Description>Class</Description></Class>
<Doc>This class represents the live browser data base.</Doc>
<Built-In>Live.Browser.Browser.add_filter_type_listener()<Description>Built-In</Description></Built-In>
<Doc>add_filter_type_listener( (Browser)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "filter_type" has changed. C++ signature :  void add_filter_type_listener(TPyHandle&lt;ABrowserDelegate&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Browser.Browser.add_full_refresh_listener()<Description>Built-In</Description></Built-In>
<Doc>add_full_refresh_listener( (Browser)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "full_refresh" has changed. C++ signature :  void add_full_refresh_listener(TPyHandle&lt;ABrowserDelegate&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Browser.Browser.add_hotswap_target_listener()<Description>Built-In</Description></Built-In>
<Doc>add_hotswap_target_listener( (Browser)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "hotswap_target" has changed. C++ signature :  void add_hotswap_target_listener(TPyHandle&lt;ABrowserDelegate&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Browser.Browser.filter_type_has_listener()<Description>Built-In</Description></Built-In>
<Doc>filter_type_has_listener( (Browser)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "filter_type". C++ signature :  bool filter_type_has_listener(TPyHandle&lt;ABrowserDelegate&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Browser.Browser.full_refresh_has_listener()<Description>Built-In</Description></Built-In>
<Doc>full_refresh_has_listener( (Browser)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "full_refresh". C++ signature :  bool full_refresh_has_listener(TPyHandle&lt;ABrowserDelegate&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Browser.Browser.hotswap_target_has_listener()<Description>Built-In</Description></Built-In>
<Doc>hotswap_target_has_listener( (Browser)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "hotswap_target". C++ signature :  bool hotswap_target_has_listener(TPyHandle&lt;ABrowserDelegate&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Browser.Browser.load_item()<Description>Built-In</Description></Built-In>
<Doc>load_item( (Browser)arg1, (BrowserItem)arg2) -&gt; None : Loads the provided browser item. C++ signature :  void load_item(TPyHandle&lt;ABrowserDelegate&gt;,NPythonBrowser::TPythonBrowserItem)</Doc>
<Built-In>Live.Browser.Browser.preview_item()<Description>Built-In</Description></Built-In>
<Doc>preview_item( (Browser)arg1, (BrowserItem)arg2) -&gt; None : Previews the provided browser item. C++ signature :  void preview_item(TPyHandle&lt;ABrowserDelegate&gt;,NPythonBrowser::TPythonBrowserItem)</Doc>
<Built-In>Live.Browser.Browser.relation_to_hotswap_target()<Description>Built-In</Description></Built-In>
<Doc>relation_to_hotswap_target( (Browser)arg1, (BrowserItem)arg2) -&gt; Relation : Returns the relation between the given browser item and the current hotswap target C++ signature :  ableton::live_library::Relation relation_to_hotswap_target(TPyHandle&lt;ABrowserDelegate&gt;,NPythonBrowser::TPythonBrowserItem)</Doc>
<Built-In>Live.Browser.Browser.remove_filter_type_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_filter_type_listener( (Browser)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "filter_type". C++ signature :  void remove_filter_type_listener(TPyHandle&lt;ABrowserDelegate&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Browser.Browser.remove_full_refresh_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_full_refresh_listener( (Browser)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "full_refresh". C++ signature :  void remove_full_refresh_listener(TPyHandle&lt;ABrowserDelegate&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Browser.Browser.remove_hotswap_target_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_hotswap_target_listener( (Browser)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "hotswap_target". C++ signature :  void remove_hotswap_target_listener(TPyHandle&lt;ABrowserDelegate&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Browser.Browser.stop_preview()<Description>Built-In</Description></Built-In>
<Doc>stop_preview( (Browser)arg1) -&gt; None : Stop the current preview. C++ signature :  void stop_preview(TPyHandle&lt;ABrowserDelegate&gt;)</Doc>
<Value>Live.Browser.Browser.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Browser.Browser._live_ptr<Description>Value</Description></Value>
<Value>Live.Browser.Browser.add_filter_type_listener()<Description>Value</Description></Value>
<Doc>add_filter_type_listener( (Browser)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "filter_type" has changed. C++ signature :  void add_filter_type_listener(TPyHandle&lt;ABrowserDelegate&gt;,boost::python::api::object)</Doc>
<Value>Live.Browser.Browser.add_full_refresh_listener()<Description>Value</Description></Value>
<Doc>add_full_refresh_listener( (Browser)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "full_refresh" has changed. C++ signature :  void add_full_refresh_listener(TPyHandle&lt;ABrowserDelegate&gt;,boost::python::api::object)</Doc>
<Value>Live.Browser.Browser.add_hotswap_target_listener()<Description>Value</Description></Value>
<Doc>add_hotswap_target_listener( (Browser)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "hotswap_target" has changed. C++ signature :  void add_hotswap_target_listener(TPyHandle&lt;ABrowserDelegate&gt;,boost::python::api::object)</Doc>
<Value>Live.Browser.Browser.audio_effects<Description>Value</Description></Value>
<Doc>Returns a browser item with access to all the Audio Effects content.</Doc>
<Value>Live.Browser.Browser.clips<Description>Value</Description></Value>
<Doc>Returns a browser item with access to all the Clips content.</Doc>
<Value>Live.Browser.Browser.colors<Description>Value</Description></Value>
<Doc>Returns a list of browser items containing the configured colors.</Doc>
<Value>Live.Browser.Browser.current_project<Description>Value</Description></Value>
<Doc>Returns a browser item with access to all the Current Project content.</Doc>
<Value>Live.Browser.Browser.drums<Description>Value</Description></Value>
<Doc>Returns a browser item with access to all the Drums content.</Doc>
<Value>Live.Browser.Browser.filter_type<Description>Value</Description></Value>
<Doc>Bang triggered when the hotswap target has changed.</Doc>
<Value>Live.Browser.Browser.filter_type_has_listener()<Description>Value</Description></Value>
<Doc>filter_type_has_listener( (Browser)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "filter_type". C++ signature :  bool filter_type_has_listener(TPyHandle&lt;ABrowserDelegate&gt;,boost::python::api::object)</Doc>
<Value>Live.Browser.Browser.full_refresh_has_listener()<Description>Value</Description></Value>
<Doc>full_refresh_has_listener( (Browser)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "full_refresh". C++ signature :  bool full_refresh_has_listener(TPyHandle&lt;ABrowserDelegate&gt;,boost::python::api::object)</Doc>
<Value>Live.Browser.Browser.hotswap_target<Description>Value</Description></Value>
<Doc>Bang triggered when the hotswap target has changed.</Doc>
<Value>Live.Browser.Browser.hotswap_target_has_listener()<Description>Value</Description></Value>
<Doc>hotswap_target_has_listener( (Browser)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "hotswap_target". C++ signature :  bool hotswap_target_has_listener(TPyHandle&lt;ABrowserDelegate&gt;,boost::python::api::object)</Doc>
<Value>Live.Browser.Browser.instruments<Description>Value</Description></Value>
<Doc>Returns a browser item with access to all the Instruments content.</Doc>
<Value>Live.Browser.Browser.legacy_libraries<Description>Value</Description></Value>
<Doc>Returns a list of browser items containing the installed legacy libraries. The list is always empty as legacy library handling has been removed.</Doc>
<Value>Live.Browser.Browser.load_item()<Description>Value</Description></Value>
<Doc>load_item( (Browser)arg1, (BrowserItem)arg2) -&gt; None : Loads the provided browser item. C++ signature :  void load_item(TPyHandle&lt;ABrowserDelegate&gt;,NPythonBrowser::TPythonBrowserItem)</Doc>
<Value>Live.Browser.Browser.max_for_live<Description>Value</Description></Value>
<Doc>Returns a browser item with access to all the Max For Live content.</Doc>
<Value>Live.Browser.Browser.midi_effects<Description>Value</Description></Value>
<Doc>Returns a browser item with access to all the Midi Effects content.</Doc>
<Value>Live.Browser.Browser.packs<Description>Value</Description></Value>
<Doc>Returns a browser item with access to all the Packs content.</Doc>
<Value>Live.Browser.Browser.plugins<Description>Value</Description></Value>
<Doc>Returns a browser item with access to all the Plugins content.</Doc>
<Value>Live.Browser.Browser.preview_item()<Description>Value</Description></Value>
<Doc>preview_item( (Browser)arg1, (BrowserItem)arg2) -&gt; None : Previews the provided browser item. C++ signature :  void preview_item(TPyHandle&lt;ABrowserDelegate&gt;,NPythonBrowser::TPythonBrowserItem)</Doc>
<Value>Live.Browser.Browser.relation_to_hotswap_target()<Description>Value</Description></Value>
<Doc>relation_to_hotswap_target( (Browser)arg1, (BrowserItem)arg2) -&gt; Relation : Returns the relation between the given browser item and the current hotswap target C++ signature :  ableton::live_library::Relation relation_to_hotswap_target(TPyHandle&lt;ABrowserDelegate&gt;,NPythonBrowser::TPythonBrowserItem)</Doc>
<Value>Live.Browser.Browser.remove_filter_type_listener()<Description>Value</Description></Value>
<Doc>remove_filter_type_listener( (Browser)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "filter_type". C++ signature :  void remove_filter_type_listener(TPyHandle&lt;ABrowserDelegate&gt;,boost::python::api::object)</Doc>
<Value>Live.Browser.Browser.remove_full_refresh_listener()<Description>Value</Description></Value>
<Doc>remove_full_refresh_listener( (Browser)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "full_refresh". C++ signature :  void remove_full_refresh_listener(TPyHandle&lt;ABrowserDelegate&gt;,boost::python::api::object)</Doc>
<Value>Live.Browser.Browser.remove_hotswap_target_listener()<Description>Value</Description></Value>
<Doc>remove_hotswap_target_listener( (Browser)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "hotswap_target". C++ signature :  void remove_hotswap_target_listener(TPyHandle&lt;ABrowserDelegate&gt;,boost::python::api::object)</Doc>
<Value>Live.Browser.Browser.samples<Description>Value</Description></Value>
<Doc>Returns a browser item with access to all the Samples content.</Doc>
<Value>Live.Browser.Browser.sounds<Description>Value</Description></Value>
<Doc>Returns a browser item with access to all the Sounds content.</Doc>
<Value>Live.Browser.Browser.stop_preview()<Description>Value</Description></Value>
<Doc>stop_preview( (Browser)arg1) -&gt; None : Stop the current preview. C++ signature :  void stop_preview(TPyHandle&lt;ABrowserDelegate&gt;)</Doc>
<Value>Live.Browser.Browser.user_folders<Description>Value</Description></Value>
<Doc>Returns a list of browser items containing all the user folders.</Doc>
<Value>Live.Browser.Browser.user_library<Description>Value</Description></Value>
<Doc>Returns a browser item with access to all the User Library content.</Doc>
<Class>Live.Browser.BrowserItem<Description>Class</Description></Class>
<Doc>This class represents an item of the browser hierarchy.</Doc>
<Value>Live.Browser.BrowserItem.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Browser.BrowserItem.children<Description>Value</Description></Value>
<Doc>Const access to the descendants of this browser item.</Doc>
<Value>Live.Browser.BrowserItem.is_device<Description>Value</Description></Value>
<Doc>Indicates if the browser item represents a device.</Doc>
<Value>Live.Browser.BrowserItem.is_folder<Description>Value</Description></Value>
<Doc>Indicates if the browser item represents folder.</Doc>
<Value>Live.Browser.BrowserItem.is_loadable<Description>Value</Description></Value>
<Doc>True if item can be loaded via the Browser's 'load_item' method.</Doc>
<Value>Live.Browser.BrowserItem.is_selected<Description>Value</Description></Value>
<Doc>True if the item is ancestor of or the actual selection.</Doc>
<Value>Live.Browser.BrowserItem.iter_children<Description>Value</Description></Value>
<Doc>Const iterable access to the descendants of this browser item.</Doc>
<Value>Live.Browser.BrowserItem.name<Description>Value</Description></Value>
<Doc>Const access to the canonical display name of this browser item.</Doc>
<Value>Live.Browser.BrowserItem.source<Description>Value</Description></Value>
<Doc>Specifies where does item come from -- i.e. Live pack, user library...</Doc>
<Value>Live.Browser.BrowserItem.uri<Description>Value</Description></Value>
<Doc>The uri describes a unique identifier for a browser item.</Doc>
<Class>Live.Browser.BrowserItemIterator<Description>Class</Description></Class>
<Doc>This class iterates over children of another BrowserItem.</Doc>
<Value>Live.Browser.BrowserItemIterator.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Class>Live.Browser.BrowserItemVector<Description>Class</Description></Class>
<Doc>A container for returning browser items from Live.</Doc>
<Built-In>Live.Browser.BrowserItemVector.append()<Description>Built-In</Description></Built-In>
<Doc>append( (BrowserItemVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;NPythonBrowser::TPythonBrowserItem, std::__1::allocator&lt;NPythonBrowser::TPythonBrowserItem&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Built-In>Live.Browser.BrowserItemVector.extend()<Description>Built-In</Description></Built-In>
<Doc>extend( (BrowserItemVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;NPythonBrowser::TPythonBrowserItem, std::__1::allocator&lt;NPythonBrowser::TPythonBrowserItem&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Browser.BrowserItemVector.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Browser.BrowserItemVector.append()<Description>Value</Description></Value>
<Doc>append( (BrowserItemVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;NPythonBrowser::TPythonBrowserItem, std::__1::allocator&lt;NPythonBrowser::TPythonBrowserItem&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Browser.BrowserItemVector.extend()<Description>Value</Description></Value>
<Doc>extend( (BrowserItemVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;NPythonBrowser::TPythonBrowserItem, std::__1::allocator&lt;NPythonBrowser::TPythonBrowserItem&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Class>Live.Browser.FilterType<Description>Class</Description></Class>
<Built-In>Live.Browser.FilterType.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Browser.FilterType.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Browser.FilterType.audio_effect_hotswap<Description>Value</Description></Value>
<Value>Live.Browser.FilterType.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.Browser.FilterType.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.Browser.FilterType.count<Description>Value</Description></Value>
<Value>Live.Browser.FilterType.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.Browser.FilterType.disabled<Description>Value</Description></Value>
<Value>Live.Browser.FilterType.drum_pad_hotswap<Description>Value</Description></Value>
<Value>Live.Browser.FilterType.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Browser.FilterType.hotswap_off<Description>Value</Description></Value>
<Value>Live.Browser.FilterType.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.Browser.FilterType.instrument_hotswap<Description>Value</Description></Value>
<Value>Live.Browser.FilterType.midi_effect_hotswap<Description>Value</Description></Value>
<Value>Live.Browser.FilterType.midi_track_devices<Description>Value</Description></Value>
<Value>Live.Browser.FilterType.name<Description>Value</Description></Value>
<Value>Live.Browser.FilterType.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.Browser.FilterType.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.Browser.FilterType.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.Browser.FilterType.samples<Description>Value</Description></Value>
<Value>Live.Browser.FilterType.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.Browser.FilterType.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.Browser.Relation<Description>Class</Description></Class>
<Built-In>Live.Browser.Relation.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Browser.Relation.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Browser.Relation.ancestor<Description>Value</Description></Value>
<Value>Live.Browser.Relation.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.Browser.Relation.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.Browser.Relation.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.Browser.Relation.descendant<Description>Value</Description></Value>
<Value>Live.Browser.Relation.equal<Description>Value</Description></Value>
<Value>Live.Browser.Relation.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Browser.Relation.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.Browser.Relation.name<Description>Value</Description></Value>
<Value>Live.Browser.Relation.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.Browser.Relation.none<Description>Value</Description></Value>
<Value>Live.Browser.Relation.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.Browser.Relation.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.Browser.Relation.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.Browser.Relation.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Module>Live.CcControlDevice<Description>Module</Description></Module>
<Class>Live.CcControlDevice.CcControlDevice<Description>Class</Description></Class>
<Doc>This class represents a CcControl device.</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.add_custom_bool_target_listener()<Description>Built-In</Description></Built-In>
<Doc>add_custom_bool_target_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "custom_bool_target" has changed. C++ signature :  void add_custom_bool_target_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.add_custom_float_target_0_listener()<Description>Built-In</Description></Built-In>
<Doc>add_custom_float_target_0_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "custom_float_target_0" has changed. C++ signature :  void add_custom_float_target_0_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.add_custom_float_target_10_listener()<Description>Built-In</Description></Built-In>
<Doc>add_custom_float_target_10_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "custom_float_target_10" has changed. C++ signature :  void add_custom_float_target_10_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.add_custom_float_target_11_listener()<Description>Built-In</Description></Built-In>
<Doc>add_custom_float_target_11_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "custom_float_target_11" has changed. C++ signature :  void add_custom_float_target_11_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.add_custom_float_target_1_listener()<Description>Built-In</Description></Built-In>
<Doc>add_custom_float_target_1_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "custom_float_target_1" has changed. C++ signature :  void add_custom_float_target_1_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.add_custom_float_target_2_listener()<Description>Built-In</Description></Built-In>
<Doc>add_custom_float_target_2_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "custom_float_target_2" has changed. C++ signature :  void add_custom_float_target_2_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.add_custom_float_target_3_listener()<Description>Built-In</Description></Built-In>
<Doc>add_custom_float_target_3_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "custom_float_target_3" has changed. C++ signature :  void add_custom_float_target_3_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.add_custom_float_target_4_listener()<Description>Built-In</Description></Built-In>
<Doc>add_custom_float_target_4_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "custom_float_target_4" has changed. C++ signature :  void add_custom_float_target_4_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.add_custom_float_target_5_listener()<Description>Built-In</Description></Built-In>
<Doc>add_custom_float_target_5_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "custom_float_target_5" has changed. C++ signature :  void add_custom_float_target_5_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.add_custom_float_target_6_listener()<Description>Built-In</Description></Built-In>
<Doc>add_custom_float_target_6_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "custom_float_target_6" has changed. C++ signature :  void add_custom_float_target_6_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.add_custom_float_target_7_listener()<Description>Built-In</Description></Built-In>
<Doc>add_custom_float_target_7_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "custom_float_target_7" has changed. C++ signature :  void add_custom_float_target_7_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.add_custom_float_target_8_listener()<Description>Built-In</Description></Built-In>
<Doc>add_custom_float_target_8_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "custom_float_target_8" has changed. C++ signature :  void add_custom_float_target_8_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.add_custom_float_target_9_listener()<Description>Built-In</Description></Built-In>
<Doc>add_custom_float_target_9_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "custom_float_target_9" has changed. C++ signature :  void add_custom_float_target_9_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.add_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.add_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.add_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.add_name_listener()<Description>Built-In</Description></Built-In>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.add_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.custom_bool_target_has_listener()<Description>Built-In</Description></Built-In>
<Doc>custom_bool_target_has_listener( (CcControlDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "custom_bool_target". C++ signature :  bool custom_bool_target_has_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.custom_float_target_0_has_listener()<Description>Built-In</Description></Built-In>
<Doc>custom_float_target_0_has_listener( (CcControlDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "custom_float_target_0". C++ signature :  bool custom_float_target_0_has_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.custom_float_target_10_has_listener()<Description>Built-In</Description></Built-In>
<Doc>custom_float_target_10_has_listener( (CcControlDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "custom_float_target_10". C++ signature :  bool custom_float_target_10_has_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.custom_float_target_11_has_listener()<Description>Built-In</Description></Built-In>
<Doc>custom_float_target_11_has_listener( (CcControlDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "custom_float_target_11". C++ signature :  bool custom_float_target_11_has_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.custom_float_target_1_has_listener()<Description>Built-In</Description></Built-In>
<Doc>custom_float_target_1_has_listener( (CcControlDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "custom_float_target_1". C++ signature :  bool custom_float_target_1_has_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.custom_float_target_2_has_listener()<Description>Built-In</Description></Built-In>
<Doc>custom_float_target_2_has_listener( (CcControlDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "custom_float_target_2". C++ signature :  bool custom_float_target_2_has_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.custom_float_target_3_has_listener()<Description>Built-In</Description></Built-In>
<Doc>custom_float_target_3_has_listener( (CcControlDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "custom_float_target_3". C++ signature :  bool custom_float_target_3_has_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.custom_float_target_4_has_listener()<Description>Built-In</Description></Built-In>
<Doc>custom_float_target_4_has_listener( (CcControlDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "custom_float_target_4". C++ signature :  bool custom_float_target_4_has_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.custom_float_target_5_has_listener()<Description>Built-In</Description></Built-In>
<Doc>custom_float_target_5_has_listener( (CcControlDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "custom_float_target_5". C++ signature :  bool custom_float_target_5_has_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.custom_float_target_6_has_listener()<Description>Built-In</Description></Built-In>
<Doc>custom_float_target_6_has_listener( (CcControlDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "custom_float_target_6". C++ signature :  bool custom_float_target_6_has_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.custom_float_target_7_has_listener()<Description>Built-In</Description></Built-In>
<Doc>custom_float_target_7_has_listener( (CcControlDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "custom_float_target_7". C++ signature :  bool custom_float_target_7_has_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.custom_float_target_8_has_listener()<Description>Built-In</Description></Built-In>
<Doc>custom_float_target_8_has_listener( (CcControlDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "custom_float_target_8". C++ signature :  bool custom_float_target_8_has_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.custom_float_target_9_has_listener()<Description>Built-In</Description></Built-In>
<Doc>custom_float_target_9_has_listener( (CcControlDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "custom_float_target_9". C++ signature :  bool custom_float_target_9_has_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.is_active_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.latency_in_ms_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.latency_in_samples_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.name_has_listener()<Description>Built-In</Description></Built-In>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.parameters_has_listener()<Description>Built-In</Description></Built-In>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.remove_custom_bool_target_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_custom_bool_target_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "custom_bool_target". C++ signature :  void remove_custom_bool_target_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.remove_custom_float_target_0_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_custom_float_target_0_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "custom_float_target_0". C++ signature :  void remove_custom_float_target_0_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.remove_custom_float_target_10_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_custom_float_target_10_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "custom_float_target_10". C++ signature :  void remove_custom_float_target_10_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.remove_custom_float_target_11_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_custom_float_target_11_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "custom_float_target_11". C++ signature :  void remove_custom_float_target_11_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.remove_custom_float_target_1_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_custom_float_target_1_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "custom_float_target_1". C++ signature :  void remove_custom_float_target_1_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.remove_custom_float_target_2_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_custom_float_target_2_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "custom_float_target_2". C++ signature :  void remove_custom_float_target_2_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.remove_custom_float_target_3_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_custom_float_target_3_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "custom_float_target_3". C++ signature :  void remove_custom_float_target_3_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.remove_custom_float_target_4_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_custom_float_target_4_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "custom_float_target_4". C++ signature :  void remove_custom_float_target_4_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.remove_custom_float_target_5_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_custom_float_target_5_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "custom_float_target_5". C++ signature :  void remove_custom_float_target_5_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.remove_custom_float_target_6_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_custom_float_target_6_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "custom_float_target_6". C++ signature :  void remove_custom_float_target_6_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.remove_custom_float_target_7_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_custom_float_target_7_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "custom_float_target_7". C++ signature :  void remove_custom_float_target_7_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.remove_custom_float_target_8_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_custom_float_target_8_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "custom_float_target_8". C++ signature :  void remove_custom_float_target_8_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.remove_custom_float_target_9_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_custom_float_target_9_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "custom_float_target_9". C++ signature :  void remove_custom_float_target_9_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.remove_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.remove_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.remove_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.remove_name_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.remove_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.resend()<Description>Built-In</Description></Built-In>
<Doc>resend( (CcControlDevice)self) -&gt; None : Resend all CC values. C++ signature :  void resend(TCcControlDevicePyHandle)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.store_chosen_bank()<Description>Built-In</Description></Built-In>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.View<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Value>Live.CcControlDevice.CcControlDevice.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.CcControlDevice.CcControlDevice._live_ptr<Description>Value</Description></Value>
<Value>Live.CcControlDevice.CcControlDevice.add_custom_bool_target_listener()<Description>Value</Description></Value>
<Doc>add_custom_bool_target_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "custom_bool_target" has changed. C++ signature :  void add_custom_bool_target_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.add_custom_float_target_0_listener()<Description>Value</Description></Value>
<Doc>add_custom_float_target_0_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "custom_float_target_0" has changed. C++ signature :  void add_custom_float_target_0_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.add_custom_float_target_10_listener()<Description>Value</Description></Value>
<Doc>add_custom_float_target_10_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "custom_float_target_10" has changed. C++ signature :  void add_custom_float_target_10_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.add_custom_float_target_11_listener()<Description>Value</Description></Value>
<Doc>add_custom_float_target_11_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "custom_float_target_11" has changed. C++ signature :  void add_custom_float_target_11_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.add_custom_float_target_1_listener()<Description>Value</Description></Value>
<Doc>add_custom_float_target_1_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "custom_float_target_1" has changed. C++ signature :  void add_custom_float_target_1_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.add_custom_float_target_2_listener()<Description>Value</Description></Value>
<Doc>add_custom_float_target_2_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "custom_float_target_2" has changed. C++ signature :  void add_custom_float_target_2_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.add_custom_float_target_3_listener()<Description>Value</Description></Value>
<Doc>add_custom_float_target_3_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "custom_float_target_3" has changed. C++ signature :  void add_custom_float_target_3_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.add_custom_float_target_4_listener()<Description>Value</Description></Value>
<Doc>add_custom_float_target_4_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "custom_float_target_4" has changed. C++ signature :  void add_custom_float_target_4_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.add_custom_float_target_5_listener()<Description>Value</Description></Value>
<Doc>add_custom_float_target_5_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "custom_float_target_5" has changed. C++ signature :  void add_custom_float_target_5_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.add_custom_float_target_6_listener()<Description>Value</Description></Value>
<Doc>add_custom_float_target_6_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "custom_float_target_6" has changed. C++ signature :  void add_custom_float_target_6_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.add_custom_float_target_7_listener()<Description>Value</Description></Value>
<Doc>add_custom_float_target_7_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "custom_float_target_7" has changed. C++ signature :  void add_custom_float_target_7_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.add_custom_float_target_8_listener()<Description>Value</Description></Value>
<Doc>add_custom_float_target_8_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "custom_float_target_8" has changed. C++ signature :  void add_custom_float_target_8_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.add_custom_float_target_9_listener()<Description>Value</Description></Value>
<Doc>add_custom_float_target_9_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "custom_float_target_9" has changed. C++ signature :  void add_custom_float_target_9_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.add_is_active_listener()<Description>Value</Description></Value>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.add_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.add_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.add_name_listener()<Description>Value</Description></Value>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.add_parameters_listener()<Description>Value</Description></Value>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.can_have_chains<Description>Value</Description></Value>
<Doc>Returns true if the device is a rack.</Doc>
<Value>Live.CcControlDevice.CcControlDevice.can_have_drum_pads<Description>Value</Description></Value>
<Doc>Returns true if the device is a drum rack.</Doc>
<Value>Live.CcControlDevice.CcControlDevice.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the Device.</Doc>
<Value>Live.CcControlDevice.CcControlDevice.class_display_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class name as displayed in Live's browser and device chain</Doc>
<Value>Live.CcControlDevice.CcControlDevice.class_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class.</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_bool_target<Description>Value</Description></Value>
<Doc>Return the custom bool target</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_bool_target_has_listener()<Description>Value</Description></Value>
<Doc>custom_bool_target_has_listener( (CcControlDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "custom_bool_target". C++ signature :  bool custom_bool_target_has_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_bool_target_list<Description>Value</Description></Value>
<Doc>Return the custom bool target list</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_0<Description>Value</Description></Value>
<Doc>Return the custom float target 0</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_0_has_listener()<Description>Value</Description></Value>
<Doc>custom_float_target_0_has_listener( (CcControlDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "custom_float_target_0". C++ signature :  bool custom_float_target_0_has_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_0_list<Description>Value</Description></Value>
<Doc>Return the custom float target 0 list</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_1<Description>Value</Description></Value>
<Doc>Return the custom float target 1</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_10<Description>Value</Description></Value>
<Doc>Return the custom float target 10</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_10_has_listener()<Description>Value</Description></Value>
<Doc>custom_float_target_10_has_listener( (CcControlDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "custom_float_target_10". C++ signature :  bool custom_float_target_10_has_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_10_list<Description>Value</Description></Value>
<Doc>Return the custom float target 10 list</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_11<Description>Value</Description></Value>
<Doc>Return the custom float target 11</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_11_has_listener()<Description>Value</Description></Value>
<Doc>custom_float_target_11_has_listener( (CcControlDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "custom_float_target_11". C++ signature :  bool custom_float_target_11_has_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_11_list<Description>Value</Description></Value>
<Doc>Return the custom float target 11 list</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_1_has_listener()<Description>Value</Description></Value>
<Doc>custom_float_target_1_has_listener( (CcControlDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "custom_float_target_1". C++ signature :  bool custom_float_target_1_has_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_1_list<Description>Value</Description></Value>
<Doc>Return the custom float target 1 list</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_2<Description>Value</Description></Value>
<Doc>Return the custom float target 2</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_2_has_listener()<Description>Value</Description></Value>
<Doc>custom_float_target_2_has_listener( (CcControlDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "custom_float_target_2". C++ signature :  bool custom_float_target_2_has_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_2_list<Description>Value</Description></Value>
<Doc>Return the custom float target 2 list</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_3<Description>Value</Description></Value>
<Doc>Return the custom float target 3</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_3_has_listener()<Description>Value</Description></Value>
<Doc>custom_float_target_3_has_listener( (CcControlDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "custom_float_target_3". C++ signature :  bool custom_float_target_3_has_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_3_list<Description>Value</Description></Value>
<Doc>Return the custom float target 3 list</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_4<Description>Value</Description></Value>
<Doc>Return the custom float target 4</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_4_has_listener()<Description>Value</Description></Value>
<Doc>custom_float_target_4_has_listener( (CcControlDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "custom_float_target_4". C++ signature :  bool custom_float_target_4_has_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_4_list<Description>Value</Description></Value>
<Doc>Return the custom float target 4 list</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_5<Description>Value</Description></Value>
<Doc>Return the custom float target 5</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_5_has_listener()<Description>Value</Description></Value>
<Doc>custom_float_target_5_has_listener( (CcControlDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "custom_float_target_5". C++ signature :  bool custom_float_target_5_has_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_5_list<Description>Value</Description></Value>
<Doc>Return the custom float target 5 list</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_6<Description>Value</Description></Value>
<Doc>Return the custom float target 6</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_6_has_listener()<Description>Value</Description></Value>
<Doc>custom_float_target_6_has_listener( (CcControlDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "custom_float_target_6". C++ signature :  bool custom_float_target_6_has_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_6_list<Description>Value</Description></Value>
<Doc>Return the custom float target 6 list</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_7<Description>Value</Description></Value>
<Doc>Return the custom float target 7</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_7_has_listener()<Description>Value</Description></Value>
<Doc>custom_float_target_7_has_listener( (CcControlDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "custom_float_target_7". C++ signature :  bool custom_float_target_7_has_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_7_list<Description>Value</Description></Value>
<Doc>Return the custom float target 7 list</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_8<Description>Value</Description></Value>
<Doc>Return the custom float target 8</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_8_has_listener()<Description>Value</Description></Value>
<Doc>custom_float_target_8_has_listener( (CcControlDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "custom_float_target_8". C++ signature :  bool custom_float_target_8_has_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_8_list<Description>Value</Description></Value>
<Doc>Return the custom float target 8 list</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_9<Description>Value</Description></Value>
<Doc>Return the custom float target 9</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_9_has_listener()<Description>Value</Description></Value>
<Doc>custom_float_target_9_has_listener( (CcControlDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "custom_float_target_9". C++ signature :  bool custom_float_target_9_has_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.custom_float_target_9_list<Description>Value</Description></Value>
<Doc>Return the custom float target 9 list</Doc>
<Value>Live.CcControlDevice.CcControlDevice.is_active<Description>Value</Description></Value>
<Doc>Return const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off.</Doc>
<Value>Live.CcControlDevice.CcControlDevice.is_active_has_listener()<Description>Value</Description></Value>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.latency_in_ms<Description>Value</Description></Value>
<Doc>Returns the latency of the device in ms.</Doc>
<Value>Live.CcControlDevice.CcControlDevice.latency_in_ms_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.latency_in_samples<Description>Value</Description></Value>
<Doc>Returns the latency of the device in samples.</Doc>
<Value>Live.CcControlDevice.CcControlDevice.latency_in_samples_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.name<Description>Value</Description></Value>
<Doc>Return access to the name of the device.</Doc>
<Value>Live.CcControlDevice.CcControlDevice.name_has_listener()<Description>Value</Description></Value>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.parameters<Description>Value</Description></Value>
<Doc>Const access to the list of available automatable parameters for this device.</Doc>
<Value>Live.CcControlDevice.CcControlDevice.parameters_has_listener()<Description>Value</Description></Value>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.remove_custom_bool_target_listener()<Description>Value</Description></Value>
<Doc>remove_custom_bool_target_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "custom_bool_target". C++ signature :  void remove_custom_bool_target_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.remove_custom_float_target_0_listener()<Description>Value</Description></Value>
<Doc>remove_custom_float_target_0_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "custom_float_target_0". C++ signature :  void remove_custom_float_target_0_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.remove_custom_float_target_10_listener()<Description>Value</Description></Value>
<Doc>remove_custom_float_target_10_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "custom_float_target_10". C++ signature :  void remove_custom_float_target_10_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.remove_custom_float_target_11_listener()<Description>Value</Description></Value>
<Doc>remove_custom_float_target_11_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "custom_float_target_11". C++ signature :  void remove_custom_float_target_11_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.remove_custom_float_target_1_listener()<Description>Value</Description></Value>
<Doc>remove_custom_float_target_1_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "custom_float_target_1". C++ signature :  void remove_custom_float_target_1_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.remove_custom_float_target_2_listener()<Description>Value</Description></Value>
<Doc>remove_custom_float_target_2_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "custom_float_target_2". C++ signature :  void remove_custom_float_target_2_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.remove_custom_float_target_3_listener()<Description>Value</Description></Value>
<Doc>remove_custom_float_target_3_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "custom_float_target_3". C++ signature :  void remove_custom_float_target_3_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.remove_custom_float_target_4_listener()<Description>Value</Description></Value>
<Doc>remove_custom_float_target_4_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "custom_float_target_4". C++ signature :  void remove_custom_float_target_4_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.remove_custom_float_target_5_listener()<Description>Value</Description></Value>
<Doc>remove_custom_float_target_5_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "custom_float_target_5". C++ signature :  void remove_custom_float_target_5_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.remove_custom_float_target_6_listener()<Description>Value</Description></Value>
<Doc>remove_custom_float_target_6_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "custom_float_target_6". C++ signature :  void remove_custom_float_target_6_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.remove_custom_float_target_7_listener()<Description>Value</Description></Value>
<Doc>remove_custom_float_target_7_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "custom_float_target_7". C++ signature :  void remove_custom_float_target_7_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.remove_custom_float_target_8_listener()<Description>Value</Description></Value>
<Doc>remove_custom_float_target_8_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "custom_float_target_8". C++ signature :  void remove_custom_float_target_8_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.remove_custom_float_target_9_listener()<Description>Value</Description></Value>
<Doc>remove_custom_float_target_9_listener( (CcControlDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "custom_float_target_9". C++ signature :  void remove_custom_float_target_9_listener(TCcControlDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.remove_is_active_listener()<Description>Value</Description></Value>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.remove_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.remove_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.remove_name_listener()<Description>Value</Description></Value>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.remove_parameters_listener()<Description>Value</Description></Value>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.resend()<Description>Value</Description></Value>
<Doc>resend( (CcControlDevice)self) -&gt; None : Resend all CC values. C++ signature :  void resend(TCcControlDevicePyHandle)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.store_chosen_bank()<Description>Value</Description></Value>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.type<Description>Value</Description></Value>
<Doc>Return the type of the device.</Doc>
<Value>Live.CcControlDevice.CcControlDevice.view<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Class>Live.CcControlDevice.CcControlDevice.View<Description>Class</Description></Class>
<Doc>Representing the view aspects of a device.</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.View.add_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.View.is_collapsed_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CcControlDevice.CcControlDevice.View.remove_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.View.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.CcControlDevice.CcControlDevice.View._live_ptr<Description>Value</Description></Value>
<Value>Live.CcControlDevice.CcControlDevice.View.add_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.View.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the View.</Doc>
<Value>Live.CcControlDevice.CcControlDevice.View.is_collapsed<Description>Value</Description></Value>
<Doc>Get/Set/Listen if the device is shown collapsed in the device chain.</Doc>
<Value>Live.CcControlDevice.CcControlDevice.View.is_collapsed_has_listener()<Description>Value</Description></Value>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CcControlDevice.CcControlDevice.View.remove_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Module>Live.Chain<Description>Module</Description></Module>
<Class>Live.Chain.Chain<Description>Class</Description></Class>
<Doc>This class represents a group device chain in Live.</Doc>
<Built-In>Live.Chain.Chain.add_color_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_color_index_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "color_index" has changed. C++ signature :  void add_color_index_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Chain.Chain.add_color_listener()<Description>Built-In</Description></Built-In>
<Doc>add_color_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "color" has changed. C++ signature :  void add_color_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Chain.Chain.add_devices_listener()<Description>Built-In</Description></Built-In>
<Doc>add_devices_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "devices" has changed. C++ signature :  void add_devices_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Chain.Chain.add_is_auto_colored_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_auto_colored_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_auto_colored" has changed. C++ signature :  void add_is_auto_colored_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Chain.Chain.add_mute_listener()<Description>Built-In</Description></Built-In>
<Doc>add_mute_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mute" has changed. C++ signature :  void add_mute_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Chain.Chain.add_muted_via_solo_listener()<Description>Built-In</Description></Built-In>
<Doc>add_muted_via_solo_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "muted_via_solo" has changed. C++ signature :  void add_muted_via_solo_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Chain.Chain.add_name_listener()<Description>Built-In</Description></Built-In>
<Doc>add_name_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Chain.Chain.add_solo_listener()<Description>Built-In</Description></Built-In>
<Doc>add_solo_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "solo" has changed. C++ signature :  void add_solo_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Chain.Chain.color_has_listener()<Description>Built-In</Description></Built-In>
<Doc>color_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "color". C++ signature :  bool color_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Chain.Chain.color_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>color_index_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "color_index". C++ signature :  bool color_index_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Chain.Chain.delete_device()<Description>Built-In</Description></Built-In>
<Doc>delete_device( (Chain)arg1, (int)arg2) -&gt; None : Remove a device identified by its index from the chain. Throws runtime error if bad index.  C++ signature :  void delete_device(TChainPyHandle,int)</Doc>
<Built-In>Live.Chain.Chain.devices_has_listener()<Description>Built-In</Description></Built-In>
<Doc>devices_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "devices". C++ signature :  bool devices_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Chain.Chain.is_auto_colored_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_auto_colored_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_auto_colored". C++ signature :  bool is_auto_colored_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Chain.Chain.mute_has_listener()<Description>Built-In</Description></Built-In>
<Doc>mute_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mute". C++ signature :  bool mute_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Chain.Chain.muted_via_solo_has_listener()<Description>Built-In</Description></Built-In>
<Doc>muted_via_solo_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "muted_via_solo". C++ signature :  bool muted_via_solo_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Chain.Chain.name_has_listener()<Description>Built-In</Description></Built-In>
<Doc>name_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Chain.Chain.remove_color_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_color_index_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "color_index". C++ signature :  void remove_color_index_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Chain.Chain.remove_color_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_color_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "color". C++ signature :  void remove_color_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Chain.Chain.remove_devices_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_devices_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "devices". C++ signature :  void remove_devices_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Chain.Chain.remove_is_auto_colored_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_auto_colored_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_auto_colored". C++ signature :  void remove_is_auto_colored_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Chain.Chain.remove_mute_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_mute_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mute". C++ signature :  void remove_mute_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Chain.Chain.remove_muted_via_solo_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_muted_via_solo_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "muted_via_solo". C++ signature :  void remove_muted_via_solo_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Chain.Chain.remove_name_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_name_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Chain.Chain.remove_solo_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_solo_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "solo". C++ signature :  void remove_solo_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Chain.Chain.solo_has_listener()<Description>Built-In</Description></Built-In>
<Doc>solo_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "solo". C++ signature :  bool solo_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.Chain.Chain.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Chain.Chain._live_ptr<Description>Value</Description></Value>
<Value>Live.Chain.Chain.add_color_index_listener()<Description>Value</Description></Value>
<Doc>add_color_index_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "color_index" has changed. C++ signature :  void add_color_index_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.Chain.Chain.add_color_listener()<Description>Value</Description></Value>
<Doc>add_color_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "color" has changed. C++ signature :  void add_color_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.Chain.Chain.add_devices_listener()<Description>Value</Description></Value>
<Doc>add_devices_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "devices" has changed. C++ signature :  void add_devices_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.Chain.Chain.add_is_auto_colored_listener()<Description>Value</Description></Value>
<Doc>add_is_auto_colored_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_auto_colored" has changed. C++ signature :  void add_is_auto_colored_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.Chain.Chain.add_mute_listener()<Description>Value</Description></Value>
<Doc>add_mute_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mute" has changed. C++ signature :  void add_mute_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.Chain.Chain.add_muted_via_solo_listener()<Description>Value</Description></Value>
<Doc>add_muted_via_solo_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "muted_via_solo" has changed. C++ signature :  void add_muted_via_solo_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.Chain.Chain.add_name_listener()<Description>Value</Description></Value>
<Doc>add_name_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.Chain.Chain.add_solo_listener()<Description>Value</Description></Value>
<Doc>add_solo_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "solo" has changed. C++ signature :  void add_solo_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.Chain.Chain.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the chain.</Doc>
<Value>Live.Chain.Chain.color<Description>Value</Description></Value>
<Doc>Access the color index of the Chain.</Doc>
<Value>Live.Chain.Chain.color_has_listener()<Description>Value</Description></Value>
<Doc>color_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "color". C++ signature :  bool color_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.Chain.Chain.color_index<Description>Value</Description></Value>
<Doc>Access the color index of the Chain.</Doc>
<Value>Live.Chain.Chain.color_index_has_listener()<Description>Value</Description></Value>
<Doc>color_index_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "color_index". C++ signature :  bool color_index_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.Chain.Chain.delete_device()<Description>Value</Description></Value>
<Doc>delete_device( (Chain)arg1, (int)arg2) -&gt; None : Remove a device identified by its index from the chain. Throws runtime error if bad index.  C++ signature :  void delete_device(TChainPyHandle,int)</Doc>
<Value>Live.Chain.Chain.devices<Description>Value</Description></Value>
<Doc>Return const access to all available Devices that are present in the chains</Doc>
<Value>Live.Chain.Chain.devices_has_listener()<Description>Value</Description></Value>
<Doc>devices_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "devices". C++ signature :  bool devices_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.Chain.Chain.has_audio_input<Description>Value</Description></Value>
<Doc>return True, if this Chain can be feed with an Audio signal. This istrue for all Audio Chains.</Doc>
<Value>Live.Chain.Chain.has_audio_output<Description>Value</Description></Value>
<Doc>return True, if this Chain sends out an Audio signal. This istrue for all Audio Chains, and MIDI chains with an Instrument.</Doc>
<Value>Live.Chain.Chain.has_midi_input<Description>Value</Description></Value>
<Doc>return True, if this Chain can be feed with an Audio signal. This istrue for all MIDI Chains.</Doc>
<Value>Live.Chain.Chain.has_midi_output<Description>Value</Description></Value>
<Doc>return True, if this Chain sends out MIDI events. This istrue for all MIDI Chains with no Instruments.</Doc>
<Value>Live.Chain.Chain.is_auto_colored<Description>Value</Description></Value>
<Doc>Get/set access to the auto color flag of the Chain.If True, the Chain will always have the same color as the containingTrack or Chain.</Doc>
<Value>Live.Chain.Chain.is_auto_colored_has_listener()<Description>Value</Description></Value>
<Doc>is_auto_colored_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_auto_colored". C++ signature :  bool is_auto_colored_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.Chain.Chain.mixer_device<Description>Value</Description></Value>
<Doc>Return access to the mixer device that holds the chain's mixer parameters:the Volume, Pan, and Sendamounts.</Doc>
<Value>Live.Chain.Chain.mute<Description>Value</Description></Value>
<Doc>Mute/unmute the chain.</Doc>
<Value>Live.Chain.Chain.mute_has_listener()<Description>Value</Description></Value>
<Doc>mute_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mute". C++ signature :  bool mute_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.Chain.Chain.muted_via_solo<Description>Value</Description></Value>
<Doc>Return const access to whether this chain is muted due to some other chainbeing soloed.</Doc>
<Value>Live.Chain.Chain.muted_via_solo_has_listener()<Description>Value</Description></Value>
<Doc>muted_via_solo_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "muted_via_solo". C++ signature :  bool muted_via_solo_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.Chain.Chain.name<Description>Value</Description></Value>
<Doc>Read/write access to the name of the Chain, as visible in the track header.</Doc>
<Value>Live.Chain.Chain.name_has_listener()<Description>Value</Description></Value>
<Doc>name_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.Chain.Chain.remove_color_index_listener()<Description>Value</Description></Value>
<Doc>remove_color_index_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "color_index". C++ signature :  void remove_color_index_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.Chain.Chain.remove_color_listener()<Description>Value</Description></Value>
<Doc>remove_color_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "color". C++ signature :  void remove_color_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.Chain.Chain.remove_devices_listener()<Description>Value</Description></Value>
<Doc>remove_devices_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "devices". C++ signature :  void remove_devices_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.Chain.Chain.remove_is_auto_colored_listener()<Description>Value</Description></Value>
<Doc>remove_is_auto_colored_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_auto_colored". C++ signature :  void remove_is_auto_colored_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.Chain.Chain.remove_mute_listener()<Description>Value</Description></Value>
<Doc>remove_mute_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mute". C++ signature :  void remove_mute_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.Chain.Chain.remove_muted_via_solo_listener()<Description>Value</Description></Value>
<Doc>remove_muted_via_solo_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "muted_via_solo". C++ signature :  void remove_muted_via_solo_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.Chain.Chain.remove_name_listener()<Description>Value</Description></Value>
<Doc>remove_name_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.Chain.Chain.remove_solo_listener()<Description>Value</Description></Value>
<Doc>remove_solo_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "solo". C++ signature :  void remove_solo_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.Chain.Chain.solo<Description>Value</Description></Value>
<Doc>Get/Set the solo status of the chain. Note that this will not disable thesolo state of any other Chain in the same rack. If you want exclusive solo, you have to disable the solo state of the other Chains manually.</Doc>
<Value>Live.Chain.Chain.solo_has_listener()<Description>Value</Description></Value>
<Doc>solo_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "solo". C++ signature :  bool solo_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Module>Live.ChainMixerDevice<Description>Module</Description></Module>
<Class>Live.ChainMixerDevice.ChainMixerDevice<Description>Class</Description></Class>
<Doc>This class represents a Chain's Mixer Device in Live, which gives youaccess to the Volume, Panning, and Send properties of a Chain.</Doc>
<Built-In>Live.ChainMixerDevice.ChainMixerDevice.add_sends_listener()<Description>Built-In</Description></Built-In>
<Doc>add_sends_listener( (ChainMixerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "sends" has changed. C++ signature :  void add_sends_listener(TPyHandle&lt;ABranchMixerDevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ChainMixerDevice.ChainMixerDevice.remove_sends_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_sends_listener( (ChainMixerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "sends". C++ signature :  void remove_sends_listener(TPyHandle&lt;ABranchMixerDevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ChainMixerDevice.ChainMixerDevice.sends_has_listener()<Description>Built-In</Description></Built-In>
<Doc>sends_has_listener( (ChainMixerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "sends". C++ signature :  bool sends_has_listener(TPyHandle&lt;ABranchMixerDevice&gt;,boost::python::api::object)</Doc>
<Value>Live.ChainMixerDevice.ChainMixerDevice.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.ChainMixerDevice.ChainMixerDevice._live_ptr<Description>Value</Description></Value>
<Value>Live.ChainMixerDevice.ChainMixerDevice.add_sends_listener()<Description>Value</Description></Value>
<Doc>add_sends_listener( (ChainMixerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "sends" has changed. C++ signature :  void add_sends_listener(TPyHandle&lt;ABranchMixerDevice&gt;,boost::python::api::object)</Doc>
<Value>Live.ChainMixerDevice.ChainMixerDevice.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the mixer device.</Doc>
<Value>Live.ChainMixerDevice.ChainMixerDevice.chain_activator<Description>Value</Description></Value>
<Doc>Const access to the Chain's Activator Device Parameter.</Doc>
<Value>Live.ChainMixerDevice.ChainMixerDevice.panning<Description>Value</Description></Value>
<Doc>Const access to the Chain's Panning Device Parameter.</Doc>
<Value>Live.ChainMixerDevice.ChainMixerDevice.remove_sends_listener()<Description>Value</Description></Value>
<Doc>remove_sends_listener( (ChainMixerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "sends". C++ signature :  void remove_sends_listener(TPyHandle&lt;ABranchMixerDevice&gt;,boost::python::api::object)</Doc>
<Value>Live.ChainMixerDevice.ChainMixerDevice.sends<Description>Value</Description></Value>
<Doc>Const access to the Chain's list of Send Amount Device Parameters.</Doc>
<Value>Live.ChainMixerDevice.ChainMixerDevice.sends_has_listener()<Description>Value</Description></Value>
<Doc>sends_has_listener( (ChainMixerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "sends". C++ signature :  bool sends_has_listener(TPyHandle&lt;ABranchMixerDevice&gt;,boost::python::api::object)</Doc>
<Value>Live.ChainMixerDevice.ChainMixerDevice.volume<Description>Value</Description></Value>
<Doc>Const access to the Chain's Volume Device Parameter.</Doc>
<Module>Live.Clip<Description>Module</Description></Module>
<Class>Live.Clip.AutomationEnvelope<Description>Class</Description></Class>
<Doc>Describes parameter automation per clip.</Doc>
<Built-In>Live.Clip.AutomationEnvelope.insert_step()<Description>Built-In</Description></Built-In>
<Doc>insert_step( (AutomationEnvelope)arg1, (float)arg2, (float)arg3, (float)arg4) -&gt; None : C++ signature :  void insert_step(AAutomation {lvalue},double,double,double)</Doc>
<Built-In>Live.Clip.AutomationEnvelope.value_at_time()<Description>Built-In</Description></Built-In>
<Doc>value_at_time( (AutomationEnvelope)arg1, (float)arg2) -&gt; float : C++ signature :  double value_at_time(AAutomation {lvalue},double)</Doc>
<Value>Live.Clip.AutomationEnvelope.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Clip.AutomationEnvelope.insert_step()<Description>Value</Description></Value>
<Doc>insert_step( (AutomationEnvelope)arg1, (float)arg2, (float)arg3, (float)arg4) -&gt; None : C++ signature :  void insert_step(AAutomation {lvalue},double,double,double)</Doc>
<Value>Live.Clip.AutomationEnvelope.value_at_time()<Description>Value</Description></Value>
<Doc>value_at_time( (AutomationEnvelope)arg1, (float)arg2) -&gt; float : C++ signature :  double value_at_time(AAutomation {lvalue},double)</Doc>
<Class>Live.Clip.Clip<Description>Class</Description></Class>
<Doc>This class represents a Clip in Live. It can be either an AudioClip or a MIDI Clip, in an Arrangement or the Session, dependingon the Track (Slot) it lives in.</Doc>
<Built-In>Live.Clip.Clip.add_color_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_color_index_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "color_index" has changed. C++ signature :  void add_color_index_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_color_listener()<Description>Built-In</Description></Built-In>
<Doc>add_color_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "color" has changed. C++ signature :  void add_color_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_end_marker_listener()<Description>Built-In</Description></Built-In>
<Doc>add_end_marker_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "end_marker" has changed. C++ signature :  void add_end_marker_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_end_time_listener()<Description>Built-In</Description></Built-In>
<Doc>add_end_time_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "end_time" has changed. C++ signature :  void add_end_time_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_file_path_listener()<Description>Built-In</Description></Built-In>
<Doc>add_file_path_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "file_path" has changed. C++ signature :  void add_file_path_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_gain_listener()<Description>Built-In</Description></Built-In>
<Doc>add_gain_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "gain" has changed. C++ signature :  void add_gain_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_groove_listener()<Description>Built-In</Description></Built-In>
<Doc>add_groove_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "groove" has changed. C++ signature :  void add_groove_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_has_envelopes_listener()<Description>Built-In</Description></Built-In>
<Doc>add_has_envelopes_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "has_envelopes" has changed. C++ signature :  void add_has_envelopes_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_is_overdubbing_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_overdubbing_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_overdubbing" has changed. C++ signature :  void add_is_overdubbing_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_is_recording_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_recording_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_recording" has changed. C++ signature :  void add_is_recording_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_launch_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>add_launch_mode_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "launch_mode" has changed. C++ signature :  void add_launch_mode_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_launch_quantization_listener()<Description>Built-In</Description></Built-In>
<Doc>add_launch_quantization_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "launch_quantization" has changed. C++ signature :  void add_launch_quantization_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_legato_listener()<Description>Built-In</Description></Built-In>
<Doc>add_legato_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "legato" has changed. C++ signature :  void add_legato_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_loop_end_listener()<Description>Built-In</Description></Built-In>
<Doc>add_loop_end_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "loop_end" has changed. C++ signature :  void add_loop_end_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_loop_jump_listener()<Description>Built-In</Description></Built-In>
<Doc>add_loop_jump_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "loop_jump" has changed. C++ signature :  void add_loop_jump_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_loop_start_listener()<Description>Built-In</Description></Built-In>
<Doc>add_loop_start_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "loop_start" has changed. C++ signature :  void add_loop_start_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_looping_listener()<Description>Built-In</Description></Built-In>
<Doc>add_looping_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "looping" has changed. C++ signature :  void add_looping_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_muted_listener()<Description>Built-In</Description></Built-In>
<Doc>add_muted_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "muted" has changed. C++ signature :  void add_muted_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_name_listener()<Description>Built-In</Description></Built-In>
<Doc>add_name_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_new_notes()<Description>Built-In</Description></Built-In>
<Doc>add_new_notes( (Clip)arg1, (object)arg2) -&gt; IntU64Vector : Expects a Python iterable holding a number of Live.Clip.MidiNoteSpecification objects. The objects will be used to construct new notes in the clip. C++ signature :  std::__1::vector&lt;unsigned long long, std::__1::allocator&lt;unsigned long long&gt;&gt; add_new_notes(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_notes_listener()<Description>Built-In</Description></Built-In>
<Doc>add_notes_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "notes" has changed. C++ signature :  void add_notes_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_pitch_coarse_listener()<Description>Built-In</Description></Built-In>
<Doc>add_pitch_coarse_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "pitch_coarse" has changed. C++ signature :  void add_pitch_coarse_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_pitch_fine_listener()<Description>Built-In</Description></Built-In>
<Doc>add_pitch_fine_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "pitch_fine" has changed. C++ signature :  void add_pitch_fine_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_playing_position_listener()<Description>Built-In</Description></Built-In>
<Doc>add_playing_position_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "playing_position" has changed. C++ signature :  void add_playing_position_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_playing_status_listener()<Description>Built-In</Description></Built-In>
<Doc>add_playing_status_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "playing_status" has changed. C++ signature :  void add_playing_status_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_position_listener()<Description>Built-In</Description></Built-In>
<Doc>add_position_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "position" has changed. C++ signature :  void add_position_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_ram_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>add_ram_mode_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "ram_mode" has changed. C++ signature :  void add_ram_mode_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_signature_denominator_listener()<Description>Built-In</Description></Built-In>
<Doc>add_signature_denominator_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "signature_denominator" has changed. C++ signature :  void add_signature_denominator_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_signature_numerator_listener()<Description>Built-In</Description></Built-In>
<Doc>add_signature_numerator_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "signature_numerator" has changed. C++ signature :  void add_signature_numerator_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_start_marker_listener()<Description>Built-In</Description></Built-In>
<Doc>add_start_marker_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "start_marker" has changed. C++ signature :  void add_start_marker_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_velocity_amount_listener()<Description>Built-In</Description></Built-In>
<Doc>add_velocity_amount_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "velocity_amount" has changed. C++ signature :  void add_velocity_amount_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_warp_marker()<Description>Built-In</Description></Built-In>
<Doc>add_warp_marker( (Clip)self, (object)warp_marker) -&gt; None : Available for AudioClips only. Adds the specified warp marker, if possible. C++ signature :  void add_warp_marker(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_warp_markers_listener()<Description>Built-In</Description></Built-In>
<Doc>add_warp_markers_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "warp_markers" has changed. C++ signature :  void add_warp_markers_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_warp_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>add_warp_mode_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "warp_mode" has changed. C++ signature :  void add_warp_mode_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.add_warping_listener()<Description>Built-In</Description></Built-In>
<Doc>add_warping_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "warping" has changed. C++ signature :  void add_warping_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.apply_note_modifications()<Description>Built-In</Description></Built-In>
<Doc>apply_note_modifications( (Clip)arg1, (MidiNoteVector)arg2) -&gt; None : Expects a list of notes as returned from get_notes_extended. The content of the list will be used to modify existing notes in the clip, based on matching note IDs. This function should be used when modifying existing notes, e.g. changing the velocity or start time. The function ensures that per-note events attached to the modified notes are preserved. This is NOT the case when replacing notes via a combination of remove_notes_extended and add_new_notes. The given list can be a subset of the notes in the clip, but it must not contain any notes that are not present in the clip.  C++ signature :  void apply_note_modifications(TPyHandle&lt;AClip&gt;,std::__1::vector&lt;NClipApi::TNoteInfo, std::__1::allocator&lt;NClipApi::TNoteInfo&gt;&gt;)</Doc>
<Built-In>Live.Clip.Clip.automation_envelope()<Description>Built-In</Description></Built-In>
<Doc>automation_envelope( (Clip)arg1, (DeviceParameter)arg2) -&gt; AutomationEnvelope : Return the envelope for the given parameter.Returns None if the envelope doesn't exist.Returns None for Arrangement clips.Returns None for parameters from a different track. C++ signature :  TWeakPtr&lt;AAutomation&gt; automation_envelope(TPyHandle&lt;AClip&gt;,TPyHandle&lt;ATimeableValue&gt;)</Doc>
<Built-In>Live.Clip.Clip.beat_to_sample_time()<Description>Built-In</Description></Built-In>
<Doc>beat_to_sample_time( (Clip)self, (float)beat_time) -&gt; float : Available for AudioClips only. Converts the given beat time to sample time. Raises an error if the sample is not warped. C++ signature :  double beat_to_sample_time(TPyHandle&lt;AClip&gt;,double)</Doc>
<Built-In>Live.Clip.Clip.clear_all_envelopes()<Description>Built-In</Description></Built-In>
<Doc>clear_all_envelopes( (Clip)arg1) -&gt; None : Clears all envelopes for this clip. C++ signature :  void clear_all_envelopes(TPyHandle&lt;AClip&gt;)</Doc>
<Built-In>Live.Clip.Clip.clear_envelope()<Description>Built-In</Description></Built-In>
<Doc>clear_envelope( (Clip)arg1, (DeviceParameter)arg2) -&gt; None : Clears the envelope of this clips given parameter. C++ signature :  void clear_envelope(TPyHandle&lt;AClip&gt;,TPyHandle&lt;ATimeableValue&gt;)</Doc>
<Built-In>Live.Clip.Clip.color_has_listener()<Description>Built-In</Description></Built-In>
<Doc>color_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "color". C++ signature :  bool color_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.color_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>color_index_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "color_index". C++ signature :  bool color_index_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.create_automation_envelope()<Description>Built-In</Description></Built-In>
<Doc>create_automation_envelope( (Clip)arg1, (DeviceParameter)arg2) -&gt; AutomationEnvelope : Creates an envelope for a given parameter and returns it.This should only be used if the envelope doesn't exist.Raises an error if the envelope can't be created. C++ signature :  TWeakPtr&lt;AAutomation&gt; create_automation_envelope(TPyHandle&lt;AClip&gt;,TPyHandle&lt;ATimeableValue&gt;)</Doc>
<Built-In>Live.Clip.Clip.crop()<Description>Built-In</Description></Built-In>
<Doc>crop( (Clip)arg1) -&gt; None : Crops the clip. The region that is cropped depends on whether the clip is looped or not. If looped, the region outside of the loop is removed. If not looped, the region outside the start and end markers is removed. C++ signature :  void crop(TPyHandle&lt;AClip&gt;)</Doc>
<Built-In>Live.Clip.Clip.deselect_all_notes()<Description>Built-In</Description></Built-In>
<Doc>deselect_all_notes( (Clip)arg1) -&gt; None : De-selects all notes present in the clip. C++ signature :  void deselect_all_notes(TPyHandle&lt;AClip&gt;)</Doc>
<Built-In>Live.Clip.Clip.duplicate_loop()<Description>Built-In</Description></Built-In>
<Doc>duplicate_loop( (Clip)arg1) -&gt; None : Make the loop two times longer and duplicates notes and envelopes. Duplicates the clip start/end range if the clip is not looped. C++ signature :  void duplicate_loop(TPyHandle&lt;AClip&gt;)</Doc>
<Built-In>Live.Clip.Clip.duplicate_notes_by_id()<Description>Built-In</Description></Built-In>
<Doc>duplicate_notes_by_id( (Clip)self, (object)note_ids [, (object)destination_time=None [, (int)transposition_amount=0]]) -&gt; IntU64Vector : Duplicate all notes matching the given note IDs. If the optional destination_time is not provided, new notes will be inserted after the last selected note. This behavior can be observed when duplicating notes in the Live GUI. If the transposition_amount is specified, the notes in the region will be transposed by the number of semitones. Raises an error on audio clips. C++ signature :  std::__1::vector&lt;unsigned long long, std::__1::allocator&lt;unsigned long long&gt;&gt; duplicate_notes_by_id(TPyHandle&lt;AClip&gt;,boost::python::api::object [,boost::python::api::object=None [,int=0]])</Doc>
<Built-In>Live.Clip.Clip.duplicate_region()<Description>Built-In</Description></Built-In>
<Doc>duplicate_region( (Clip)self, (float)region_start, (float)region_length, (float)destination_time [, (int)pitch=-1 [, (int)transposition_amount=0]]) -&gt; None : Duplicate the notes in the specified region to the destination_time. Only notes of the specified pitch are duplicated or all if pitch is -1. If the transposition_amount is not 0, the notes in the region will be transposed by the transpose_amount of semitones.Raises an error on audio clips. C++ signature :  void duplicate_region(TPyHandle&lt;AClip&gt;,double,double,double [,int=-1 [,int=0]])</Doc>
<Built-In>Live.Clip.Clip.end_marker_has_listener()<Description>Built-In</Description></Built-In>
<Doc>end_marker_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "end_marker". C++ signature :  bool end_marker_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.end_time_has_listener()<Description>Built-In</Description></Built-In>
<Doc>end_time_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "end_time". C++ signature :  bool end_time_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.file_path_has_listener()<Description>Built-In</Description></Built-In>
<Doc>file_path_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "file_path". C++ signature :  bool file_path_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.fire()<Description>Built-In</Description></Built-In>
<Doc>fire( (Clip)arg1) -&gt; None : (Re)Start playing this Clip. C++ signature :  void fire(TPyHandle&lt;AClip&gt;)</Doc>
<Built-In>Live.Clip.Clip.gain_has_listener()<Description>Built-In</Description></Built-In>
<Doc>gain_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "gain". C++ signature :  bool gain_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.get_all_notes_extended()<Description>Built-In</Description></Built-In>
<Doc>get_all_notes_extended( (Clip)arg1) -&gt; MidiNoteVector : Returns a list of all MIDI notes from the clip, regardless of their position relative to the start and end markers/loop start and loop end. Each note is represented by a Live.Clip.MidiNote object. The returned list can be modified freely, but modifications will not be reflected in the MIDI clip until apply_note_modifications is called. C++ signature :  std::__1::vector&lt;NClipApi::TNoteInfo, std::__1::allocator&lt;NClipApi::TNoteInfo&gt;&gt; get_all_notes_extended(TPyHandle&lt;AClip&gt;)</Doc>
<Built-In>Live.Clip.Clip.get_notes()<Description>Built-In</Description></Built-In>
<Doc>get_notes( (Clip)self, (float)from_time, (int)from_pitch, (float)time_span, (int)pitch_span) -&gt; tuple : Returns a tuple of tuples where each inner tuple represents a note starting in the given pitch- and time range. The inner tuple contains pitch, time, duration, velocity, and mute state. C++ signature :  boost::python::tuple get_notes(TPyHandle&lt;AClip&gt;,double,int,double,int)</Doc>
<Built-In>Live.Clip.Clip.get_notes_by_id()<Description>Built-In</Description></Built-In>
<Doc>get_notes_by_id( (Clip)arg1, (object)note_ids) -&gt; MidiNoteVector : Return a list of MIDI notes matching the given note IDs.  C++ signature :  std::__1::vector&lt;NClipApi::TNoteInfo, std::__1::allocator&lt;NClipApi::TNoteInfo&gt;&gt; get_notes_by_id(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.get_notes_extended()<Description>Built-In</Description></Built-In>
<Doc>get_notes_extended( (Clip)arg1, (int)from_pitch, (int)pitch_span, (float)from_time, (float)time_span) -&gt; MidiNoteVector : Returns a list of MIDI notes from the given pitch and time range. Each note is represented by a Live.Clip.MidiNote object. The returned list can be modified freely, but modifications will not be reflected in the MIDI clip until apply_note_modifications is called. C++ signature :  std::__1::vector&lt;NClipApi::TNoteInfo, std::__1::allocator&lt;NClipApi::TNoteInfo&gt;&gt; get_notes_extended(TPyHandle&lt;AClip&gt;,int,int,double,double)</Doc>
<Built-In>Live.Clip.Clip.get_selected_notes()<Description>Built-In</Description></Built-In>
<Doc>get_selected_notes( (Clip)arg1) -&gt; tuple : Returns a tuple of tuples where each inner tuple represents a selected note. The inner tuple contains pitch, time, duration, velocity, and mute state. C++ signature :  boost::python::tuple get_selected_notes(TPyHandle&lt;AClip&gt;)</Doc>
<Built-In>Live.Clip.Clip.get_selected_notes_extended()<Description>Built-In</Description></Built-In>
<Doc>get_selected_notes_extended( (Clip)arg1) -&gt; MidiNoteVector : Returns a list of all MIDI notes from the clip that are currently selected. Each note is represented by a Live.Clip.MidiNote object. The returned list can be modified freely, but modifications will not be reflected in the MIDI clip until apply_note_modifications is called. C++ signature :  std::__1::vector&lt;NClipApi::TNoteInfo, std::__1::allocator&lt;NClipApi::TNoteInfo&gt;&gt; get_selected_notes_extended(TPyHandle&lt;AClip&gt;)</Doc>
<Built-In>Live.Clip.Clip.groove_has_listener()<Description>Built-In</Description></Built-In>
<Doc>groove_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "groove". C++ signature :  bool groove_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.has_envelopes_has_listener()<Description>Built-In</Description></Built-In>
<Doc>has_envelopes_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "has_envelopes". C++ signature :  bool has_envelopes_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.is_overdubbing_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_overdubbing_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_overdubbing". C++ signature :  bool is_overdubbing_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.is_recording_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_recording_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_recording". C++ signature :  bool is_recording_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.launch_mode_has_listener()<Description>Built-In</Description></Built-In>
<Doc>launch_mode_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "launch_mode". C++ signature :  bool launch_mode_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.launch_quantization_has_listener()<Description>Built-In</Description></Built-In>
<Doc>launch_quantization_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "launch_quantization". C++ signature :  bool launch_quantization_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.legato_has_listener()<Description>Built-In</Description></Built-In>
<Doc>legato_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "legato". C++ signature :  bool legato_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.loop_end_has_listener()<Description>Built-In</Description></Built-In>
<Doc>loop_end_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "loop_end". C++ signature :  bool loop_end_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.loop_jump_has_listener()<Description>Built-In</Description></Built-In>
<Doc>loop_jump_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "loop_jump". C++ signature :  bool loop_jump_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.loop_start_has_listener()<Description>Built-In</Description></Built-In>
<Doc>loop_start_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "loop_start". C++ signature :  bool loop_start_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.looping_has_listener()<Description>Built-In</Description></Built-In>
<Doc>looping_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "looping". C++ signature :  bool looping_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.move_playing_pos()<Description>Built-In</Description></Built-In>
<Doc>move_playing_pos( (Clip)arg1, (float)arg2) -&gt; None : Jump forward or backward by the specified relative amount in beats. Will do nothing, if the Clip is not playing. C++ signature :  void move_playing_pos(TPyHandle&lt;AClip&gt;,double)</Doc>
<Built-In>Live.Clip.Clip.move_warp_marker()<Description>Built-In</Description></Built-In>
<Doc>move_warp_marker( (Clip)self, (float)marker_beat_time, (float)beat_time_distance) -&gt; None : Available for AudioClips only. Moves the specified warp marker by the specified beat time amount, if possible. C++ signature :  void move_warp_marker(TPyHandle&lt;AClip&gt;,double,double)</Doc>
<Built-In>Live.Clip.Clip.muted_has_listener()<Description>Built-In</Description></Built-In>
<Doc>muted_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "muted". C++ signature :  bool muted_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.name_has_listener()<Description>Built-In</Description></Built-In>
<Doc>name_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.note_number_to_name()<Description>Built-In</Description></Built-In>
<Doc>note_number_to_name( (Clip)self, (int)midi_pitch) -&gt; str : Return a human-readable name for the given MIDI note number. Takes into account the scale and tonal spelling settings of the clip, as well as the current tuning system (if any) C++ signature :  TString note_number_to_name(TPyHandle&lt;AClip&gt;,int)</Doc>
<Built-In>Live.Clip.Clip.notes_has_listener()<Description>Built-In</Description></Built-In>
<Doc>notes_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "notes". C++ signature :  bool notes_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.pitch_coarse_has_listener()<Description>Built-In</Description></Built-In>
<Doc>pitch_coarse_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "pitch_coarse". C++ signature :  bool pitch_coarse_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.pitch_fine_has_listener()<Description>Built-In</Description></Built-In>
<Doc>pitch_fine_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "pitch_fine". C++ signature :  bool pitch_fine_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.playing_position_has_listener()<Description>Built-In</Description></Built-In>
<Doc>playing_position_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "playing_position". C++ signature :  bool playing_position_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.playing_status_has_listener()<Description>Built-In</Description></Built-In>
<Doc>playing_status_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "playing_status". C++ signature :  bool playing_status_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.position_has_listener()<Description>Built-In</Description></Built-In>
<Doc>position_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "position". C++ signature :  bool position_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.quantize()<Description>Built-In</Description></Built-In>
<Doc>quantize( (Clip)arg1, (int)arg2, (float)arg3) -&gt; None : Quantize all notes in a clip or align warp markers. C++ signature :  void quantize(TPyHandle&lt;AClip&gt;,int,float)</Doc>
<Built-In>Live.Clip.Clip.quantize_pitch()<Description>Built-In</Description></Built-In>
<Doc>quantize_pitch( (Clip)arg1, (int)arg2, (int)arg3, (float)arg4) -&gt; None : Quantize all the notes of a given pitch.  Raises an error on audio clips. C++ signature :  void quantize_pitch(TPyHandle&lt;AClip&gt;,int,int,float)</Doc>
<Built-In>Live.Clip.Clip.ram_mode_has_listener()<Description>Built-In</Description></Built-In>
<Doc>ram_mode_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "ram_mode". C++ signature :  bool ram_mode_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_color_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_color_index_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "color_index". C++ signature :  void remove_color_index_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_color_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_color_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "color". C++ signature :  void remove_color_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_end_marker_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_end_marker_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "end_marker". C++ signature :  void remove_end_marker_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_end_time_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_end_time_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "end_time". C++ signature :  void remove_end_time_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_file_path_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_file_path_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "file_path". C++ signature :  void remove_file_path_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_gain_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_gain_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "gain". C++ signature :  void remove_gain_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_groove_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_groove_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "groove". C++ signature :  void remove_groove_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_has_envelopes_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_has_envelopes_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "has_envelopes". C++ signature :  void remove_has_envelopes_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_is_overdubbing_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_overdubbing_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_overdubbing". C++ signature :  void remove_is_overdubbing_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_is_recording_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_recording_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_recording". C++ signature :  void remove_is_recording_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_launch_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_launch_mode_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "launch_mode". C++ signature :  void remove_launch_mode_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_launch_quantization_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_launch_quantization_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "launch_quantization". C++ signature :  void remove_launch_quantization_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_legato_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_legato_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "legato". C++ signature :  void remove_legato_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_loop_end_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_loop_end_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "loop_end". C++ signature :  void remove_loop_end_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_loop_jump_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_loop_jump_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "loop_jump". C++ signature :  void remove_loop_jump_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_loop_start_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_loop_start_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "loop_start". C++ signature :  void remove_loop_start_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_looping_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_looping_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "looping". C++ signature :  void remove_looping_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_muted_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_muted_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "muted". C++ signature :  void remove_muted_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_name_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_name_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_notes()<Description>Built-In</Description></Built-In>
<Doc>remove_notes( (Clip)arg1, (float)arg2, (int)arg3, (float)arg4, (int)arg5) -&gt; None : Delete all notes starting in the given pitch- and time range. C++ signature :  void remove_notes(TPyHandle&lt;AClip&gt;,double,int,double,int)</Doc>
<Built-In>Live.Clip.Clip.remove_notes_by_id()<Description>Built-In</Description></Built-In>
<Doc>remove_notes_by_id( (Clip)arg1, (object)arg2) -&gt; None : Delete all notes matching the given note IDs. This function should NOT be used to implement modification of existing notes (i.e. in combination with add_new_notes), as that leads to loss of per-note events. apply_note_modifications must be used instead for modifying existing notes. C++ signature :  void remove_notes_by_id(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_notes_extended()<Description>Built-In</Description></Built-In>
<Doc>remove_notes_extended( (Clip)arg1, (int)from_pitch, (int)pitch_span, (float)from_time, (float)time_span) -&gt; None : Delete all notes starting in the given pitch and time range. This function should NOT be used to implement modification of existing notes (i.e. in combination with add_new_notes), as that leads to loss of per-note events. apply_note_modifications must be used instead for modifying existing notes. C++ signature :  void remove_notes_extended(TPyHandle&lt;AClip&gt;,int,int,double,double)</Doc>
<Built-In>Live.Clip.Clip.remove_notes_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_notes_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "notes". C++ signature :  void remove_notes_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_pitch_coarse_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_pitch_coarse_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "pitch_coarse". C++ signature :  void remove_pitch_coarse_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_pitch_fine_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_pitch_fine_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "pitch_fine". C++ signature :  void remove_pitch_fine_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_playing_position_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_playing_position_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "playing_position". C++ signature :  void remove_playing_position_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_playing_status_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_playing_status_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "playing_status". C++ signature :  void remove_playing_status_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_position_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_position_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "position". C++ signature :  void remove_position_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_ram_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_ram_mode_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "ram_mode". C++ signature :  void remove_ram_mode_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_signature_denominator_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_signature_denominator_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "signature_denominator". C++ signature :  void remove_signature_denominator_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_signature_numerator_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_signature_numerator_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "signature_numerator". C++ signature :  void remove_signature_numerator_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_start_marker_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_start_marker_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "start_marker". C++ signature :  void remove_start_marker_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_velocity_amount_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_velocity_amount_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "velocity_amount". C++ signature :  void remove_velocity_amount_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_warp_marker()<Description>Built-In</Description></Built-In>
<Doc>remove_warp_marker( (Clip)self, (float)beat_time) -&gt; None : Available for AudioClips only. Removes the specified warp marker, if possible. C++ signature :  void remove_warp_marker(TPyHandle&lt;AClip&gt;,double)</Doc>
<Built-In>Live.Clip.Clip.remove_warp_markers_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_warp_markers_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "warp_markers". C++ signature :  void remove_warp_markers_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_warp_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_warp_mode_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "warp_mode". C++ signature :  void remove_warp_mode_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.remove_warping_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_warping_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "warping". C++ signature :  void remove_warping_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.replace_selected_notes()<Description>Built-In</Description></Built-In>
<Doc>replace_selected_notes( (Clip)arg1, (tuple)arg2) -&gt; None : Called with a tuple of tuples where each inner tuple represents a note in the same format as returned by get_selected_notes. The notes described that way will then be used to replace the old selection. C++ signature :  void replace_selected_notes(TPyHandle&lt;AClip&gt;,boost::python::tuple)</Doc>
<Built-In>Live.Clip.Clip.sample_to_beat_time()<Description>Built-In</Description></Built-In>
<Doc>sample_to_beat_time( (Clip)self, (float)sample_time) -&gt; float : Available for AudioClips only. Converts the given sample time to beat time. Raises an error if the sample is not warped. C++ signature :  double sample_to_beat_time(TPyHandle&lt;AClip&gt;,double)</Doc>
<Built-In>Live.Clip.Clip.scrub()<Description>Built-In</Description></Built-In>
<Doc>scrub( (Clip)self, (float)scrub_position) -&gt; None : Scrubs inside a clip. scrub_position defines the position in beats that the scrub will start from. The scrub will continue until stop_scrub is called. Global quantization applies to the scrub's position and length. C++ signature :  void scrub(TPyHandle&lt;AClip&gt;,double)</Doc>
<Built-In>Live.Clip.Clip.seconds_to_sample_time()<Description>Built-In</Description></Built-In>
<Doc>seconds_to_sample_time( (Clip)self, (float)seconds) -&gt; float : Available for AudioClips only. Converts the given seconds to sample time. Raises an error if the sample is warped. C++ signature :  double seconds_to_sample_time(TPyHandle&lt;AClip&gt;,double)</Doc>
<Built-In>Live.Clip.Clip.select_all_notes()<Description>Built-In</Description></Built-In>
<Doc>select_all_notes( (Clip)arg1) -&gt; None : Selects all notes present in the clip. C++ signature :  void select_all_notes(TPyHandle&lt;AClip&gt;)</Doc>
<Built-In>Live.Clip.Clip.select_notes_by_id()<Description>Built-In</Description></Built-In>
<Doc>select_notes_by_id( (Clip)arg1, (object)arg2) -&gt; None : Selects all notes matching the given note IDs. C++ signature :  void select_notes_by_id(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.set_fire_button_state()<Description>Built-In</Description></Built-In>
<Doc>set_fire_button_state( (Clip)arg1, (bool)arg2) -&gt; None : Set the clip's fire button state directly. Supports all launch modes. C++ signature :  void set_fire_button_state(TPyHandle&lt;AClip&gt;,bool)</Doc>
<Built-In>Live.Clip.Clip.set_notes()<Description>Built-In</Description></Built-In>
<Doc>set_notes( (Clip)arg1, (tuple)arg2) -&gt; None : Called with a tuple of tuples where each inner tuple represents a note in the same format as returned by get_notes. The notes described that way will then be added to the clip. C++ signature :  void set_notes(TPyHandle&lt;AClip&gt;,boost::python::tuple)</Doc>
<Built-In>Live.Clip.Clip.signature_denominator_has_listener()<Description>Built-In</Description></Built-In>
<Doc>signature_denominator_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "signature_denominator". C++ signature :  bool signature_denominator_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.signature_numerator_has_listener()<Description>Built-In</Description></Built-In>
<Doc>signature_numerator_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "signature_numerator". C++ signature :  bool signature_numerator_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.start_marker_has_listener()<Description>Built-In</Description></Built-In>
<Doc>start_marker_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "start_marker". C++ signature :  bool start_marker_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.stop()<Description>Built-In</Description></Built-In>
<Doc>stop( (Clip)arg1) -&gt; None : Stop playing this Clip. C++ signature :  void stop(TPyHandle&lt;AClip&gt;)</Doc>
<Built-In>Live.Clip.Clip.stop_scrub()<Description>Built-In</Description></Built-In>
<Doc>stop_scrub( (Clip)arg1) -&gt; None : Stops the current scrub. C++ signature :  void stop_scrub(TPyHandle&lt;AClip&gt;)</Doc>
<Built-In>Live.Clip.Clip.velocity_amount_has_listener()<Description>Built-In</Description></Built-In>
<Doc>velocity_amount_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "velocity_amount". C++ signature :  bool velocity_amount_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.warp_markers_has_listener()<Description>Built-In</Description></Built-In>
<Doc>warp_markers_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "warp_markers". C++ signature :  bool warp_markers_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.warp_mode_has_listener()<Description>Built-In</Description></Built-In>
<Doc>warp_mode_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "warp_mode". C++ signature :  bool warp_mode_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Clip.Clip.warping_has_listener()<Description>Built-In</Description></Built-In>
<Doc>warping_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "warping". C++ signature :  bool warping_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.View<Description>Value</Description></Value>
<Doc>Representing the view aspects of a Clip.</Doc>
<Value>Live.Clip.Clip.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Clip.Clip._live_ptr<Description>Value</Description></Value>
<Value>Live.Clip.Clip.add_color_index_listener()<Description>Value</Description></Value>
<Doc>add_color_index_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "color_index" has changed. C++ signature :  void add_color_index_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_color_listener()<Description>Value</Description></Value>
<Doc>add_color_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "color" has changed. C++ signature :  void add_color_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_end_marker_listener()<Description>Value</Description></Value>
<Doc>add_end_marker_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "end_marker" has changed. C++ signature :  void add_end_marker_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_end_time_listener()<Description>Value</Description></Value>
<Doc>add_end_time_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "end_time" has changed. C++ signature :  void add_end_time_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_file_path_listener()<Description>Value</Description></Value>
<Doc>add_file_path_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "file_path" has changed. C++ signature :  void add_file_path_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_gain_listener()<Description>Value</Description></Value>
<Doc>add_gain_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "gain" has changed. C++ signature :  void add_gain_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_groove_listener()<Description>Value</Description></Value>
<Doc>add_groove_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "groove" has changed. C++ signature :  void add_groove_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_has_envelopes_listener()<Description>Value</Description></Value>
<Doc>add_has_envelopes_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "has_envelopes" has changed. C++ signature :  void add_has_envelopes_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_is_overdubbing_listener()<Description>Value</Description></Value>
<Doc>add_is_overdubbing_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_overdubbing" has changed. C++ signature :  void add_is_overdubbing_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_is_recording_listener()<Description>Value</Description></Value>
<Doc>add_is_recording_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_recording" has changed. C++ signature :  void add_is_recording_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_launch_mode_listener()<Description>Value</Description></Value>
<Doc>add_launch_mode_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "launch_mode" has changed. C++ signature :  void add_launch_mode_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_launch_quantization_listener()<Description>Value</Description></Value>
<Doc>add_launch_quantization_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "launch_quantization" has changed. C++ signature :  void add_launch_quantization_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_legato_listener()<Description>Value</Description></Value>
<Doc>add_legato_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "legato" has changed. C++ signature :  void add_legato_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_loop_end_listener()<Description>Value</Description></Value>
<Doc>add_loop_end_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "loop_end" has changed. C++ signature :  void add_loop_end_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_loop_jump_listener()<Description>Value</Description></Value>
<Doc>add_loop_jump_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "loop_jump" has changed. C++ signature :  void add_loop_jump_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_loop_start_listener()<Description>Value</Description></Value>
<Doc>add_loop_start_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "loop_start" has changed. C++ signature :  void add_loop_start_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_looping_listener()<Description>Value</Description></Value>
<Doc>add_looping_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "looping" has changed. C++ signature :  void add_looping_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_muted_listener()<Description>Value</Description></Value>
<Doc>add_muted_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "muted" has changed. C++ signature :  void add_muted_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_name_listener()<Description>Value</Description></Value>
<Doc>add_name_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_new_notes()<Description>Value</Description></Value>
<Doc>add_new_notes( (Clip)arg1, (object)arg2) -&gt; IntU64Vector : Expects a Python iterable holding a number of Live.Clip.MidiNoteSpecification objects. The objects will be used to construct new notes in the clip. C++ signature :  std::__1::vector&lt;unsigned long long, std::__1::allocator&lt;unsigned long long&gt;&gt; add_new_notes(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_notes_listener()<Description>Value</Description></Value>
<Doc>add_notes_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "notes" has changed. C++ signature :  void add_notes_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_pitch_coarse_listener()<Description>Value</Description></Value>
<Doc>add_pitch_coarse_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "pitch_coarse" has changed. C++ signature :  void add_pitch_coarse_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_pitch_fine_listener()<Description>Value</Description></Value>
<Doc>add_pitch_fine_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "pitch_fine" has changed. C++ signature :  void add_pitch_fine_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_playing_position_listener()<Description>Value</Description></Value>
<Doc>add_playing_position_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "playing_position" has changed. C++ signature :  void add_playing_position_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_playing_status_listener()<Description>Value</Description></Value>
<Doc>add_playing_status_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "playing_status" has changed. C++ signature :  void add_playing_status_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_position_listener()<Description>Value</Description></Value>
<Doc>add_position_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "position" has changed. C++ signature :  void add_position_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_ram_mode_listener()<Description>Value</Description></Value>
<Doc>add_ram_mode_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "ram_mode" has changed. C++ signature :  void add_ram_mode_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_signature_denominator_listener()<Description>Value</Description></Value>
<Doc>add_signature_denominator_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "signature_denominator" has changed. C++ signature :  void add_signature_denominator_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_signature_numerator_listener()<Description>Value</Description></Value>
<Doc>add_signature_numerator_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "signature_numerator" has changed. C++ signature :  void add_signature_numerator_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_start_marker_listener()<Description>Value</Description></Value>
<Doc>add_start_marker_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "start_marker" has changed. C++ signature :  void add_start_marker_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_velocity_amount_listener()<Description>Value</Description></Value>
<Doc>add_velocity_amount_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "velocity_amount" has changed. C++ signature :  void add_velocity_amount_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_warp_marker()<Description>Value</Description></Value>
<Doc>add_warp_marker( (Clip)self, (object)warp_marker) -&gt; None : Available for AudioClips only. Adds the specified warp marker, if possible. C++ signature :  void add_warp_marker(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_warp_markers_listener()<Description>Value</Description></Value>
<Doc>add_warp_markers_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "warp_markers" has changed. C++ signature :  void add_warp_markers_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_warp_mode_listener()<Description>Value</Description></Value>
<Doc>add_warp_mode_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "warp_mode" has changed. C++ signature :  void add_warp_mode_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.add_warping_listener()<Description>Value</Description></Value>
<Doc>add_warping_listener( (Clip)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "warping" has changed. C++ signature :  void add_warping_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.apply_note_modifications()<Description>Value</Description></Value>
<Doc>apply_note_modifications( (Clip)arg1, (MidiNoteVector)arg2) -&gt; None : Expects a list of notes as returned from get_notes_extended. The content of the list will be used to modify existing notes in the clip, based on matching note IDs. This function should be used when modifying existing notes, e.g. changing the velocity or start time. The function ensures that per-note events attached to the modified notes are preserved. This is NOT the case when replacing notes via a combination of remove_notes_extended and add_new_notes. The given list can be a subset of the notes in the clip, but it must not contain any notes that are not present in the clip.  C++ signature :  void apply_note_modifications(TPyHandle&lt;AClip&gt;,std::__1::vector&lt;NClipApi::TNoteInfo, std::__1::allocator&lt;NClipApi::TNoteInfo&gt;&gt;)</Doc>
<Value>Live.Clip.Clip.automation_envelope()<Description>Value</Description></Value>
<Doc>automation_envelope( (Clip)arg1, (DeviceParameter)arg2) -&gt; AutomationEnvelope : Return the envelope for the given parameter.Returns None if the envelope doesn't exist.Returns None for Arrangement clips.Returns None for parameters from a different track. C++ signature :  TWeakPtr&lt;AAutomation&gt; automation_envelope(TPyHandle&lt;AClip&gt;,TPyHandle&lt;ATimeableValue&gt;)</Doc>
<Value>Live.Clip.Clip.available_warp_modes<Description>Value</Description></Value>
<Doc>Available for AudioClips only.Get/Set the available warp modes, that can be used.</Doc>
<Value>Live.Clip.Clip.beat_to_sample_time()<Description>Value</Description></Value>
<Doc>beat_to_sample_time( (Clip)self, (float)beat_time) -&gt; float : Available for AudioClips only. Converts the given beat time to sample time. Raises an error if the sample is not warped. C++ signature :  double beat_to_sample_time(TPyHandle&lt;AClip&gt;,double)</Doc>
<Value>Live.Clip.Clip.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the Clip.</Doc>
<Value>Live.Clip.Clip.clear_all_envelopes()<Description>Value</Description></Value>
<Doc>clear_all_envelopes( (Clip)arg1) -&gt; None : Clears all envelopes for this clip. C++ signature :  void clear_all_envelopes(TPyHandle&lt;AClip&gt;)</Doc>
<Value>Live.Clip.Clip.clear_envelope()<Description>Value</Description></Value>
<Doc>clear_envelope( (Clip)arg1, (DeviceParameter)arg2) -&gt; None : Clears the envelope of this clips given parameter. C++ signature :  void clear_envelope(TPyHandle&lt;AClip&gt;,TPyHandle&lt;ATimeableValue&gt;)</Doc>
<Value>Live.Clip.Clip.color<Description>Value</Description></Value>
<Doc>Get/set access to the color of the Clip (RGB).</Doc>
<Value>Live.Clip.Clip.color_has_listener()<Description>Value</Description></Value>
<Doc>color_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "color". C++ signature :  bool color_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.color_index<Description>Value</Description></Value>
<Doc>Get/set access to the color index of the Clip.</Doc>
<Value>Live.Clip.Clip.color_index_has_listener()<Description>Value</Description></Value>
<Doc>color_index_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "color_index". C++ signature :  bool color_index_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.create_automation_envelope()<Description>Value</Description></Value>
<Doc>create_automation_envelope( (Clip)arg1, (DeviceParameter)arg2) -&gt; AutomationEnvelope : Creates an envelope for a given parameter and returns it.This should only be used if the envelope doesn't exist.Raises an error if the envelope can't be created. C++ signature :  TWeakPtr&lt;AAutomation&gt; create_automation_envelope(TPyHandle&lt;AClip&gt;,TPyHandle&lt;ATimeableValue&gt;)</Doc>
<Value>Live.Clip.Clip.crop()<Description>Value</Description></Value>
<Doc>crop( (Clip)arg1) -&gt; None : Crops the clip. The region that is cropped depends on whether the clip is looped or not. If looped, the region outside of the loop is removed. If not looped, the region outside the start and end markers is removed. C++ signature :  void crop(TPyHandle&lt;AClip&gt;)</Doc>
<Value>Live.Clip.Clip.deselect_all_notes()<Description>Value</Description></Value>
<Doc>deselect_all_notes( (Clip)arg1) -&gt; None : De-selects all notes present in the clip. C++ signature :  void deselect_all_notes(TPyHandle&lt;AClip&gt;)</Doc>
<Value>Live.Clip.Clip.duplicate_loop()<Description>Value</Description></Value>
<Doc>duplicate_loop( (Clip)arg1) -&gt; None : Make the loop two times longer and duplicates notes and envelopes. Duplicates the clip start/end range if the clip is not looped. C++ signature :  void duplicate_loop(TPyHandle&lt;AClip&gt;)</Doc>
<Value>Live.Clip.Clip.duplicate_notes_by_id()<Description>Value</Description></Value>
<Doc>duplicate_notes_by_id( (Clip)self, (object)note_ids [, (object)destination_time=None [, (int)transposition_amount=0]]) -&gt; IntU64Vector : Duplicate all notes matching the given note IDs. If the optional destination_time is not provided, new notes will be inserted after the last selected note. This behavior can be observed when duplicating notes in the Live GUI. If the transposition_amount is specified, the notes in the region will be transposed by the number of semitones. Raises an error on audio clips. C++ signature :  std::__1::vector&lt;unsigned long long, std::__1::allocator&lt;unsigned long long&gt;&gt; duplicate_notes_by_id(TPyHandle&lt;AClip&gt;,boost::python::api::object [,boost::python::api::object=None [,int=0]])</Doc>
<Value>Live.Clip.Clip.duplicate_region()<Description>Value</Description></Value>
<Doc>duplicate_region( (Clip)self, (float)region_start, (float)region_length, (float)destination_time [, (int)pitch=-1 [, (int)transposition_amount=0]]) -&gt; None : Duplicate the notes in the specified region to the destination_time. Only notes of the specified pitch are duplicated or all if pitch is -1. If the transposition_amount is not 0, the notes in the region will be transposed by the transpose_amount of semitones.Raises an error on audio clips. C++ signature :  void duplicate_region(TPyHandle&lt;AClip&gt;,double,double,double [,int=-1 [,int=0]])</Doc>
<Value>Live.Clip.Clip.end_marker<Description>Value</Description></Value>
<Doc>Get/Set the Clips end marker pos in beats/seconds (unit depends on warping).</Doc>
<Value>Live.Clip.Clip.end_marker_has_listener()<Description>Value</Description></Value>
<Doc>end_marker_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "end_marker". C++ signature :  bool end_marker_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.end_time<Description>Value</Description></Value>
<Doc>Get the clip's end time.</Doc>
<Value>Live.Clip.Clip.end_time_has_listener()<Description>Value</Description></Value>
<Doc>end_time_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "end_time". C++ signature :  bool end_time_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.file_path<Description>Value</Description></Value>
<Doc>Get the path of the file represented by the Audio Clip.</Doc>
<Value>Live.Clip.Clip.file_path_has_listener()<Description>Value</Description></Value>
<Doc>file_path_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "file_path". C++ signature :  bool file_path_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.fire()<Description>Value</Description></Value>
<Doc>fire( (Clip)arg1) -&gt; None : (Re)Start playing this Clip. C++ signature :  void fire(TPyHandle&lt;AClip&gt;)</Doc>
<Value>Live.Clip.Clip.gain<Description>Value</Description></Value>
<Doc>Available for AudioClips only.Read/write access to the gain setting of theAudio Clip</Doc>
<Value>Live.Clip.Clip.gain_display_string<Description>Value</Description></Value>
<Doc>Return a string with the gain as dB value</Doc>
<Value>Live.Clip.Clip.gain_has_listener()<Description>Value</Description></Value>
<Doc>gain_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "gain". C++ signature :  bool gain_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.get_all_notes_extended()<Description>Value</Description></Value>
<Doc>get_all_notes_extended( (Clip)arg1) -&gt; MidiNoteVector : Returns a list of all MIDI notes from the clip, regardless of their position relative to the start and end markers/loop start and loop end. Each note is represented by a Live.Clip.MidiNote object. The returned list can be modified freely, but modifications will not be reflected in the MIDI clip until apply_note_modifications is called. C++ signature :  std::__1::vector&lt;NClipApi::TNoteInfo, std::__1::allocator&lt;NClipApi::TNoteInfo&gt;&gt; get_all_notes_extended(TPyHandle&lt;AClip&gt;)</Doc>
<Value>Live.Clip.Clip.get_notes()<Description>Value</Description></Value>
<Doc>get_notes( (Clip)self, (float)from_time, (int)from_pitch, (float)time_span, (int)pitch_span) -&gt; tuple : Returns a tuple of tuples where each inner tuple represents a note starting in the given pitch- and time range. The inner tuple contains pitch, time, duration, velocity, and mute state. C++ signature :  boost::python::tuple get_notes(TPyHandle&lt;AClip&gt;,double,int,double,int)</Doc>
<Value>Live.Clip.Clip.get_notes_by_id()<Description>Value</Description></Value>
<Doc>get_notes_by_id( (Clip)arg1, (object)note_ids) -&gt; MidiNoteVector : Return a list of MIDI notes matching the given note IDs.  C++ signature :  std::__1::vector&lt;NClipApi::TNoteInfo, std::__1::allocator&lt;NClipApi::TNoteInfo&gt;&gt; get_notes_by_id(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.get_notes_extended()<Description>Value</Description></Value>
<Doc>get_notes_extended( (Clip)arg1, (int)from_pitch, (int)pitch_span, (float)from_time, (float)time_span) -&gt; MidiNoteVector : Returns a list of MIDI notes from the given pitch and time range. Each note is represented by a Live.Clip.MidiNote object. The returned list can be modified freely, but modifications will not be reflected in the MIDI clip until apply_note_modifications is called. C++ signature :  std::__1::vector&lt;NClipApi::TNoteInfo, std::__1::allocator&lt;NClipApi::TNoteInfo&gt;&gt; get_notes_extended(TPyHandle&lt;AClip&gt;,int,int,double,double)</Doc>
<Value>Live.Clip.Clip.get_selected_notes()<Description>Value</Description></Value>
<Doc>get_selected_notes( (Clip)arg1) -&gt; tuple : Returns a tuple of tuples where each inner tuple represents a selected note. The inner tuple contains pitch, time, duration, velocity, and mute state. C++ signature :  boost::python::tuple get_selected_notes(TPyHandle&lt;AClip&gt;)</Doc>
<Value>Live.Clip.Clip.get_selected_notes_extended()<Description>Value</Description></Value>
<Doc>get_selected_notes_extended( (Clip)arg1) -&gt; MidiNoteVector : Returns a list of all MIDI notes from the clip that are currently selected. Each note is represented by a Live.Clip.MidiNote object. The returned list can be modified freely, but modifications will not be reflected in the MIDI clip until apply_note_modifications is called. C++ signature :  std::__1::vector&lt;NClipApi::TNoteInfo, std::__1::allocator&lt;NClipApi::TNoteInfo&gt;&gt; get_selected_notes_extended(TPyHandle&lt;AClip&gt;)</Doc>
<Value>Live.Clip.Clip.groove<Description>Value</Description></Value>
<Doc>Get the groove associated with this clip.</Doc>
<Value>Live.Clip.Clip.groove_has_listener()<Description>Value</Description></Value>
<Doc>groove_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "groove". C++ signature :  bool groove_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.has_envelopes<Description>Value</Description></Value>
<Doc>Will notify if the clip gets his first envelope or the last envelope is removed.</Doc>
<Value>Live.Clip.Clip.has_envelopes_has_listener()<Description>Value</Description></Value>
<Doc>has_envelopes_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "has_envelopes". C++ signature :  bool has_envelopes_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.has_groove<Description>Value</Description></Value>
<Doc>Returns true if a groove is associated with this clip.</Doc>
<Value>Live.Clip.Clip.is_arrangement_clip<Description>Value</Description></Value>
<Doc>return true if this Clip is an Arrangement Clip.A Clip can be either a Session or Arrangement Clip.</Doc>
<Value>Live.Clip.Clip.is_audio_clip<Description>Value</Description></Value>
<Doc>Return true if this Clip is an Audio Clip.A Clip can be either an Audioclip or a MIDI Clip.</Doc>
<Value>Live.Clip.Clip.is_midi_clip<Description>Value</Description></Value>
<Doc>return true if this Clip is a MIDI Clip.A Clip can be either an Audioclip or a MIDI Clip.</Doc>
<Value>Live.Clip.Clip.is_overdubbing<Description>Value</Description></Value>
<Doc>returns true if the Clip is recording overdubs</Doc>
<Value>Live.Clip.Clip.is_overdubbing_has_listener()<Description>Value</Description></Value>
<Doc>is_overdubbing_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_overdubbing". C++ signature :  bool is_overdubbing_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.is_playing<Description>Value</Description></Value>
<Doc>Get/Set if this Clip is currently playing. If the Clips trigger modeis set to a quantization value, the Clip will not start playing immediately.If you need to know wether the Clip was triggered, use the is_triggered property.</Doc>
<Value>Live.Clip.Clip.is_recording<Description>Value</Description></Value>
<Doc>returns true if the Clip was triggered to record or is recording.</Doc>
<Value>Live.Clip.Clip.is_recording_has_listener()<Description>Value</Description></Value>
<Doc>is_recording_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_recording". C++ signature :  bool is_recording_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.is_triggered<Description>Value</Description></Value>
<Doc>returns true if the Clip was triggered or is playing.</Doc>
<Value>Live.Clip.Clip.launch_mode<Description>Value</Description></Value>
<Doc>Get/Set access to the launch mode setting of the Clip.</Doc>
<Value>Live.Clip.Clip.launch_mode_has_listener()<Description>Value</Description></Value>
<Doc>launch_mode_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "launch_mode". C++ signature :  bool launch_mode_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.launch_quantization<Description>Value</Description></Value>
<Doc>Get/Set access to the launch quantization setting of the Clip.</Doc>
<Value>Live.Clip.Clip.launch_quantization_has_listener()<Description>Value</Description></Value>
<Doc>launch_quantization_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "launch_quantization". C++ signature :  bool launch_quantization_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.legato<Description>Value</Description></Value>
<Doc>Get/Set access to the legato setting of the Clip</Doc>
<Value>Live.Clip.Clip.legato_has_listener()<Description>Value</Description></Value>
<Doc>legato_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "legato". C++ signature :  bool legato_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.length<Description>Value</Description></Value>
<Doc>Get to the Clips length in beats/seconds (unit depends on warping).</Doc>
<Value>Live.Clip.Clip.loop_end<Description>Value</Description></Value>
<Doc>Get/Set the loop end pos of this Clip in beats/seconds (unit depends on warping).</Doc>
<Value>Live.Clip.Clip.loop_end_has_listener()<Description>Value</Description></Value>
<Doc>loop_end_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "loop_end". C++ signature :  bool loop_end_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.loop_jump_has_listener()<Description>Value</Description></Value>
<Doc>loop_jump_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "loop_jump". C++ signature :  bool loop_jump_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.loop_start<Description>Value</Description></Value>
<Doc>Get/Set the Clips loopstart pos in beats/seconds (unit depends on warping).</Doc>
<Value>Live.Clip.Clip.loop_start_has_listener()<Description>Value</Description></Value>
<Doc>loop_start_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "loop_start". C++ signature :  bool loop_start_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.looping<Description>Value</Description></Value>
<Doc>Get/Set the Clips 'loop is enabled' flag.Only Warped Audio Clips or MIDI Clip can be looped.</Doc>
<Value>Live.Clip.Clip.looping_has_listener()<Description>Value</Description></Value>
<Doc>looping_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "looping". C++ signature :  bool looping_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.move_playing_pos()<Description>Value</Description></Value>
<Doc>move_playing_pos( (Clip)arg1, (float)arg2) -&gt; None : Jump forward or backward by the specified relative amount in beats. Will do nothing, if the Clip is not playing. C++ signature :  void move_playing_pos(TPyHandle&lt;AClip&gt;,double)</Doc>
<Value>Live.Clip.Clip.move_warp_marker()<Description>Value</Description></Value>
<Doc>move_warp_marker( (Clip)self, (float)marker_beat_time, (float)beat_time_distance) -&gt; None : Available for AudioClips only. Moves the specified warp marker by the specified beat time amount, if possible. C++ signature :  void move_warp_marker(TPyHandle&lt;AClip&gt;,double,double)</Doc>
<Value>Live.Clip.Clip.muted<Description>Value</Description></Value>
<Doc>Read/write access to the mute state of the Clip.</Doc>
<Value>Live.Clip.Clip.muted_has_listener()<Description>Value</Description></Value>
<Doc>muted_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "muted". C++ signature :  bool muted_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.name<Description>Value</Description></Value>
<Doc>Read/write access to the name of the Clip.</Doc>
<Value>Live.Clip.Clip.name_has_listener()<Description>Value</Description></Value>
<Doc>name_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.note_number_to_name()<Description>Value</Description></Value>
<Doc>note_number_to_name( (Clip)self, (int)midi_pitch) -&gt; str : Return a human-readable name for the given MIDI note number. Takes into account the scale and tonal spelling settings of the clip, as well as the current tuning system (if any) C++ signature :  TString note_number_to_name(TPyHandle&lt;AClip&gt;,int)</Doc>
<Value>Live.Clip.Clip.notes_has_listener()<Description>Value</Description></Value>
<Doc>notes_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "notes". C++ signature :  bool notes_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.pitch_coarse<Description>Value</Description></Value>
<Doc>Available for AudioClips only.Read/write access to the pitch (in halftones) setting of theAudio Clip, ranging from -48 to 48</Doc>
<Value>Live.Clip.Clip.pitch_coarse_has_listener()<Description>Value</Description></Value>
<Doc>pitch_coarse_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "pitch_coarse". C++ signature :  bool pitch_coarse_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.pitch_fine<Description>Value</Description></Value>
<Doc>Available for AudioClips only.Read/write access to the pitch fine setting of theAudio Clip, ranging from -500 to 500</Doc>
<Value>Live.Clip.Clip.pitch_fine_has_listener()<Description>Value</Description></Value>
<Doc>pitch_fine_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "pitch_fine". C++ signature :  bool pitch_fine_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.playing_position<Description>Value</Description></Value>
<Doc>Constant access to the current playing position of the clip.The returned value is the position in beats for midi and warped audio clips,or in seconds for unwarped audio clips. Stopped clips will return 0.</Doc>
<Value>Live.Clip.Clip.playing_position_has_listener()<Description>Value</Description></Value>
<Doc>playing_position_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "playing_position". C++ signature :  bool playing_position_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.playing_status_has_listener()<Description>Value</Description></Value>
<Doc>playing_status_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "playing_status". C++ signature :  bool playing_status_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.position<Description>Value</Description></Value>
<Doc>Get/Set the loop position of this Clip in beats/seconds (unit depends on warping).</Doc>
<Value>Live.Clip.Clip.position_has_listener()<Description>Value</Description></Value>
<Doc>position_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "position". C++ signature :  bool position_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.quantize()<Description>Value</Description></Value>
<Doc>quantize( (Clip)arg1, (int)arg2, (float)arg3) -&gt; None : Quantize all notes in a clip or align warp markers. C++ signature :  void quantize(TPyHandle&lt;AClip&gt;,int,float)</Doc>
<Value>Live.Clip.Clip.quantize_pitch()<Description>Value</Description></Value>
<Doc>quantize_pitch( (Clip)arg1, (int)arg2, (int)arg3, (float)arg4) -&gt; None : Quantize all the notes of a given pitch.  Raises an error on audio clips. C++ signature :  void quantize_pitch(TPyHandle&lt;AClip&gt;,int,int,float)</Doc>
<Value>Live.Clip.Clip.ram_mode<Description>Value</Description></Value>
<Doc>Available for AudioClips only.Read/write access to the Ram mode setting of the Audio Clip</Doc>
<Value>Live.Clip.Clip.ram_mode_has_listener()<Description>Value</Description></Value>
<Doc>ram_mode_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "ram_mode". C++ signature :  bool ram_mode_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_color_index_listener()<Description>Value</Description></Value>
<Doc>remove_color_index_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "color_index". C++ signature :  void remove_color_index_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_color_listener()<Description>Value</Description></Value>
<Doc>remove_color_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "color". C++ signature :  void remove_color_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_end_marker_listener()<Description>Value</Description></Value>
<Doc>remove_end_marker_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "end_marker". C++ signature :  void remove_end_marker_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_end_time_listener()<Description>Value</Description></Value>
<Doc>remove_end_time_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "end_time". C++ signature :  void remove_end_time_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_file_path_listener()<Description>Value</Description></Value>
<Doc>remove_file_path_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "file_path". C++ signature :  void remove_file_path_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_gain_listener()<Description>Value</Description></Value>
<Doc>remove_gain_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "gain". C++ signature :  void remove_gain_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_groove_listener()<Description>Value</Description></Value>
<Doc>remove_groove_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "groove". C++ signature :  void remove_groove_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_has_envelopes_listener()<Description>Value</Description></Value>
<Doc>remove_has_envelopes_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "has_envelopes". C++ signature :  void remove_has_envelopes_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_is_overdubbing_listener()<Description>Value</Description></Value>
<Doc>remove_is_overdubbing_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_overdubbing". C++ signature :  void remove_is_overdubbing_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_is_recording_listener()<Description>Value</Description></Value>
<Doc>remove_is_recording_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_recording". C++ signature :  void remove_is_recording_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_launch_mode_listener()<Description>Value</Description></Value>
<Doc>remove_launch_mode_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "launch_mode". C++ signature :  void remove_launch_mode_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_launch_quantization_listener()<Description>Value</Description></Value>
<Doc>remove_launch_quantization_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "launch_quantization". C++ signature :  void remove_launch_quantization_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_legato_listener()<Description>Value</Description></Value>
<Doc>remove_legato_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "legato". C++ signature :  void remove_legato_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_loop_end_listener()<Description>Value</Description></Value>
<Doc>remove_loop_end_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "loop_end". C++ signature :  void remove_loop_end_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_loop_jump_listener()<Description>Value</Description></Value>
<Doc>remove_loop_jump_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "loop_jump". C++ signature :  void remove_loop_jump_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_loop_start_listener()<Description>Value</Description></Value>
<Doc>remove_loop_start_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "loop_start". C++ signature :  void remove_loop_start_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_looping_listener()<Description>Value</Description></Value>
<Doc>remove_looping_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "looping". C++ signature :  void remove_looping_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_muted_listener()<Description>Value</Description></Value>
<Doc>remove_muted_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "muted". C++ signature :  void remove_muted_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_name_listener()<Description>Value</Description></Value>
<Doc>remove_name_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_notes()<Description>Value</Description></Value>
<Doc>remove_notes( (Clip)arg1, (float)arg2, (int)arg3, (float)arg4, (int)arg5) -&gt; None : Delete all notes starting in the given pitch- and time range. C++ signature :  void remove_notes(TPyHandle&lt;AClip&gt;,double,int,double,int)</Doc>
<Value>Live.Clip.Clip.remove_notes_by_id()<Description>Value</Description></Value>
<Doc>remove_notes_by_id( (Clip)arg1, (object)arg2) -&gt; None : Delete all notes matching the given note IDs. This function should NOT be used to implement modification of existing notes (i.e. in combination with add_new_notes), as that leads to loss of per-note events. apply_note_modifications must be used instead for modifying existing notes. C++ signature :  void remove_notes_by_id(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_notes_extended()<Description>Value</Description></Value>
<Doc>remove_notes_extended( (Clip)arg1, (int)from_pitch, (int)pitch_span, (float)from_time, (float)time_span) -&gt; None : Delete all notes starting in the given pitch and time range. This function should NOT be used to implement modification of existing notes (i.e. in combination with add_new_notes), as that leads to loss of per-note events. apply_note_modifications must be used instead for modifying existing notes. C++ signature :  void remove_notes_extended(TPyHandle&lt;AClip&gt;,int,int,double,double)</Doc>
<Value>Live.Clip.Clip.remove_notes_listener()<Description>Value</Description></Value>
<Doc>remove_notes_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "notes". C++ signature :  void remove_notes_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_pitch_coarse_listener()<Description>Value</Description></Value>
<Doc>remove_pitch_coarse_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "pitch_coarse". C++ signature :  void remove_pitch_coarse_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_pitch_fine_listener()<Description>Value</Description></Value>
<Doc>remove_pitch_fine_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "pitch_fine". C++ signature :  void remove_pitch_fine_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_playing_position_listener()<Description>Value</Description></Value>
<Doc>remove_playing_position_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "playing_position". C++ signature :  void remove_playing_position_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_playing_status_listener()<Description>Value</Description></Value>
<Doc>remove_playing_status_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "playing_status". C++ signature :  void remove_playing_status_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_position_listener()<Description>Value</Description></Value>
<Doc>remove_position_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "position". C++ signature :  void remove_position_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_ram_mode_listener()<Description>Value</Description></Value>
<Doc>remove_ram_mode_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "ram_mode". C++ signature :  void remove_ram_mode_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_signature_denominator_listener()<Description>Value</Description></Value>
<Doc>remove_signature_denominator_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "signature_denominator". C++ signature :  void remove_signature_denominator_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_signature_numerator_listener()<Description>Value</Description></Value>
<Doc>remove_signature_numerator_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "signature_numerator". C++ signature :  void remove_signature_numerator_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_start_marker_listener()<Description>Value</Description></Value>
<Doc>remove_start_marker_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "start_marker". C++ signature :  void remove_start_marker_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_velocity_amount_listener()<Description>Value</Description></Value>
<Doc>remove_velocity_amount_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "velocity_amount". C++ signature :  void remove_velocity_amount_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_warp_marker()<Description>Value</Description></Value>
<Doc>remove_warp_marker( (Clip)self, (float)beat_time) -&gt; None : Available for AudioClips only. Removes the specified warp marker, if possible. C++ signature :  void remove_warp_marker(TPyHandle&lt;AClip&gt;,double)</Doc>
<Value>Live.Clip.Clip.remove_warp_markers_listener()<Description>Value</Description></Value>
<Doc>remove_warp_markers_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "warp_markers". C++ signature :  void remove_warp_markers_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_warp_mode_listener()<Description>Value</Description></Value>
<Doc>remove_warp_mode_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "warp_mode". C++ signature :  void remove_warp_mode_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.remove_warping_listener()<Description>Value</Description></Value>
<Doc>remove_warping_listener( (Clip)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "warping". C++ signature :  void remove_warping_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.replace_selected_notes()<Description>Value</Description></Value>
<Doc>replace_selected_notes( (Clip)arg1, (tuple)arg2) -&gt; None : Called with a tuple of tuples where each inner tuple represents a note in the same format as returned by get_selected_notes. The notes described that way will then be used to replace the old selection. C++ signature :  void replace_selected_notes(TPyHandle&lt;AClip&gt;,boost::python::tuple)</Doc>
<Value>Live.Clip.Clip.sample_length<Description>Value</Description></Value>
<Doc>Available for AudioClips only.Get the sample length in sample time or -1 if there is no sample available.</Doc>
<Value>Live.Clip.Clip.sample_rate<Description>Value</Description></Value>
<Doc>Available for AudioClips only.Read-only access to the Clip's sampling rate.</Doc>
<Value>Live.Clip.Clip.sample_to_beat_time()<Description>Value</Description></Value>
<Doc>sample_to_beat_time( (Clip)self, (float)sample_time) -&gt; float : Available for AudioClips only. Converts the given sample time to beat time. Raises an error if the sample is not warped. C++ signature :  double sample_to_beat_time(TPyHandle&lt;AClip&gt;,double)</Doc>
<Value>Live.Clip.Clip.scrub()<Description>Value</Description></Value>
<Doc>scrub( (Clip)self, (float)scrub_position) -&gt; None : Scrubs inside a clip. scrub_position defines the position in beats that the scrub will start from. The scrub will continue until stop_scrub is called. Global quantization applies to the scrub's position and length. C++ signature :  void scrub(TPyHandle&lt;AClip&gt;,double)</Doc>
<Value>Live.Clip.Clip.seconds_to_sample_time()<Description>Value</Description></Value>
<Doc>seconds_to_sample_time( (Clip)self, (float)seconds) -&gt; float : Available for AudioClips only. Converts the given seconds to sample time. Raises an error if the sample is warped. C++ signature :  double seconds_to_sample_time(TPyHandle&lt;AClip&gt;,double)</Doc>
<Value>Live.Clip.Clip.select_all_notes()<Description>Value</Description></Value>
<Doc>select_all_notes( (Clip)arg1) -&gt; None : Selects all notes present in the clip. C++ signature :  void select_all_notes(TPyHandle&lt;AClip&gt;)</Doc>
<Value>Live.Clip.Clip.select_notes_by_id()<Description>Value</Description></Value>
<Doc>select_notes_by_id( (Clip)arg1, (object)arg2) -&gt; None : Selects all notes matching the given note IDs. C++ signature :  void select_notes_by_id(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.set_fire_button_state()<Description>Value</Description></Value>
<Doc>set_fire_button_state( (Clip)arg1, (bool)arg2) -&gt; None : Set the clip's fire button state directly. Supports all launch modes. C++ signature :  void set_fire_button_state(TPyHandle&lt;AClip&gt;,bool)</Doc>
<Value>Live.Clip.Clip.set_notes()<Description>Value</Description></Value>
<Doc>set_notes( (Clip)arg1, (tuple)arg2) -&gt; None : Called with a tuple of tuples where each inner tuple represents a note in the same format as returned by get_notes. The notes described that way will then be added to the clip. C++ signature :  void set_notes(TPyHandle&lt;AClip&gt;,boost::python::tuple)</Doc>
<Value>Live.Clip.Clip.signature_denominator<Description>Value</Description></Value>
<Doc>Get/Set access to the global signature denominator of the Clip.</Doc>
<Value>Live.Clip.Clip.signature_denominator_has_listener()<Description>Value</Description></Value>
<Doc>signature_denominator_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "signature_denominator". C++ signature :  bool signature_denominator_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.signature_numerator<Description>Value</Description></Value>
<Doc>Get/Set access to the global signature numerator of the Clip.</Doc>
<Value>Live.Clip.Clip.signature_numerator_has_listener()<Description>Value</Description></Value>
<Doc>signature_numerator_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "signature_numerator". C++ signature :  bool signature_numerator_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.start_marker<Description>Value</Description></Value>
<Doc>Get/Set the Clips start marker pos in beats/seconds (unit depends on warping).</Doc>
<Value>Live.Clip.Clip.start_marker_has_listener()<Description>Value</Description></Value>
<Doc>start_marker_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "start_marker". C++ signature :  bool start_marker_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.start_time<Description>Value</Description></Value>
<Doc>Get the clip's start time offset. For Session View clips, this is the time the clip was started. For Arrangement View clips, this is the offset within the arrangement.</Doc>
<Value>Live.Clip.Clip.stop()<Description>Value</Description></Value>
<Doc>stop( (Clip)arg1) -&gt; None : Stop playing this Clip. C++ signature :  void stop(TPyHandle&lt;AClip&gt;)</Doc>
<Value>Live.Clip.Clip.stop_scrub()<Description>Value</Description></Value>
<Doc>stop_scrub( (Clip)arg1) -&gt; None : Stops the current scrub. C++ signature :  void stop_scrub(TPyHandle&lt;AClip&gt;)</Doc>
<Value>Live.Clip.Clip.velocity_amount<Description>Value</Description></Value>
<Doc>Get/Set access to the velocity to volume amount of the Clip.</Doc>
<Value>Live.Clip.Clip.velocity_amount_has_listener()<Description>Value</Description></Value>
<Doc>velocity_amount_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "velocity_amount". C++ signature :  bool velocity_amount_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.view<Description>Value</Description></Value>
<Doc>Get the view of the Clip.</Doc>
<Value>Live.Clip.Clip.warp_markers<Description>Value</Description></Value>
<Doc>Available for AudioClips only.Get the warp markers for this audio clip.</Doc>
<Value>Live.Clip.Clip.warp_markers_has_listener()<Description>Value</Description></Value>
<Doc>warp_markers_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "warp_markers". C++ signature :  bool warp_markers_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.warp_mode<Description>Value</Description></Value>
<Doc>Available for AudioClips only.Get/Set the warp mode for this audio clip.</Doc>
<Value>Live.Clip.Clip.warp_mode_has_listener()<Description>Value</Description></Value>
<Doc>warp_mode_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "warp_mode". C++ signature :  bool warp_mode_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.warping<Description>Value</Description></Value>
<Doc>Available for AudioClips only.Get/Set if this Clip is timestreched.</Doc>
<Value>Live.Clip.Clip.warping_has_listener()<Description>Value</Description></Value>
<Doc>warping_has_listener( (Clip)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "warping". C++ signature :  bool warping_has_listener(TPyHandle&lt;AClip&gt;,boost::python::api::object)</Doc>
<Value>Live.Clip.Clip.will_record_on_start<Description>Value</Description></Value>
<Doc>returns true if the Clip will record on being started.</Doc>
<Class>Live.Clip.Clip.View<Description>Class</Description></Class>
<Doc>Representing the view aspects of a Clip.</Doc>
<Built-In>Live.Clip.Clip.View.hide_envelope()<Description>Built-In</Description></Built-In>
<Doc>hide_envelope( (View)arg1) -&gt; None : Hide the envelope view. C++ signature :  void hide_envelope(TPyViewData&lt;AClip&gt;)</Doc>
<Built-In>Live.Clip.Clip.View.select_envelope_parameter()<Description>Built-In</Description></Built-In>
<Doc>select_envelope_parameter( (View)arg1, (DeviceParameter)arg2) -&gt; None : Select the given device parameter in the envelope view. C++ signature :  void select_envelope_parameter(TPyViewData&lt;AClip&gt;,TPyHandle&lt;ATimeableValue&gt;)</Doc>
<Built-In>Live.Clip.Clip.View.show_envelope()<Description>Built-In</Description></Built-In>
<Doc>show_envelope( (View)arg1) -&gt; None : Show the envelope view. C++ signature :  void show_envelope(TPyViewData&lt;AClip&gt;)</Doc>
<Built-In>Live.Clip.Clip.View.show_loop()<Description>Built-In</Description></Built-In>
<Doc>show_loop( (View)arg1) -&gt; None : Show the entire loop in the detail view. C++ signature :  void show_loop(TPyViewData&lt;AClip&gt;)</Doc>
<Value>Live.Clip.Clip.View.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Clip.Clip.View._live_ptr<Description>Value</Description></Value>
<Value>Live.Clip.Clip.View.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the clip view.</Doc>
<Value>Live.Clip.Clip.View.grid_is_triplet<Description>Value</Description></Value>
<Doc>Get/set wether the grid is showing in triplet mode.</Doc>
<Value>Live.Clip.Clip.View.grid_quantization<Description>Value</Description></Value>
<Doc>Get/set clip grid quantization resolution.</Doc>
<Value>Live.Clip.Clip.View.hide_envelope()<Description>Value</Description></Value>
<Doc>hide_envelope( (View)arg1) -&gt; None : Hide the envelope view. C++ signature :  void hide_envelope(TPyViewData&lt;AClip&gt;)</Doc>
<Value>Live.Clip.Clip.View.select_envelope_parameter()<Description>Value</Description></Value>
<Doc>select_envelope_parameter( (View)arg1, (DeviceParameter)arg2) -&gt; None : Select the given device parameter in the envelope view. C++ signature :  void select_envelope_parameter(TPyViewData&lt;AClip&gt;,TPyHandle&lt;ATimeableValue&gt;)</Doc>
<Value>Live.Clip.Clip.View.show_envelope()<Description>Value</Description></Value>
<Doc>show_envelope( (View)arg1) -&gt; None : Show the envelope view. C++ signature :  void show_envelope(TPyViewData&lt;AClip&gt;)</Doc>
<Value>Live.Clip.Clip.View.show_loop()<Description>Value</Description></Value>
<Doc>show_loop( (View)arg1) -&gt; None : Show the entire loop in the detail view. C++ signature :  void show_loop(TPyViewData&lt;AClip&gt;)</Doc>
<Class>Live.Clip.ClipLaunchQuantization<Description>Class</Description></Class>
<Built-In>Live.Clip.ClipLaunchQuantization.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Clip.ClipLaunchQuantization.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Clip.ClipLaunchQuantization.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.Clip.ClipLaunchQuantization.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.Clip.ClipLaunchQuantization.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.Clip.ClipLaunchQuantization.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Clip.ClipLaunchQuantization.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.Clip.ClipLaunchQuantization.name<Description>Value</Description></Value>
<Value>Live.Clip.ClipLaunchQuantization.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.Clip.ClipLaunchQuantization.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.Clip.ClipLaunchQuantization.q_2_bars<Description>Value</Description></Value>
<Value>Live.Clip.ClipLaunchQuantization.q_4_bars<Description>Value</Description></Value>
<Value>Live.Clip.ClipLaunchQuantization.q_8_bars<Description>Value</Description></Value>
<Value>Live.Clip.ClipLaunchQuantization.q_bar<Description>Value</Description></Value>
<Value>Live.Clip.ClipLaunchQuantization.q_eighth<Description>Value</Description></Value>
<Value>Live.Clip.ClipLaunchQuantization.q_eighth_triplet<Description>Value</Description></Value>
<Value>Live.Clip.ClipLaunchQuantization.q_global<Description>Value</Description></Value>
<Value>Live.Clip.ClipLaunchQuantization.q_half<Description>Value</Description></Value>
<Value>Live.Clip.ClipLaunchQuantization.q_half_triplet<Description>Value</Description></Value>
<Value>Live.Clip.ClipLaunchQuantization.q_none<Description>Value</Description></Value>
<Value>Live.Clip.ClipLaunchQuantization.q_quarter<Description>Value</Description></Value>
<Value>Live.Clip.ClipLaunchQuantization.q_quarter_triplet<Description>Value</Description></Value>
<Value>Live.Clip.ClipLaunchQuantization.q_sixteenth<Description>Value</Description></Value>
<Value>Live.Clip.ClipLaunchQuantization.q_sixteenth_triplet<Description>Value</Description></Value>
<Value>Live.Clip.ClipLaunchQuantization.q_thirtysecond<Description>Value</Description></Value>
<Value>Live.Clip.ClipLaunchQuantization.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.Clip.ClipLaunchQuantization.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.Clip.ClipLaunchQuantization.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.Clip.GridQuantization<Description>Class</Description></Class>
<Built-In>Live.Clip.GridQuantization.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Clip.GridQuantization.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Clip.GridQuantization.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.Clip.GridQuantization.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.Clip.GridQuantization.count<Description>Value</Description></Value>
<Value>Live.Clip.GridQuantization.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.Clip.GridQuantization.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Clip.GridQuantization.g_2_bars<Description>Value</Description></Value>
<Value>Live.Clip.GridQuantization.g_4_bars<Description>Value</Description></Value>
<Value>Live.Clip.GridQuantization.g_8_bars<Description>Value</Description></Value>
<Value>Live.Clip.GridQuantization.g_bar<Description>Value</Description></Value>
<Value>Live.Clip.GridQuantization.g_eighth<Description>Value</Description></Value>
<Value>Live.Clip.GridQuantization.g_half<Description>Value</Description></Value>
<Value>Live.Clip.GridQuantization.g_quarter<Description>Value</Description></Value>
<Value>Live.Clip.GridQuantization.g_sixteenth<Description>Value</Description></Value>
<Value>Live.Clip.GridQuantization.g_thirtysecond<Description>Value</Description></Value>
<Value>Live.Clip.GridQuantization.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.Clip.GridQuantization.name<Description>Value</Description></Value>
<Value>Live.Clip.GridQuantization.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.Clip.GridQuantization.no_grid<Description>Value</Description></Value>
<Value>Live.Clip.GridQuantization.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.Clip.GridQuantization.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.Clip.GridQuantization.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.Clip.GridQuantization.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.Clip.LaunchMode<Description>Class</Description></Class>
<Built-In>Live.Clip.LaunchMode.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Clip.LaunchMode.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Clip.LaunchMode.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.Clip.LaunchMode.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.Clip.LaunchMode.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.Clip.LaunchMode.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Clip.LaunchMode.gate<Description>Value</Description></Value>
<Value>Live.Clip.LaunchMode.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.Clip.LaunchMode.name<Description>Value</Description></Value>
<Value>Live.Clip.LaunchMode.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.Clip.LaunchMode.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.Clip.LaunchMode.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.Clip.LaunchMode.repeat<Description>Value</Description></Value>
<Value>Live.Clip.LaunchMode.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.Clip.LaunchMode.toggle<Description>Value</Description></Value>
<Value>Live.Clip.LaunchMode.trigger<Description>Value</Description></Value>
<Value>Live.Clip.LaunchMode.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.Clip.MidiNote<Description>Class</Description></Class>
<Doc>An object representing a MIDI Note</Doc>
<Value>Live.Clip.MidiNote.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Clip.MidiNote.duration<Description>Value</Description></Value>
<Value>Live.Clip.MidiNote.mute<Description>Value</Description></Value>
<Value>Live.Clip.MidiNote.note_id<Description>Value</Description></Value>
<Doc>A numerical ID that's unique within the originating clip of the note. Not to beused directly, but important for other API calls, namely apply_note_modifications.</Doc>
<Value>Live.Clip.MidiNote.pitch<Description>Value</Description></Value>
<Value>Live.Clip.MidiNote.probability<Description>Value</Description></Value>
<Value>Live.Clip.MidiNote.release_velocity<Description>Value</Description></Value>
<Value>Live.Clip.MidiNote.start_time<Description>Value</Description></Value>
<Value>Live.Clip.MidiNote.velocity<Description>Value</Description></Value>
<Value>Live.Clip.MidiNote.velocity_deviation<Description>Value</Description></Value>
<Class>Live.Clip.MidiNoteSpecification<Description>Class</Description></Class>
<Doc>An object specifying the data for creating a MIDI note. To be used with the add_new_notes function.</Doc>
<Value>Live.Clip.MidiNoteSpecification.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Class>Live.Clip.MidiNoteVector<Description>Class</Description></Class>
<Doc>A container for holding MIDI notes from Live.</Doc>
<Built-In>Live.Clip.MidiNoteVector.append()<Description>Built-In</Description></Built-In>
<Doc>append( (MidiNoteVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;NClipApi::TNoteInfo, std::__1::allocator&lt;NClipApi::TNoteInfo&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Built-In>Live.Clip.MidiNoteVector.extend()<Description>Built-In</Description></Built-In>
<Doc>extend( (MidiNoteVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;NClipApi::TNoteInfo, std::__1::allocator&lt;NClipApi::TNoteInfo&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Clip.MidiNoteVector.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Clip.MidiNoteVector.append()<Description>Value</Description></Value>
<Doc>append( (MidiNoteVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;NClipApi::TNoteInfo, std::__1::allocator&lt;NClipApi::TNoteInfo&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Clip.MidiNoteVector.extend()<Description>Value</Description></Value>
<Doc>extend( (MidiNoteVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;NClipApi::TNoteInfo, std::__1::allocator&lt;NClipApi::TNoteInfo&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Class>Live.Clip.WarpMarker<Description>Class</Description></Class>
<Doc>This class represents a WarpMarker type.</Doc>
<Value>Live.Clip.WarpMarker.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Clip.WarpMarker.beat_time<Description>Value</Description></Value>
<Doc>A WarpMarker's beat time.</Doc>
<Value>Live.Clip.WarpMarker.sample_time<Description>Value</Description></Value>
<Doc>A WarpMarker's sample time.</Doc>
<Class>Live.Clip.WarpMarkerVector<Description>Class</Description></Class>
<Doc>A container for returning warp markers from Live.</Doc>
<Built-In>Live.Clip.WarpMarkerVector.append()<Description>Built-In</Description></Built-In>
<Doc>append( (WarpMarkerVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;NApiHelpers::TWarpMarker, std::__1::allocator&lt;NApiHelpers::TWarpMarker&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Built-In>Live.Clip.WarpMarkerVector.extend()<Description>Built-In</Description></Built-In>
<Doc>extend( (WarpMarkerVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;NApiHelpers::TWarpMarker, std::__1::allocator&lt;NApiHelpers::TWarpMarker&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Clip.WarpMarkerVector.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Clip.WarpMarkerVector.append()<Description>Value</Description></Value>
<Doc>append( (WarpMarkerVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;NApiHelpers::TWarpMarker, std::__1::allocator&lt;NApiHelpers::TWarpMarker&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Clip.WarpMarkerVector.extend()<Description>Value</Description></Value>
<Doc>extend( (WarpMarkerVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;NApiHelpers::TWarpMarker, std::__1::allocator&lt;NApiHelpers::TWarpMarker&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Class>Live.Clip.WarpMode<Description>Class</Description></Class>
<Built-In>Live.Clip.WarpMode.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Clip.WarpMode.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Clip.WarpMode.beats<Description>Value</Description></Value>
<Value>Live.Clip.WarpMode.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.Clip.WarpMode.complex<Description>Value</Description></Value>
<Value>Live.Clip.WarpMode.complex_pro<Description>Value</Description></Value>
<Value>Live.Clip.WarpMode.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.Clip.WarpMode.count<Description>Value</Description></Value>
<Value>Live.Clip.WarpMode.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.Clip.WarpMode.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Clip.WarpMode.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.Clip.WarpMode.name<Description>Value</Description></Value>
<Value>Live.Clip.WarpMode.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.Clip.WarpMode.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.Clip.WarpMode.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.Clip.WarpMode.repitch<Description>Value</Description></Value>
<Value>Live.Clip.WarpMode.rex<Description>Value</Description></Value>
<Value>Live.Clip.WarpMode.texture<Description>Value</Description></Value>
<Value>Live.Clip.WarpMode.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.Clip.WarpMode.tones<Description>Value</Description></Value>
<Value>Live.Clip.WarpMode.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Module>Live.ClipSlot<Description>Module</Description></Module>
<Class>Live.ClipSlot.ClipSlot<Description>Class</Description></Class>
<Doc>This class represents an entry in Lives Session view matrix.</Doc>
<Built-In>Live.ClipSlot.ClipSlot.add_color_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_color_index_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "color_index" has changed. C++ signature :  void add_color_index_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ClipSlot.ClipSlot.add_color_listener()<Description>Built-In</Description></Built-In>
<Doc>add_color_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "color" has changed. C++ signature :  void add_color_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ClipSlot.ClipSlot.add_controls_other_clips_listener()<Description>Built-In</Description></Built-In>
<Doc>add_controls_other_clips_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "controls_other_clips" has changed. C++ signature :  void add_controls_other_clips_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ClipSlot.ClipSlot.add_has_clip_listener()<Description>Built-In</Description></Built-In>
<Doc>add_has_clip_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "has_clip" has changed. C++ signature :  void add_has_clip_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ClipSlot.ClipSlot.add_has_stop_button_listener()<Description>Built-In</Description></Built-In>
<Doc>add_has_stop_button_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "has_stop_button" has changed. C++ signature :  void add_has_stop_button_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ClipSlot.ClipSlot.add_is_triggered_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_triggered_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_triggered" has changed. C++ signature :  void add_is_triggered_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ClipSlot.ClipSlot.add_playing_status_listener()<Description>Built-In</Description></Built-In>
<Doc>add_playing_status_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "playing_status" has changed. C++ signature :  void add_playing_status_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ClipSlot.ClipSlot.color_has_listener()<Description>Built-In</Description></Built-In>
<Doc>color_has_listener( (ClipSlot)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "color". C++ signature :  bool color_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ClipSlot.ClipSlot.color_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>color_index_has_listener( (ClipSlot)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "color_index". C++ signature :  bool color_index_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ClipSlot.ClipSlot.controls_other_clips_has_listener()<Description>Built-In</Description></Built-In>
<Doc>controls_other_clips_has_listener( (ClipSlot)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "controls_other_clips". C++ signature :  bool controls_other_clips_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ClipSlot.ClipSlot.create_audio_clip()<Description>Built-In</Description></Built-In>
<Doc>create_audio_clip( (ClipSlot)arg1, (object)arg2) -&gt; Clip : Creates an audio clip referencing the file at the given absolute path in the slot. Throws an error when called on non-empty slots or slots in non-audio or frozen tracks, or when the path doesn't point at a valid audio file. C++ signature :  TWeakPtr&lt;TPyHandle&lt;AClip&gt;&gt; create_audio_clip(TPyHandle&lt;AGroupAndClipSlotBase&gt;,TString)</Doc>
<Built-In>Live.ClipSlot.ClipSlot.create_clip()<Description>Built-In</Description></Built-In>
<Doc>create_clip( (ClipSlot)arg1, (float)arg2) -&gt; Clip : Creates an empty clip with the given length in the slot. Throws an error when called on non-empty slots or slots in non-MIDI tracks. C++ signature :  TWeakPtr&lt;TPyHandle&lt;AClip&gt;&gt; create_clip(TPyHandle&lt;AGroupAndClipSlotBase&gt;,double)</Doc>
<Built-In>Live.ClipSlot.ClipSlot.delete_clip()<Description>Built-In</Description></Built-In>
<Doc>delete_clip( (ClipSlot)arg1) -&gt; None : Removes the clip contained in the slot. Raises an exception if the slot was empty. C++ signature :  void delete_clip(TPyHandle&lt;AGroupAndClipSlotBase&gt;)</Doc>
<Built-In>Live.ClipSlot.ClipSlot.duplicate_clip_to()<Description>Built-In</Description></Built-In>
<Doc>duplicate_clip_to( (ClipSlot)arg1, (ClipSlot)arg2) -&gt; None : Duplicates the slot's clip to the passed in target slot. Overrides the target's clip if it's not empty. Raises an exception if the (source) slot itself is empty, or if source and target have different track types (audio vs. MIDI). Also raises if the source or target slot is in a group track (so called group slot). C++ signature :  void duplicate_clip_to(TPyHandle&lt;AGroupAndClipSlotBase&gt;,TPyHandle&lt;AGroupAndClipSlotBase&gt;)</Doc>
<Built-In>Live.ClipSlot.ClipSlot.fire()<Description>Built-In</Description></Built-In>
<Doc>fire( (ClipSlot)arg1) -&gt; None : Fire a Clip if this Clipslot owns one, else trigger the stop button, if we have one. C++ signature :  void fire(TPyHandle&lt;AGroupAndClipSlotBase&gt;)fire( (ClipSlot)self [, (float)record_length=1.7976931348623157e+308 [, (int)launch_quantization=-2147483648 [, (bool)force_legato=False]]]) -&gt; None : If 'record_length' is passed, the clip will be refired after the given recording length.  Raises an error if the slot owns a clip. 'launch_quantization' determines the quantization of global transport that is applied overriding the value in the song. 'force_legato' will make the clip play inmediatelly. The playhead will be moved to keep the clip synchronized. C++ signature :  void fire(TPyHandle&lt;AGroupAndClipSlotBase&gt; [,double=1.7976931348623157e+308 [,int=-2147483648 [,bool=False]]])</Doc>
<Built-In>Live.ClipSlot.ClipSlot.has_clip_has_listener()<Description>Built-In</Description></Built-In>
<Doc>has_clip_has_listener( (ClipSlot)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "has_clip". C++ signature :  bool has_clip_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ClipSlot.ClipSlot.has_stop_button_has_listener()<Description>Built-In</Description></Built-In>
<Doc>has_stop_button_has_listener( (ClipSlot)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "has_stop_button". C++ signature :  bool has_stop_button_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ClipSlot.ClipSlot.is_triggered_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_triggered_has_listener( (ClipSlot)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_triggered". C++ signature :  bool is_triggered_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ClipSlot.ClipSlot.playing_status_has_listener()<Description>Built-In</Description></Built-In>
<Doc>playing_status_has_listener( (ClipSlot)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "playing_status". C++ signature :  bool playing_status_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ClipSlot.ClipSlot.remove_color_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_color_index_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "color_index". C++ signature :  void remove_color_index_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ClipSlot.ClipSlot.remove_color_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_color_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "color". C++ signature :  void remove_color_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ClipSlot.ClipSlot.remove_controls_other_clips_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_controls_other_clips_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "controls_other_clips". C++ signature :  void remove_controls_other_clips_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ClipSlot.ClipSlot.remove_has_clip_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_has_clip_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "has_clip". C++ signature :  void remove_has_clip_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ClipSlot.ClipSlot.remove_has_stop_button_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_has_stop_button_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "has_stop_button". C++ signature :  void remove_has_stop_button_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ClipSlot.ClipSlot.remove_is_triggered_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_triggered_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_triggered". C++ signature :  void remove_is_triggered_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ClipSlot.ClipSlot.remove_playing_status_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_playing_status_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "playing_status". C++ signature :  void remove_playing_status_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ClipSlot.ClipSlot.set_fire_button_state()<Description>Built-In</Description></Built-In>
<Doc>set_fire_button_state( (ClipSlot)arg1, (bool)arg2) -&gt; None : Set the clipslot's fire button state directly. Supports all launch modes. C++ signature :  void set_fire_button_state(TPyHandle&lt;AGroupAndClipSlotBase&gt;,bool)</Doc>
<Built-In>Live.ClipSlot.ClipSlot.stop()<Description>Built-In</Description></Built-In>
<Doc>stop( (ClipSlot)arg1) -&gt; None : Stop playing the contained Clip, if there is a Clip and its currently playing. C++ signature :  void stop(TPyHandle&lt;AGroupAndClipSlotBase&gt;)</Doc>
<Value>Live.ClipSlot.ClipSlot.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.ClipSlot.ClipSlot._live_ptr<Description>Value</Description></Value>
<Value>Live.ClipSlot.ClipSlot.add_color_index_listener()<Description>Value</Description></Value>
<Doc>add_color_index_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "color_index" has changed. C++ signature :  void add_color_index_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Value>Live.ClipSlot.ClipSlot.add_color_listener()<Description>Value</Description></Value>
<Doc>add_color_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "color" has changed. C++ signature :  void add_color_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Value>Live.ClipSlot.ClipSlot.add_controls_other_clips_listener()<Description>Value</Description></Value>
<Doc>add_controls_other_clips_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "controls_other_clips" has changed. C++ signature :  void add_controls_other_clips_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Value>Live.ClipSlot.ClipSlot.add_has_clip_listener()<Description>Value</Description></Value>
<Doc>add_has_clip_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "has_clip" has changed. C++ signature :  void add_has_clip_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Value>Live.ClipSlot.ClipSlot.add_has_stop_button_listener()<Description>Value</Description></Value>
<Doc>add_has_stop_button_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "has_stop_button" has changed. C++ signature :  void add_has_stop_button_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Value>Live.ClipSlot.ClipSlot.add_is_triggered_listener()<Description>Value</Description></Value>
<Doc>add_is_triggered_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_triggered" has changed. C++ signature :  void add_is_triggered_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Value>Live.ClipSlot.ClipSlot.add_playing_status_listener()<Description>Value</Description></Value>
<Doc>add_playing_status_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "playing_status" has changed. C++ signature :  void add_playing_status_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Value>Live.ClipSlot.ClipSlot.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the ClipSlot.</Doc>
<Value>Live.ClipSlot.ClipSlot.clip<Description>Value</Description></Value>
<Doc>Returns the Clip which this clipslots currently owns. Might be None.</Doc>
<Value>Live.ClipSlot.ClipSlot.color<Description>Value</Description></Value>
<Doc>Returns the canonical color for the clip slot or None if it does not exist.</Doc>
<Value>Live.ClipSlot.ClipSlot.color_has_listener()<Description>Value</Description></Value>
<Doc>color_has_listener( (ClipSlot)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "color". C++ signature :  bool color_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Value>Live.ClipSlot.ClipSlot.color_index<Description>Value</Description></Value>
<Doc>Returns the canonical color index for the clip slot or None if it does not exist.</Doc>
<Value>Live.ClipSlot.ClipSlot.color_index_has_listener()<Description>Value</Description></Value>
<Doc>color_index_has_listener( (ClipSlot)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "color_index". C++ signature :  bool color_index_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Value>Live.ClipSlot.ClipSlot.controls_other_clips<Description>Value</Description></Value>
<Doc>Returns true if firing this slot will fire clips in other slots.Can only be true for slots in group tracks.</Doc>
<Value>Live.ClipSlot.ClipSlot.controls_other_clips_has_listener()<Description>Value</Description></Value>
<Doc>controls_other_clips_has_listener( (ClipSlot)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "controls_other_clips". C++ signature :  bool controls_other_clips_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Value>Live.ClipSlot.ClipSlot.create_audio_clip()<Description>Value</Description></Value>
<Doc>create_audio_clip( (ClipSlot)arg1, (object)arg2) -&gt; Clip : Creates an audio clip referencing the file at the given absolute path in the slot. Throws an error when called on non-empty slots or slots in non-audio or frozen tracks, or when the path doesn't point at a valid audio file. C++ signature :  TWeakPtr&lt;TPyHandle&lt;AClip&gt;&gt; create_audio_clip(TPyHandle&lt;AGroupAndClipSlotBase&gt;,TString)</Doc>
<Value>Live.ClipSlot.ClipSlot.create_clip()<Description>Value</Description></Value>
<Doc>create_clip( (ClipSlot)arg1, (float)arg2) -&gt; Clip : Creates an empty clip with the given length in the slot. Throws an error when called on non-empty slots or slots in non-MIDI tracks. C++ signature :  TWeakPtr&lt;TPyHandle&lt;AClip&gt;&gt; create_clip(TPyHandle&lt;AGroupAndClipSlotBase&gt;,double)</Doc>
<Value>Live.ClipSlot.ClipSlot.delete_clip()<Description>Value</Description></Value>
<Doc>delete_clip( (ClipSlot)arg1) -&gt; None : Removes the clip contained in the slot. Raises an exception if the slot was empty. C++ signature :  void delete_clip(TPyHandle&lt;AGroupAndClipSlotBase&gt;)</Doc>
<Value>Live.ClipSlot.ClipSlot.duplicate_clip_to()<Description>Value</Description></Value>
<Doc>duplicate_clip_to( (ClipSlot)arg1, (ClipSlot)arg2) -&gt; None : Duplicates the slot's clip to the passed in target slot. Overrides the target's clip if it's not empty. Raises an exception if the (source) slot itself is empty, or if source and target have different track types (audio vs. MIDI). Also raises if the source or target slot is in a group track (so called group slot). C++ signature :  void duplicate_clip_to(TPyHandle&lt;AGroupAndClipSlotBase&gt;,TPyHandle&lt;AGroupAndClipSlotBase&gt;)</Doc>
<Value>Live.ClipSlot.ClipSlot.fire()<Description>Value</Description></Value>
<Doc>fire( (ClipSlot)arg1) -&gt; None : Fire a Clip if this Clipslot owns one, else trigger the stop button, if we have one. C++ signature :  void fire(TPyHandle&lt;AGroupAndClipSlotBase&gt;)fire( (ClipSlot)self [, (float)record_length=1.7976931348623157e+308 [, (int)launch_quantization=-2147483648 [, (bool)force_legato=False]]]) -&gt; None : If 'record_length' is passed, the clip will be refired after the given recording length.  Raises an error if the slot owns a clip. 'launch_quantization' determines the quantization of global transport that is applied overriding the value in the song. 'force_legato' will make the clip play inmediatelly. The playhead will be moved to keep the clip synchronized. C++ signature :  void fire(TPyHandle&lt;AGroupAndClipSlotBase&gt; [,double=1.7976931348623157e+308 [,int=-2147483648 [,bool=False]]])</Doc>
<Value>Live.ClipSlot.ClipSlot.has_clip<Description>Value</Description></Value>
<Doc>Returns true if this Clipslot owns a Clip.</Doc>
<Value>Live.ClipSlot.ClipSlot.has_clip_has_listener()<Description>Value</Description></Value>
<Doc>has_clip_has_listener( (ClipSlot)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "has_clip". C++ signature :  bool has_clip_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Value>Live.ClipSlot.ClipSlot.has_stop_button<Description>Value</Description></Value>
<Doc>Get/Set if this Clip has a stop button, which will, if fired, stop anyother Clip that is currently playing the Track we do belong to.</Doc>
<Value>Live.ClipSlot.ClipSlot.has_stop_button_has_listener()<Description>Value</Description></Value>
<Doc>has_stop_button_has_listener( (ClipSlot)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "has_stop_button". C++ signature :  bool has_stop_button_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Value>Live.ClipSlot.ClipSlot.is_group_slot<Description>Value</Description></Value>
<Doc>Returns whether this clip slot is a group track slot (group slot).</Doc>
<Value>Live.ClipSlot.ClipSlot.is_playing<Description>Value</Description></Value>
<Doc>Returns whether the clip associated with the slot is playing.</Doc>
<Value>Live.ClipSlot.ClipSlot.is_recording<Description>Value</Description></Value>
<Doc>Returns whether the clip associated with the slot is recording.</Doc>
<Value>Live.ClipSlot.ClipSlot.is_triggered<Description>Value</Description></Value>
<Doc>Const access to the triggering state of the clip slot.</Doc>
<Value>Live.ClipSlot.ClipSlot.is_triggered_has_listener()<Description>Value</Description></Value>
<Doc>is_triggered_has_listener( (ClipSlot)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_triggered". C++ signature :  bool is_triggered_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Value>Live.ClipSlot.ClipSlot.playing_status<Description>Value</Description></Value>
<Doc>Const access to the playing state of the clip slot.Can be either stopped, playing, or recording.</Doc>
<Value>Live.ClipSlot.ClipSlot.playing_status_has_listener()<Description>Value</Description></Value>
<Doc>playing_status_has_listener( (ClipSlot)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "playing_status". C++ signature :  bool playing_status_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Value>Live.ClipSlot.ClipSlot.remove_color_index_listener()<Description>Value</Description></Value>
<Doc>remove_color_index_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "color_index". C++ signature :  void remove_color_index_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Value>Live.ClipSlot.ClipSlot.remove_color_listener()<Description>Value</Description></Value>
<Doc>remove_color_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "color". C++ signature :  void remove_color_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Value>Live.ClipSlot.ClipSlot.remove_controls_other_clips_listener()<Description>Value</Description></Value>
<Doc>remove_controls_other_clips_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "controls_other_clips". C++ signature :  void remove_controls_other_clips_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Value>Live.ClipSlot.ClipSlot.remove_has_clip_listener()<Description>Value</Description></Value>
<Doc>remove_has_clip_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "has_clip". C++ signature :  void remove_has_clip_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Value>Live.ClipSlot.ClipSlot.remove_has_stop_button_listener()<Description>Value</Description></Value>
<Doc>remove_has_stop_button_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "has_stop_button". C++ signature :  void remove_has_stop_button_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Value>Live.ClipSlot.ClipSlot.remove_is_triggered_listener()<Description>Value</Description></Value>
<Doc>remove_is_triggered_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_triggered". C++ signature :  void remove_is_triggered_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Value>Live.ClipSlot.ClipSlot.remove_playing_status_listener()<Description>Value</Description></Value>
<Doc>remove_playing_status_listener( (ClipSlot)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "playing_status". C++ signature :  void remove_playing_status_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;,boost::python::api::object)</Doc>
<Value>Live.ClipSlot.ClipSlot.set_fire_button_state()<Description>Value</Description></Value>
<Doc>set_fire_button_state( (ClipSlot)arg1, (bool)arg2) -&gt; None : Set the clipslot's fire button state directly. Supports all launch modes. C++ signature :  void set_fire_button_state(TPyHandle&lt;AGroupAndClipSlotBase&gt;,bool)</Doc>
<Value>Live.ClipSlot.ClipSlot.stop()<Description>Value</Description></Value>
<Doc>stop( (ClipSlot)arg1) -&gt; None : Stop playing the contained Clip, if there is a Clip and its currently playing. C++ signature :  void stop(TPyHandle&lt;AGroupAndClipSlotBase&gt;)</Doc>
<Value>Live.ClipSlot.ClipSlot.will_record_on_start<Description>Value</Description></Value>
<Doc>returns true if the clip slot will record on being fired.</Doc>
<Class>Live.ClipSlot.ClipSlotPlayingState<Description>Class</Description></Class>
<Doc></Doc>
<Built-In>Live.ClipSlot.ClipSlotPlayingState.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.ClipSlot.ClipSlotPlayingState.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.ClipSlot.ClipSlotPlayingState.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.ClipSlot.ClipSlotPlayingState.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.ClipSlot.ClipSlotPlayingState.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.ClipSlot.ClipSlotPlayingState.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.ClipSlot.ClipSlotPlayingState.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.ClipSlot.ClipSlotPlayingState.name<Description>Value</Description></Value>
<Value>Live.ClipSlot.ClipSlotPlayingState.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.ClipSlot.ClipSlotPlayingState.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.ClipSlot.ClipSlotPlayingState.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.ClipSlot.ClipSlotPlayingState.recording<Description>Value</Description></Value>
<Doc></Doc>
<Value>Live.ClipSlot.ClipSlotPlayingState.started<Description>Value</Description></Value>
<Doc></Doc>
<Value>Live.ClipSlot.ClipSlotPlayingState.stopped<Description>Value</Description></Value>
<Doc></Doc>
<Value>Live.ClipSlot.ClipSlotPlayingState.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.ClipSlot.ClipSlotPlayingState.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Module>Live.CompressorDevice<Description>Module</Description></Module>
<Class>Live.CompressorDevice.CompressorDevice<Description>Class</Description></Class>
<Doc>This class represents a Compressor device.</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.add_available_input_routing_channels_listener()<Description>Built-In</Description></Built-In>
<Doc>add_available_input_routing_channels_listener( (CompressorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "available_input_routing_channels" has changed. C++ signature :  void add_available_input_routing_channels_listener(TCompressorDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.add_available_input_routing_types_listener()<Description>Built-In</Description></Built-In>
<Doc>add_available_input_routing_types_listener( (CompressorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "available_input_routing_types" has changed. C++ signature :  void add_available_input_routing_types_listener(TCompressorDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.add_input_routing_channel_listener()<Description>Built-In</Description></Built-In>
<Doc>add_input_routing_channel_listener( (CompressorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "input_routing_channel" has changed. C++ signature :  void add_input_routing_channel_listener(TCompressorDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.add_input_routing_type_listener()<Description>Built-In</Description></Built-In>
<Doc>add_input_routing_type_listener( (CompressorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "input_routing_type" has changed. C++ signature :  void add_input_routing_type_listener(TCompressorDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.add_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.add_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.add_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.add_name_listener()<Description>Built-In</Description></Built-In>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.add_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.available_input_routing_channels_has_listener()<Description>Built-In</Description></Built-In>
<Doc>available_input_routing_channels_has_listener( (CompressorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "available_input_routing_channels". C++ signature :  bool available_input_routing_channels_has_listener(TCompressorDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.available_input_routing_types_has_listener()<Description>Built-In</Description></Built-In>
<Doc>available_input_routing_types_has_listener( (CompressorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "available_input_routing_types". C++ signature :  bool available_input_routing_types_has_listener(TCompressorDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.input_routing_channel_has_listener()<Description>Built-In</Description></Built-In>
<Doc>input_routing_channel_has_listener( (CompressorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "input_routing_channel". C++ signature :  bool input_routing_channel_has_listener(TCompressorDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.input_routing_type_has_listener()<Description>Built-In</Description></Built-In>
<Doc>input_routing_type_has_listener( (CompressorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "input_routing_type". C++ signature :  bool input_routing_type_has_listener(TCompressorDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.is_active_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.latency_in_ms_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.latency_in_samples_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.name_has_listener()<Description>Built-In</Description></Built-In>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.parameters_has_listener()<Description>Built-In</Description></Built-In>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.remove_available_input_routing_channels_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_available_input_routing_channels_listener( (CompressorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "available_input_routing_channels". C++ signature :  void remove_available_input_routing_channels_listener(TCompressorDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.remove_available_input_routing_types_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_available_input_routing_types_listener( (CompressorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "available_input_routing_types". C++ signature :  void remove_available_input_routing_types_listener(TCompressorDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.remove_input_routing_channel_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_input_routing_channel_listener( (CompressorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "input_routing_channel". C++ signature :  void remove_input_routing_channel_listener(TCompressorDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.remove_input_routing_type_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_input_routing_type_listener( (CompressorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "input_routing_type". C++ signature :  void remove_input_routing_type_listener(TCompressorDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.remove_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.remove_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.remove_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.remove_name_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.remove_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.store_chosen_bank()<Description>Built-In</Description></Built-In>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.View<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Value>Live.CompressorDevice.CompressorDevice.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.CompressorDevice.CompressorDevice._live_ptr<Description>Value</Description></Value>
<Value>Live.CompressorDevice.CompressorDevice.add_available_input_routing_channels_listener()<Description>Value</Description></Value>
<Doc>add_available_input_routing_channels_listener( (CompressorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "available_input_routing_channels" has changed. C++ signature :  void add_available_input_routing_channels_listener(TCompressorDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.add_available_input_routing_types_listener()<Description>Value</Description></Value>
<Doc>add_available_input_routing_types_listener( (CompressorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "available_input_routing_types" has changed. C++ signature :  void add_available_input_routing_types_listener(TCompressorDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.add_input_routing_channel_listener()<Description>Value</Description></Value>
<Doc>add_input_routing_channel_listener( (CompressorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "input_routing_channel" has changed. C++ signature :  void add_input_routing_channel_listener(TCompressorDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.add_input_routing_type_listener()<Description>Value</Description></Value>
<Doc>add_input_routing_type_listener( (CompressorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "input_routing_type" has changed. C++ signature :  void add_input_routing_type_listener(TCompressorDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.add_is_active_listener()<Description>Value</Description></Value>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.add_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.add_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.add_name_listener()<Description>Value</Description></Value>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.add_parameters_listener()<Description>Value</Description></Value>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.available_input_routing_channels<Description>Value</Description></Value>
<Doc>Return a list of source channels for input routing in the sidechain.</Doc>
<Value>Live.CompressorDevice.CompressorDevice.available_input_routing_channels_has_listener()<Description>Value</Description></Value>
<Doc>available_input_routing_channels_has_listener( (CompressorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "available_input_routing_channels". C++ signature :  bool available_input_routing_channels_has_listener(TCompressorDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.available_input_routing_types<Description>Value</Description></Value>
<Doc>Return a list of source types for input routing in the sidechain.</Doc>
<Value>Live.CompressorDevice.CompressorDevice.available_input_routing_types_has_listener()<Description>Value</Description></Value>
<Doc>available_input_routing_types_has_listener( (CompressorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "available_input_routing_types". C++ signature :  bool available_input_routing_types_has_listener(TCompressorDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.can_have_chains<Description>Value</Description></Value>
<Doc>Returns true if the device is a rack.</Doc>
<Value>Live.CompressorDevice.CompressorDevice.can_have_drum_pads<Description>Value</Description></Value>
<Doc>Returns true if the device is a drum rack.</Doc>
<Value>Live.CompressorDevice.CompressorDevice.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the Device.</Doc>
<Value>Live.CompressorDevice.CompressorDevice.class_display_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class name as displayed in Live's browser and device chain</Doc>
<Value>Live.CompressorDevice.CompressorDevice.class_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class.</Doc>
<Value>Live.CompressorDevice.CompressorDevice.input_routing_channel<Description>Value</Description></Value>
<Doc>Get and set the current source channel for input routing in the sidechain.Raises ValueError if the channel isn't one of the current values inavailable_input_routing_channels.</Doc>
<Value>Live.CompressorDevice.CompressorDevice.input_routing_channel_has_listener()<Description>Value</Description></Value>
<Doc>input_routing_channel_has_listener( (CompressorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "input_routing_channel". C++ signature :  bool input_routing_channel_has_listener(TCompressorDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.input_routing_type<Description>Value</Description></Value>
<Doc>Get and set the current source type for input routing in the sidechain.Raises ValueError if the type isn't one of the current values inavailable_input_routing_types.</Doc>
<Value>Live.CompressorDevice.CompressorDevice.input_routing_type_has_listener()<Description>Value</Description></Value>
<Doc>input_routing_type_has_listener( (CompressorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "input_routing_type". C++ signature :  bool input_routing_type_has_listener(TCompressorDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.is_active<Description>Value</Description></Value>
<Doc>Return const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off.</Doc>
<Value>Live.CompressorDevice.CompressorDevice.is_active_has_listener()<Description>Value</Description></Value>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.latency_in_ms<Description>Value</Description></Value>
<Doc>Returns the latency of the device in ms.</Doc>
<Value>Live.CompressorDevice.CompressorDevice.latency_in_ms_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.latency_in_samples<Description>Value</Description></Value>
<Doc>Returns the latency of the device in samples.</Doc>
<Value>Live.CompressorDevice.CompressorDevice.latency_in_samples_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.name<Description>Value</Description></Value>
<Doc>Return access to the name of the device.</Doc>
<Value>Live.CompressorDevice.CompressorDevice.name_has_listener()<Description>Value</Description></Value>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.parameters<Description>Value</Description></Value>
<Doc>Const access to the list of available automatable parameters for this device.</Doc>
<Value>Live.CompressorDevice.CompressorDevice.parameters_has_listener()<Description>Value</Description></Value>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.remove_available_input_routing_channels_listener()<Description>Value</Description></Value>
<Doc>remove_available_input_routing_channels_listener( (CompressorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "available_input_routing_channels". C++ signature :  void remove_available_input_routing_channels_listener(TCompressorDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.remove_available_input_routing_types_listener()<Description>Value</Description></Value>
<Doc>remove_available_input_routing_types_listener( (CompressorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "available_input_routing_types". C++ signature :  void remove_available_input_routing_types_listener(TCompressorDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.remove_input_routing_channel_listener()<Description>Value</Description></Value>
<Doc>remove_input_routing_channel_listener( (CompressorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "input_routing_channel". C++ signature :  void remove_input_routing_channel_listener(TCompressorDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.remove_input_routing_type_listener()<Description>Value</Description></Value>
<Doc>remove_input_routing_type_listener( (CompressorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "input_routing_type". C++ signature :  void remove_input_routing_type_listener(TCompressorDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.remove_is_active_listener()<Description>Value</Description></Value>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.remove_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.remove_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.remove_name_listener()<Description>Value</Description></Value>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.remove_parameters_listener()<Description>Value</Description></Value>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.store_chosen_bank()<Description>Value</Description></Value>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.type<Description>Value</Description></Value>
<Doc>Return the type of the device.</Doc>
<Value>Live.CompressorDevice.CompressorDevice.view<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Class>Live.CompressorDevice.CompressorDevice.View<Description>Class</Description></Class>
<Doc>Representing the view aspects of a device.</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.View.add_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.View.is_collapsed_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.CompressorDevice.CompressorDevice.View.remove_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.View.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.CompressorDevice.CompressorDevice.View._live_ptr<Description>Value</Description></Value>
<Value>Live.CompressorDevice.CompressorDevice.View.add_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.View.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the View.</Doc>
<Value>Live.CompressorDevice.CompressorDevice.View.is_collapsed<Description>Value</Description></Value>
<Doc>Get/Set/Listen if the device is shown collapsed in the device chain.</Doc>
<Value>Live.CompressorDevice.CompressorDevice.View.is_collapsed_has_listener()<Description>Value</Description></Value>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.CompressorDevice.CompressorDevice.View.remove_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Module>Live.Conversions<Description>Module</Description></Module>
<Built-In>Live.Conversions.audio_to_midi_clip()<Description>Built-In</Description></Built-In>
<Doc>audio_to_midi_clip( (Song)song, (Clip)audio_clip, (int)audio_to_midi_type) -&gt; None : Creates a MIDI clip in a new MIDI track with the notes extracted from the given audio_clip. The `audio_to_midi_type` decides which algorithm is used in the process. Raises error when called with an inconvertible clip or invalid `audio_to_midi_type`. C++ signature :  void audio_to_midi_clip(TPyHandle&lt;ASong&gt;,TPyHandle&lt;AClip&gt;,int)</Doc>
<Built-In>Live.Conversions.create_drum_rack_from_audio_clip()<Description>Built-In</Description></Built-In>
<Doc>create_drum_rack_from_audio_clip( (Song)song, (Clip)audio_clip) -&gt; None : Creates a new track with a drum rack with a simpler on the first pad with the specified audio clip. C++ signature :  void create_drum_rack_from_audio_clip(TPyHandle&lt;ASong&gt;,TPyHandle&lt;AClip&gt;)</Doc>
<Built-In>Live.Conversions.create_midi_track_from_drum_pad()<Description>Built-In</Description></Built-In>
<Doc>create_midi_track_from_drum_pad( (Song)song, (DrumPad)drum_pad) -&gt; None : Creates a new Midi track containing the specified Drum Pad's device chain. C++ signature :  void create_midi_track_from_drum_pad(TPyHandle&lt;ASong&gt;,TPyHandle&lt;ADrumGroupDevicePad&gt;)</Doc>
<Built-In>Live.Conversions.create_midi_track_with_simpler()<Description>Built-In</Description></Built-In>
<Doc>create_midi_track_with_simpler( (Song)song, (Clip)audio_clip) -&gt; None : Creates a new Midi track with a simpler including the specified audio clip. C++ signature :  void create_midi_track_with_simpler(TPyHandle&lt;ASong&gt;,TPyHandle&lt;AClip&gt;)</Doc>
<Built-In>Live.Conversions.is_convertible_to_midi()<Description>Built-In</Description></Built-In>
<Doc>is_convertible_to_midi( (Song)song, (Clip)audio_clip) -&gt; bool : Returns whether `audio_clip` can be converted to MIDI. Raises error when called with a MIDI clip C++ signature :  bool is_convertible_to_midi(TPyHandle&lt;ASong&gt;,TPyHandle&lt;AClip&gt;)</Doc>
<Built-In>Live.Conversions.move_devices_on_track_to_new_drum_rack_pad()<Description>Built-In</Description></Built-In>
<Doc>move_devices_on_track_to_new_drum_rack_pad( (Song)song, (int)track_index) -&gt; LomObject : Moves the entire device chain of the track according to the track index onto the C1 (note 36) drum pad of a new drum rack in a new track.If the track associated with the track index does not contain any devices nothing changes (i.e. a new track and new drum rack are not created). C++ signature :  TWeakPtr&lt;TPyHandleBase&gt; move_devices_on_track_to_new_drum_rack_pad(TPyHandle&lt;ASong&gt;,int)</Doc>
<Built-In>Live.Conversions.sliced_simpler_to_drum_rack()<Description>Built-In</Description></Built-In>
<Doc>sliced_simpler_to_drum_rack( (Song)song, (SimplerDevice)simpler) -&gt; None : Converts the Simpler into a Drum Rack, assigning each slice to a drum pad. Calling it on a non-sliced simpler raises an error. C++ signature :  void sliced_simpler_to_drum_rack(TPyHandle&lt;ASong&gt;,TSimplerDevicePyHandle)</Doc>
<Class>Live.Conversions.AudioToMidiType<Description>Class</Description></Class>
<Built-In>Live.Conversions.AudioToMidiType.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Conversions.AudioToMidiType.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Conversions.AudioToMidiType.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.Conversions.AudioToMidiType.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.Conversions.AudioToMidiType.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.Conversions.AudioToMidiType.drums_to_midi<Description>Value</Description></Value>
<Value>Live.Conversions.AudioToMidiType.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Conversions.AudioToMidiType.harmony_to_midi<Description>Value</Description></Value>
<Value>Live.Conversions.AudioToMidiType.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.Conversions.AudioToMidiType.melody_to_midi<Description>Value</Description></Value>
<Value>Live.Conversions.AudioToMidiType.name<Description>Value</Description></Value>
<Value>Live.Conversions.AudioToMidiType.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.Conversions.AudioToMidiType.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.Conversions.AudioToMidiType.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.Conversions.AudioToMidiType.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.Conversions.AudioToMidiType.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Module>Live.Device<Description>Module</Description></Module>
<Class>Live.Device.ATimeableValueVector<Description>Class</Description></Class>
<Built-In>Live.Device.ATimeableValueVector.append()<Description>Built-In</Description></Built-In>
<Doc>append( (ATimeableValueVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;TWeakPtr&lt;ATimeableValue&gt;, std::__1::allocator&lt;TWeakPtr&lt;ATimeableValue&gt;&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Built-In>Live.Device.ATimeableValueVector.extend()<Description>Built-In</Description></Built-In>
<Doc>extend( (ATimeableValueVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;TWeakPtr&lt;ATimeableValue&gt;, std::__1::allocator&lt;TWeakPtr&lt;ATimeableValue&gt;&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Device.ATimeableValueVector.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Device.ATimeableValueVector.append()<Description>Value</Description></Value>
<Doc>append( (ATimeableValueVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;TWeakPtr&lt;ATimeableValue&gt;, std::__1::allocator&lt;TWeakPtr&lt;ATimeableValue&gt;&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Device.ATimeableValueVector.extend()<Description>Value</Description></Value>
<Doc>extend( (ATimeableValueVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;TWeakPtr&lt;ATimeableValue&gt;, std::__1::allocator&lt;TWeakPtr&lt;ATimeableValue&gt;&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Class>Live.Device.Device<Description>Class</Description></Class>
<Doc>This class represents a MIDI or Audio DSP-Device in Live.</Doc>
<Built-In>Live.Device.Device.add_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Device.Device.add_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Device.Device.add_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Device.Device.add_name_listener()<Description>Built-In</Description></Built-In>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Device.Device.add_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Device.Device.is_active_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Device.Device.latency_in_ms_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Device.Device.latency_in_samples_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Device.Device.name_has_listener()<Description>Built-In</Description></Built-In>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Device.Device.parameters_has_listener()<Description>Built-In</Description></Built-In>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Device.Device.remove_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Device.Device.remove_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Device.Device.remove_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Device.Device.remove_name_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Device.Device.remove_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Device.Device.store_chosen_bank()<Description>Built-In</Description></Built-In>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Value>Live.Device.Device.View<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Value>Live.Device.Device.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Device.Device._live_ptr<Description>Value</Description></Value>
<Value>Live.Device.Device.add_is_active_listener()<Description>Value</Description></Value>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Device.Device.add_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Device.Device.add_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Device.Device.add_name_listener()<Description>Value</Description></Value>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Device.Device.add_parameters_listener()<Description>Value</Description></Value>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Device.Device.can_have_chains<Description>Value</Description></Value>
<Doc>Returns true if the device is a rack.</Doc>
<Value>Live.Device.Device.can_have_drum_pads<Description>Value</Description></Value>
<Doc>Returns true if the device is a drum rack.</Doc>
<Value>Live.Device.Device.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the Device.</Doc>
<Value>Live.Device.Device.class_display_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class name as displayed in Live's browser and device chain</Doc>
<Value>Live.Device.Device.class_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class.</Doc>
<Value>Live.Device.Device.is_active<Description>Value</Description></Value>
<Doc>Return const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off.</Doc>
<Value>Live.Device.Device.is_active_has_listener()<Description>Value</Description></Value>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Device.Device.latency_in_ms<Description>Value</Description></Value>
<Doc>Returns the latency of the device in ms.</Doc>
<Value>Live.Device.Device.latency_in_ms_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Device.Device.latency_in_samples<Description>Value</Description></Value>
<Doc>Returns the latency of the device in samples.</Doc>
<Value>Live.Device.Device.latency_in_samples_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Device.Device.name<Description>Value</Description></Value>
<Doc>Return access to the name of the device.</Doc>
<Value>Live.Device.Device.name_has_listener()<Description>Value</Description></Value>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Device.Device.parameters<Description>Value</Description></Value>
<Doc>Const access to the list of available automatable parameters for this device.</Doc>
<Value>Live.Device.Device.parameters_has_listener()<Description>Value</Description></Value>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Device.Device.remove_is_active_listener()<Description>Value</Description></Value>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Device.Device.remove_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Device.Device.remove_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Device.Device.remove_name_listener()<Description>Value</Description></Value>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Device.Device.remove_parameters_listener()<Description>Value</Description></Value>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Device.Device.store_chosen_bank()<Description>Value</Description></Value>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Value>Live.Device.Device.type<Description>Value</Description></Value>
<Doc>Return the type of the device.</Doc>
<Value>Live.Device.Device.view<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Class>Live.Device.Device.View<Description>Class</Description></Class>
<Doc>Representing the view aspects of a device.</Doc>
<Built-In>Live.Device.Device.View.add_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Device.Device.View.is_collapsed_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Device.Device.View.remove_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Device.Device.View.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Device.Device.View._live_ptr<Description>Value</Description></Value>
<Value>Live.Device.Device.View.add_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Device.Device.View.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the View.</Doc>
<Value>Live.Device.Device.View.is_collapsed<Description>Value</Description></Value>
<Doc>Get/Set/Listen if the device is shown collapsed in the device chain.</Doc>
<Value>Live.Device.Device.View.is_collapsed_has_listener()<Description>Value</Description></Value>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Device.Device.View.remove_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Class>Live.Device.DeviceType<Description>Class</Description></Class>
<Doc>The type of the device.</Doc>
<Built-In>Live.Device.DeviceType.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Device.DeviceType.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Device.DeviceType.audio_effect<Description>Value</Description></Value>
<Doc>The type of the device.</Doc>
<Value>Live.Device.DeviceType.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.Device.DeviceType.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.Device.DeviceType.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.Device.DeviceType.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Device.DeviceType.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.Device.DeviceType.instrument<Description>Value</Description></Value>
<Doc>The type of the device.</Doc>
<Value>Live.Device.DeviceType.midi_effect<Description>Value</Description></Value>
<Doc>The type of the device.</Doc>
<Value>Live.Device.DeviceType.name<Description>Value</Description></Value>
<Value>Live.Device.DeviceType.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.Device.DeviceType.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.Device.DeviceType.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.Device.DeviceType.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.Device.DeviceType.undefined<Description>Value</Description></Value>
<Doc>The type of the device.</Doc>
<Value>Live.Device.DeviceType.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Module>Live.DeviceIO<Description>Module</Description></Module>
<Class>Live.DeviceIO.DeviceIO<Description>Class</Description></Class>
<Doc>This class represents a specific input or output bus of a device.</Doc>
<Built-In>Live.DeviceIO.DeviceIO.add_available_routing_channels_listener()<Description>Built-In</Description></Built-In>
<Doc>add_available_routing_channels_listener( (DeviceIO)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "available_routing_channels" has changed. C++ signature :  void add_available_routing_channels_listener(TPyHandle&lt;AMxDRoutable&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DeviceIO.DeviceIO.add_available_routing_types_listener()<Description>Built-In</Description></Built-In>
<Doc>add_available_routing_types_listener( (DeviceIO)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "available_routing_types" has changed. C++ signature :  void add_available_routing_types_listener(TPyHandle&lt;AMxDRoutable&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DeviceIO.DeviceIO.add_routing_channel_listener()<Description>Built-In</Description></Built-In>
<Doc>add_routing_channel_listener( (DeviceIO)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "routing_channel" has changed. C++ signature :  void add_routing_channel_listener(TPyHandle&lt;AMxDRoutable&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DeviceIO.DeviceIO.add_routing_type_listener()<Description>Built-In</Description></Built-In>
<Doc>add_routing_type_listener( (DeviceIO)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "routing_type" has changed. C++ signature :  void add_routing_type_listener(TPyHandle&lt;AMxDRoutable&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DeviceIO.DeviceIO.available_routing_channels_has_listener()<Description>Built-In</Description></Built-In>
<Doc>available_routing_channels_has_listener( (DeviceIO)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "available_routing_channels". C++ signature :  bool available_routing_channels_has_listener(TPyHandle&lt;AMxDRoutable&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DeviceIO.DeviceIO.available_routing_types_has_listener()<Description>Built-In</Description></Built-In>
<Doc>available_routing_types_has_listener( (DeviceIO)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "available_routing_types". C++ signature :  bool available_routing_types_has_listener(TPyHandle&lt;AMxDRoutable&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DeviceIO.DeviceIO.remove_available_routing_channels_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_available_routing_channels_listener( (DeviceIO)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "available_routing_channels". C++ signature :  void remove_available_routing_channels_listener(TPyHandle&lt;AMxDRoutable&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DeviceIO.DeviceIO.remove_available_routing_types_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_available_routing_types_listener( (DeviceIO)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "available_routing_types". C++ signature :  void remove_available_routing_types_listener(TPyHandle&lt;AMxDRoutable&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DeviceIO.DeviceIO.remove_routing_channel_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_routing_channel_listener( (DeviceIO)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "routing_channel". C++ signature :  void remove_routing_channel_listener(TPyHandle&lt;AMxDRoutable&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DeviceIO.DeviceIO.remove_routing_type_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_routing_type_listener( (DeviceIO)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "routing_type". C++ signature :  void remove_routing_type_listener(TPyHandle&lt;AMxDRoutable&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DeviceIO.DeviceIO.routing_channel_has_listener()<Description>Built-In</Description></Built-In>
<Doc>routing_channel_has_listener( (DeviceIO)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "routing_channel". C++ signature :  bool routing_channel_has_listener(TPyHandle&lt;AMxDRoutable&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DeviceIO.DeviceIO.routing_type_has_listener()<Description>Built-In</Description></Built-In>
<Doc>routing_type_has_listener( (DeviceIO)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "routing_type". C++ signature :  bool routing_type_has_listener(TPyHandle&lt;AMxDRoutable&gt;,boost::python::api::object)</Doc>
<Value>Live.DeviceIO.DeviceIO.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.DeviceIO.DeviceIO._live_ptr<Description>Value</Description></Value>
<Value>Live.DeviceIO.DeviceIO.add_available_routing_channels_listener()<Description>Value</Description></Value>
<Doc>add_available_routing_channels_listener( (DeviceIO)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "available_routing_channels" has changed. C++ signature :  void add_available_routing_channels_listener(TPyHandle&lt;AMxDRoutable&gt;,boost::python::api::object)</Doc>
<Value>Live.DeviceIO.DeviceIO.add_available_routing_types_listener()<Description>Value</Description></Value>
<Doc>add_available_routing_types_listener( (DeviceIO)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "available_routing_types" has changed. C++ signature :  void add_available_routing_types_listener(TPyHandle&lt;AMxDRoutable&gt;,boost::python::api::object)</Doc>
<Value>Live.DeviceIO.DeviceIO.add_routing_channel_listener()<Description>Value</Description></Value>
<Doc>add_routing_channel_listener( (DeviceIO)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "routing_channel" has changed. C++ signature :  void add_routing_channel_listener(TPyHandle&lt;AMxDRoutable&gt;,boost::python::api::object)</Doc>
<Value>Live.DeviceIO.DeviceIO.add_routing_type_listener()<Description>Value</Description></Value>
<Doc>add_routing_type_listener( (DeviceIO)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "routing_type" has changed. C++ signature :  void add_routing_type_listener(TPyHandle&lt;AMxDRoutable&gt;,boost::python::api::object)</Doc>
<Value>Live.DeviceIO.DeviceIO.available_routing_channels<Description>Value</Description></Value>
<Doc>Return a list of channels for this IO endpoint.</Doc>
<Value>Live.DeviceIO.DeviceIO.available_routing_channels_has_listener()<Description>Value</Description></Value>
<Doc>available_routing_channels_has_listener( (DeviceIO)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "available_routing_channels". C++ signature :  bool available_routing_channels_has_listener(TPyHandle&lt;AMxDRoutable&gt;,boost::python::api::object)</Doc>
<Value>Live.DeviceIO.DeviceIO.available_routing_types<Description>Value</Description></Value>
<Doc>Return a list of available routing types for this IO endpoint.</Doc>
<Value>Live.DeviceIO.DeviceIO.available_routing_types_has_listener()<Description>Value</Description></Value>
<Doc>available_routing_types_has_listener( (DeviceIO)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "available_routing_types". C++ signature :  bool available_routing_types_has_listener(TPyHandle&lt;AMxDRoutable&gt;,boost::python::api::object)</Doc>
<Value>Live.DeviceIO.DeviceIO.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the device IO.</Doc>
<Value>Live.DeviceIO.DeviceIO.default_external_routing_channel_is_none<Description>Value</Description></Value>
<Doc>Get and set whether the default routing channel for External routing types is none.</Doc>
<Value>Live.DeviceIO.DeviceIO.remove_available_routing_channels_listener()<Description>Value</Description></Value>
<Doc>remove_available_routing_channels_listener( (DeviceIO)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "available_routing_channels". C++ signature :  void remove_available_routing_channels_listener(TPyHandle&lt;AMxDRoutable&gt;,boost::python::api::object)</Doc>
<Value>Live.DeviceIO.DeviceIO.remove_available_routing_types_listener()<Description>Value</Description></Value>
<Doc>remove_available_routing_types_listener( (DeviceIO)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "available_routing_types". C++ signature :  void remove_available_routing_types_listener(TPyHandle&lt;AMxDRoutable&gt;,boost::python::api::object)</Doc>
<Value>Live.DeviceIO.DeviceIO.remove_routing_channel_listener()<Description>Value</Description></Value>
<Doc>remove_routing_channel_listener( (DeviceIO)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "routing_channel". C++ signature :  void remove_routing_channel_listener(TPyHandle&lt;AMxDRoutable&gt;,boost::python::api::object)</Doc>
<Value>Live.DeviceIO.DeviceIO.remove_routing_type_listener()<Description>Value</Description></Value>
<Doc>remove_routing_type_listener( (DeviceIO)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "routing_type". C++ signature :  void remove_routing_type_listener(TPyHandle&lt;AMxDRoutable&gt;,boost::python::api::object)</Doc>
<Value>Live.DeviceIO.DeviceIO.routing_channel<Description>Value</Description></Value>
<Doc>Get and set the current routing channel.Raises ValueError if the channel isn't one of the current values inavailable_routing_channels.</Doc>
<Value>Live.DeviceIO.DeviceIO.routing_channel_has_listener()<Description>Value</Description></Value>
<Doc>routing_channel_has_listener( (DeviceIO)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "routing_channel". C++ signature :  bool routing_channel_has_listener(TPyHandle&lt;AMxDRoutable&gt;,boost::python::api::object)</Doc>
<Value>Live.DeviceIO.DeviceIO.routing_type<Description>Value</Description></Value>
<Doc>Get and set the current routing type.Raises ValueError if the type isn't one of the current values inavailable_routing_types.</Doc>
<Value>Live.DeviceIO.DeviceIO.routing_type_has_listener()<Description>Value</Description></Value>
<Doc>routing_type_has_listener( (DeviceIO)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "routing_type". C++ signature :  bool routing_type_has_listener(TPyHandle&lt;AMxDRoutable&gt;,boost::python::api::object)</Doc>
<Module>Live.DeviceParameter<Description>Module</Description></Module>
<Class>Live.DeviceParameter.AutomationState<Description>Class</Description></Class>
<Built-In>Live.DeviceParameter.AutomationState.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.DeviceParameter.AutomationState.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.DeviceParameter.AutomationState.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.DeviceParameter.AutomationState.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.DeviceParameter.AutomationState.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.DeviceParameter.AutomationState.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.DeviceParameter.AutomationState.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.DeviceParameter.AutomationState.name<Description>Value</Description></Value>
<Value>Live.DeviceParameter.AutomationState.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.DeviceParameter.AutomationState.none<Description>Value</Description></Value>
<Value>Live.DeviceParameter.AutomationState.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.DeviceParameter.AutomationState.overridden<Description>Value</Description></Value>
<Value>Live.DeviceParameter.AutomationState.playing<Description>Value</Description></Value>
<Value>Live.DeviceParameter.AutomationState.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.DeviceParameter.AutomationState.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.DeviceParameter.AutomationState.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.DeviceParameter.DeviceParameter<Description>Class</Description></Class>
<Doc>This class represents a (automatable) parameter within a MIDI orAudio DSP-Device.</Doc>
<Built-In>Live.DeviceParameter.DeviceParameter.add_automation_state_listener()<Description>Built-In</Description></Built-In>
<Doc>add_automation_state_listener( (DeviceParameter)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "automation_state" has changed. C++ signature :  void add_automation_state_listener(TPyHandle&lt;ATimeableValue&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DeviceParameter.DeviceParameter.add_name_listener()<Description>Built-In</Description></Built-In>
<Doc>add_name_listener( (DeviceParameter)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ATimeableValue&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DeviceParameter.DeviceParameter.add_state_listener()<Description>Built-In</Description></Built-In>
<Doc>add_state_listener( (DeviceParameter)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "state" has changed. C++ signature :  void add_state_listener(TPyHandle&lt;ATimeableValue&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DeviceParameter.DeviceParameter.add_value_listener()<Description>Built-In</Description></Built-In>
<Doc>add_value_listener( (DeviceParameter)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "value" has changed. C++ signature :  void add_value_listener(TPyHandle&lt;ATimeableValue&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DeviceParameter.DeviceParameter.automation_state_has_listener()<Description>Built-In</Description></Built-In>
<Doc>automation_state_has_listener( (DeviceParameter)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "automation_state". C++ signature :  bool automation_state_has_listener(TPyHandle&lt;ATimeableValue&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DeviceParameter.DeviceParameter.begin_gesture()<Description>Built-In</Description></Built-In>
<Doc>begin_gesture( (DeviceParameter)arg1) -&gt; None : Notify the begin of a modification of the parameter, when a sequence of modifications have to be consider a consistent group -- for Sexample, when recording automation. C++ signature :  void begin_gesture(TPyHandle&lt;ATimeableValue&gt;)</Doc>
<Built-In>Live.DeviceParameter.DeviceParameter.end_gesture()<Description>Built-In</Description></Built-In>
<Doc>end_gesture( (DeviceParameter)arg1) -&gt; None : Notify the end of a modification of the parameter. See begin_gesture. C++ signature :  void end_gesture(TPyHandle&lt;ATimeableValue&gt;)</Doc>
<Built-In>Live.DeviceParameter.DeviceParameter.name_has_listener()<Description>Built-In</Description></Built-In>
<Doc>name_has_listener( (DeviceParameter)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ATimeableValue&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DeviceParameter.DeviceParameter.re_enable_automation()<Description>Built-In</Description></Built-In>
<Doc>re_enable_automation( (DeviceParameter)arg1) -&gt; None : Reenable automation for this parameter. C++ signature :  void re_enable_automation(TPyHandle&lt;ATimeableValue&gt;)</Doc>
<Built-In>Live.DeviceParameter.DeviceParameter.remove_automation_state_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_automation_state_listener( (DeviceParameter)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "automation_state". C++ signature :  void remove_automation_state_listener(TPyHandle&lt;ATimeableValue&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DeviceParameter.DeviceParameter.remove_name_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_name_listener( (DeviceParameter)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ATimeableValue&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DeviceParameter.DeviceParameter.remove_state_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_state_listener( (DeviceParameter)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "state". C++ signature :  void remove_state_listener(TPyHandle&lt;ATimeableValue&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DeviceParameter.DeviceParameter.remove_value_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_value_listener( (DeviceParameter)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "value". C++ signature :  void remove_value_listener(TPyHandle&lt;ATimeableValue&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DeviceParameter.DeviceParameter.state_has_listener()<Description>Built-In</Description></Built-In>
<Doc>state_has_listener( (DeviceParameter)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "state". C++ signature :  bool state_has_listener(TPyHandle&lt;ATimeableValue&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DeviceParameter.DeviceParameter.str_for_value()<Description>Built-In</Description></Built-In>
<Doc>str_for_value( (DeviceParameter)arg1, (float)arg2) -&gt; str : Return a string representation of the given value. To be used for display purposes only.  This value can include characters like 'db' or 'hz', depending on the type of the parameter. C++ signature :  TString str_for_value(TPyHandle&lt;ATimeableValue&gt;,float)</Doc>
<Built-In>Live.DeviceParameter.DeviceParameter.value_has_listener()<Description>Built-In</Description></Built-In>
<Doc>value_has_listener( (DeviceParameter)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "value". C++ signature :  bool value_has_listener(TPyHandle&lt;ATimeableValue&gt;,boost::python::api::object)</Doc>
<Value>Live.DeviceParameter.DeviceParameter.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.DeviceParameter.DeviceParameter._live_ptr<Description>Value</Description></Value>
<Value>Live.DeviceParameter.DeviceParameter.add_automation_state_listener()<Description>Value</Description></Value>
<Doc>add_automation_state_listener( (DeviceParameter)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "automation_state" has changed. C++ signature :  void add_automation_state_listener(TPyHandle&lt;ATimeableValue&gt;,boost::python::api::object)</Doc>
<Value>Live.DeviceParameter.DeviceParameter.add_name_listener()<Description>Value</Description></Value>
<Doc>add_name_listener( (DeviceParameter)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ATimeableValue&gt;,boost::python::api::object)</Doc>
<Value>Live.DeviceParameter.DeviceParameter.add_state_listener()<Description>Value</Description></Value>
<Doc>add_state_listener( (DeviceParameter)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "state" has changed. C++ signature :  void add_state_listener(TPyHandle&lt;ATimeableValue&gt;,boost::python::api::object)</Doc>
<Value>Live.DeviceParameter.DeviceParameter.add_value_listener()<Description>Value</Description></Value>
<Doc>add_value_listener( (DeviceParameter)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "value" has changed. C++ signature :  void add_value_listener(TPyHandle&lt;ATimeableValue&gt;,boost::python::api::object)</Doc>
<Value>Live.DeviceParameter.DeviceParameter.automation_state<Description>Value</Description></Value>
<Doc>Returns state of type AutomationState.</Doc>
<Value>Live.DeviceParameter.DeviceParameter.automation_state_has_listener()<Description>Value</Description></Value>
<Doc>automation_state_has_listener( (DeviceParameter)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "automation_state". C++ signature :  bool automation_state_has_listener(TPyHandle&lt;ATimeableValue&gt;,boost::python::api::object)</Doc>
<Value>Live.DeviceParameter.DeviceParameter.begin_gesture()<Description>Value</Description></Value>
<Doc>begin_gesture( (DeviceParameter)arg1) -&gt; None : Notify the begin of a modification of the parameter, when a sequence of modifications have to be consider a consistent group -- for Sexample, when recording automation. C++ signature :  void begin_gesture(TPyHandle&lt;ATimeableValue&gt;)</Doc>
<Value>Live.DeviceParameter.DeviceParameter.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the device parameter.</Doc>
<Value>Live.DeviceParameter.DeviceParameter.default_value<Description>Value</Description></Value>
<Doc>Return the default value for this parameter.  A Default value is onlyavailable for non-quantized parameter types (see 'is_quantized').</Doc>
<Value>Live.DeviceParameter.DeviceParameter.end_gesture()<Description>Value</Description></Value>
<Doc>end_gesture( (DeviceParameter)arg1) -&gt; None : Notify the end of a modification of the parameter. See begin_gesture. C++ signature :  void end_gesture(TPyHandle&lt;ATimeableValue&gt;)</Doc>
<Value>Live.DeviceParameter.DeviceParameter.is_enabled<Description>Value</Description></Value>
<Doc>Returns false if the parameter has been macro mapped or disabled by Max.</Doc>
<Value>Live.DeviceParameter.DeviceParameter.is_quantized<Description>Value</Description></Value>
<Doc>Returns True, if this value is a boolean or integer like switch.Non quantized values are continues float values.</Doc>
<Value>Live.DeviceParameter.DeviceParameter.max<Description>Value</Description></Value>
<Doc>Returns const access to the upper value of the allowed range forthis parameter</Doc>
<Value>Live.DeviceParameter.DeviceParameter.min<Description>Value</Description></Value>
<Doc>Returns const access to the lower value of the allowed range forthis parameter</Doc>
<Value>Live.DeviceParameter.DeviceParameter.name<Description>Value</Description></Value>
<Doc>Returns const access the name of this parameter, as visible in Livesautomation choosers.</Doc>
<Value>Live.DeviceParameter.DeviceParameter.name_has_listener()<Description>Value</Description></Value>
<Doc>name_has_listener( (DeviceParameter)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ATimeableValue&gt;,boost::python::api::object)</Doc>
<Value>Live.DeviceParameter.DeviceParameter.original_name<Description>Value</Description></Value>
<Doc>Returns const access the original name of this parameter, unaffected ofany renamings.</Doc>
<Value>Live.DeviceParameter.DeviceParameter.re_enable_automation()<Description>Value</Description></Value>
<Doc>re_enable_automation( (DeviceParameter)arg1) -&gt; None : Reenable automation for this parameter. C++ signature :  void re_enable_automation(TPyHandle&lt;ATimeableValue&gt;)</Doc>
<Value>Live.DeviceParameter.DeviceParameter.remove_automation_state_listener()<Description>Value</Description></Value>
<Doc>remove_automation_state_listener( (DeviceParameter)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "automation_state". C++ signature :  void remove_automation_state_listener(TPyHandle&lt;ATimeableValue&gt;,boost::python::api::object)</Doc>
<Value>Live.DeviceParameter.DeviceParameter.remove_name_listener()<Description>Value</Description></Value>
<Doc>remove_name_listener( (DeviceParameter)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ATimeableValue&gt;,boost::python::api::object)</Doc>
<Value>Live.DeviceParameter.DeviceParameter.remove_state_listener()<Description>Value</Description></Value>
<Doc>remove_state_listener( (DeviceParameter)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "state". C++ signature :  void remove_state_listener(TPyHandle&lt;ATimeableValue&gt;,boost::python::api::object)</Doc>
<Value>Live.DeviceParameter.DeviceParameter.remove_value_listener()<Description>Value</Description></Value>
<Doc>remove_value_listener( (DeviceParameter)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "value". C++ signature :  void remove_value_listener(TPyHandle&lt;ATimeableValue&gt;,boost::python::api::object)</Doc>
<Value>Live.DeviceParameter.DeviceParameter.short_value_items<Description>Value</Description></Value>
<Doc>Return the list of possible values for this parameter. Like value_items, but prefers short value names if available. Raises an error if 'is_quantized' is False.</Doc>
<Value>Live.DeviceParameter.DeviceParameter.state<Description>Value</Description></Value>
<Doc>Returns the state of the parameter:- enabled - the parameter's value can be changed,- irrelevant - the parameter is enabled, but value changes will not take any effect until it gets enabled,- disabled - the parameter's value cannot be changed.</Doc>
<Value>Live.DeviceParameter.DeviceParameter.state_has_listener()<Description>Value</Description></Value>
<Doc>state_has_listener( (DeviceParameter)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "state". C++ signature :  bool state_has_listener(TPyHandle&lt;ATimeableValue&gt;,boost::python::api::object)</Doc>
<Value>Live.DeviceParameter.DeviceParameter.str_for_value()<Description>Value</Description></Value>
<Doc>str_for_value( (DeviceParameter)arg1, (float)arg2) -&gt; str : Return a string representation of the given value. To be used for display purposes only.  This value can include characters like 'db' or 'hz', depending on the type of the parameter. C++ signature :  TString str_for_value(TPyHandle&lt;ATimeableValue&gt;,float)</Doc>
<Value>Live.DeviceParameter.DeviceParameter.value<Description>Value</Description></Value>
<Doc>Get/Set the current value (as visible in the GUI) this parameter.The value must be inside the min/max properties of this device.</Doc>
<Value>Live.DeviceParameter.DeviceParameter.value_has_listener()<Description>Value</Description></Value>
<Doc>value_has_listener( (DeviceParameter)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "value". C++ signature :  bool value_has_listener(TPyHandle&lt;ATimeableValue&gt;,boost::python::api::object)</Doc>
<Value>Live.DeviceParameter.DeviceParameter.value_items<Description>Value</Description></Value>
<Doc>Return the list of possible values for this parameter. Raises an error if 'is_quantized' is False.</Doc>
<Class>Live.DeviceParameter.ParameterState<Description>Class</Description></Class>
<Built-In>Live.DeviceParameter.ParameterState.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.DeviceParameter.ParameterState.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.DeviceParameter.ParameterState.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.DeviceParameter.ParameterState.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.DeviceParameter.ParameterState.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.DeviceParameter.ParameterState.disabled<Description>Value</Description></Value>
<Value>Live.DeviceParameter.ParameterState.enabled<Description>Value</Description></Value>
<Value>Live.DeviceParameter.ParameterState.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.DeviceParameter.ParameterState.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.DeviceParameter.ParameterState.irrelevant<Description>Value</Description></Value>
<Value>Live.DeviceParameter.ParameterState.name<Description>Value</Description></Value>
<Value>Live.DeviceParameter.ParameterState.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.DeviceParameter.ParameterState.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.DeviceParameter.ParameterState.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.DeviceParameter.ParameterState.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.DeviceParameter.ParameterState.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Module>Live.DriftDevice<Description>Module</Description></Module>
<Class>Live.DriftDevice.DriftDevice<Description>Class</Description></Class>
<Doc>This class represents a Drift device.</Doc>
<Built-In>Live.DriftDevice.DriftDevice.add_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.add_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.add_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.add_mod_matrix_filter_source_1_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_mod_matrix_filter_source_1_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mod_matrix_filter_source_1_index" has changed. C++ signature :  void add_mod_matrix_filter_source_1_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.add_mod_matrix_filter_source_2_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_mod_matrix_filter_source_2_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mod_matrix_filter_source_2_index" has changed. C++ signature :  void add_mod_matrix_filter_source_2_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.add_mod_matrix_lfo_source_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_mod_matrix_lfo_source_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mod_matrix_lfo_source_index" has changed. C++ signature :  void add_mod_matrix_lfo_source_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.add_mod_matrix_pitch_source_1_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_mod_matrix_pitch_source_1_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mod_matrix_pitch_source_1_index" has changed. C++ signature :  void add_mod_matrix_pitch_source_1_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.add_mod_matrix_pitch_source_2_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_mod_matrix_pitch_source_2_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mod_matrix_pitch_source_2_index" has changed. C++ signature :  void add_mod_matrix_pitch_source_2_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.add_mod_matrix_shape_source_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_mod_matrix_shape_source_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mod_matrix_shape_source_index" has changed. C++ signature :  void add_mod_matrix_shape_source_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.add_mod_matrix_source_1_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_mod_matrix_source_1_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mod_matrix_source_1_index" has changed. C++ signature :  void add_mod_matrix_source_1_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.add_mod_matrix_source_2_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_mod_matrix_source_2_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mod_matrix_source_2_index" has changed. C++ signature :  void add_mod_matrix_source_2_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.add_mod_matrix_source_3_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_mod_matrix_source_3_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mod_matrix_source_3_index" has changed. C++ signature :  void add_mod_matrix_source_3_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.add_mod_matrix_target_1_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_mod_matrix_target_1_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mod_matrix_target_1_index" has changed. C++ signature :  void add_mod_matrix_target_1_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.add_mod_matrix_target_2_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_mod_matrix_target_2_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mod_matrix_target_2_index" has changed. C++ signature :  void add_mod_matrix_target_2_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.add_mod_matrix_target_3_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_mod_matrix_target_3_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mod_matrix_target_3_index" has changed. C++ signature :  void add_mod_matrix_target_3_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.add_name_listener()<Description>Built-In</Description></Built-In>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.add_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.add_pitch_bend_range_listener()<Description>Built-In</Description></Built-In>
<Doc>add_pitch_bend_range_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "pitch_bend_range" has changed. C++ signature :  void add_pitch_bend_range_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.add_voice_count_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_voice_count_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "voice_count_index" has changed. C++ signature :  void add_voice_count_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.add_voice_mode_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_voice_mode_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "voice_mode_index" has changed. C++ signature :  void add_voice_mode_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.is_active_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.latency_in_ms_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.latency_in_samples_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.mod_matrix_filter_source_1_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>mod_matrix_filter_source_1_index_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mod_matrix_filter_source_1_index". C++ signature :  bool mod_matrix_filter_source_1_index_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.mod_matrix_filter_source_2_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>mod_matrix_filter_source_2_index_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mod_matrix_filter_source_2_index". C++ signature :  bool mod_matrix_filter_source_2_index_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.mod_matrix_lfo_source_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>mod_matrix_lfo_source_index_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mod_matrix_lfo_source_index". C++ signature :  bool mod_matrix_lfo_source_index_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.mod_matrix_pitch_source_1_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>mod_matrix_pitch_source_1_index_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mod_matrix_pitch_source_1_index". C++ signature :  bool mod_matrix_pitch_source_1_index_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.mod_matrix_pitch_source_2_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>mod_matrix_pitch_source_2_index_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mod_matrix_pitch_source_2_index". C++ signature :  bool mod_matrix_pitch_source_2_index_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.mod_matrix_shape_source_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>mod_matrix_shape_source_index_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mod_matrix_shape_source_index". C++ signature :  bool mod_matrix_shape_source_index_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.mod_matrix_source_1_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>mod_matrix_source_1_index_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mod_matrix_source_1_index". C++ signature :  bool mod_matrix_source_1_index_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.mod_matrix_source_2_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>mod_matrix_source_2_index_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mod_matrix_source_2_index". C++ signature :  bool mod_matrix_source_2_index_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.mod_matrix_source_3_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>mod_matrix_source_3_index_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mod_matrix_source_3_index". C++ signature :  bool mod_matrix_source_3_index_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.mod_matrix_target_1_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>mod_matrix_target_1_index_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mod_matrix_target_1_index". C++ signature :  bool mod_matrix_target_1_index_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.mod_matrix_target_2_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>mod_matrix_target_2_index_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mod_matrix_target_2_index". C++ signature :  bool mod_matrix_target_2_index_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.mod_matrix_target_3_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>mod_matrix_target_3_index_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mod_matrix_target_3_index". C++ signature :  bool mod_matrix_target_3_index_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.name_has_listener()<Description>Built-In</Description></Built-In>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.parameters_has_listener()<Description>Built-In</Description></Built-In>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.pitch_bend_range_has_listener()<Description>Built-In</Description></Built-In>
<Doc>pitch_bend_range_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "pitch_bend_range". C++ signature :  bool pitch_bend_range_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.remove_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.remove_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.remove_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.remove_mod_matrix_filter_source_1_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_mod_matrix_filter_source_1_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mod_matrix_filter_source_1_index". C++ signature :  void remove_mod_matrix_filter_source_1_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.remove_mod_matrix_filter_source_2_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_mod_matrix_filter_source_2_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mod_matrix_filter_source_2_index". C++ signature :  void remove_mod_matrix_filter_source_2_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.remove_mod_matrix_lfo_source_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_mod_matrix_lfo_source_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mod_matrix_lfo_source_index". C++ signature :  void remove_mod_matrix_lfo_source_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.remove_mod_matrix_pitch_source_1_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_mod_matrix_pitch_source_1_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mod_matrix_pitch_source_1_index". C++ signature :  void remove_mod_matrix_pitch_source_1_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.remove_mod_matrix_pitch_source_2_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_mod_matrix_pitch_source_2_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mod_matrix_pitch_source_2_index". C++ signature :  void remove_mod_matrix_pitch_source_2_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.remove_mod_matrix_shape_source_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_mod_matrix_shape_source_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mod_matrix_shape_source_index". C++ signature :  void remove_mod_matrix_shape_source_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.remove_mod_matrix_source_1_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_mod_matrix_source_1_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mod_matrix_source_1_index". C++ signature :  void remove_mod_matrix_source_1_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.remove_mod_matrix_source_2_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_mod_matrix_source_2_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mod_matrix_source_2_index". C++ signature :  void remove_mod_matrix_source_2_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.remove_mod_matrix_source_3_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_mod_matrix_source_3_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mod_matrix_source_3_index". C++ signature :  void remove_mod_matrix_source_3_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.remove_mod_matrix_target_1_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_mod_matrix_target_1_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mod_matrix_target_1_index". C++ signature :  void remove_mod_matrix_target_1_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.remove_mod_matrix_target_2_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_mod_matrix_target_2_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mod_matrix_target_2_index". C++ signature :  void remove_mod_matrix_target_2_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.remove_mod_matrix_target_3_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_mod_matrix_target_3_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mod_matrix_target_3_index". C++ signature :  void remove_mod_matrix_target_3_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.remove_name_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.remove_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.remove_pitch_bend_range_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_pitch_bend_range_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "pitch_bend_range". C++ signature :  void remove_pitch_bend_range_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.remove_voice_count_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_voice_count_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "voice_count_index". C++ signature :  void remove_voice_count_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.remove_voice_mode_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_voice_mode_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "voice_mode_index". C++ signature :  void remove_voice_mode_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.store_chosen_bank()<Description>Built-In</Description></Built-In>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.voice_count_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>voice_count_index_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "voice_count_index". C++ signature :  bool voice_count_index_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.voice_mode_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>voice_mode_index_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "voice_mode_index". C++ signature :  bool voice_mode_index_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.View<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Value>Live.DriftDevice.DriftDevice.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.DriftDevice.DriftDevice._live_ptr<Description>Value</Description></Value>
<Value>Live.DriftDevice.DriftDevice.add_is_active_listener()<Description>Value</Description></Value>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.add_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.add_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.add_mod_matrix_filter_source_1_index_listener()<Description>Value</Description></Value>
<Doc>add_mod_matrix_filter_source_1_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mod_matrix_filter_source_1_index" has changed. C++ signature :  void add_mod_matrix_filter_source_1_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.add_mod_matrix_filter_source_2_index_listener()<Description>Value</Description></Value>
<Doc>add_mod_matrix_filter_source_2_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mod_matrix_filter_source_2_index" has changed. C++ signature :  void add_mod_matrix_filter_source_2_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.add_mod_matrix_lfo_source_index_listener()<Description>Value</Description></Value>
<Doc>add_mod_matrix_lfo_source_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mod_matrix_lfo_source_index" has changed. C++ signature :  void add_mod_matrix_lfo_source_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.add_mod_matrix_pitch_source_1_index_listener()<Description>Value</Description></Value>
<Doc>add_mod_matrix_pitch_source_1_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mod_matrix_pitch_source_1_index" has changed. C++ signature :  void add_mod_matrix_pitch_source_1_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.add_mod_matrix_pitch_source_2_index_listener()<Description>Value</Description></Value>
<Doc>add_mod_matrix_pitch_source_2_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mod_matrix_pitch_source_2_index" has changed. C++ signature :  void add_mod_matrix_pitch_source_2_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.add_mod_matrix_shape_source_index_listener()<Description>Value</Description></Value>
<Doc>add_mod_matrix_shape_source_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mod_matrix_shape_source_index" has changed. C++ signature :  void add_mod_matrix_shape_source_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.add_mod_matrix_source_1_index_listener()<Description>Value</Description></Value>
<Doc>add_mod_matrix_source_1_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mod_matrix_source_1_index" has changed. C++ signature :  void add_mod_matrix_source_1_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.add_mod_matrix_source_2_index_listener()<Description>Value</Description></Value>
<Doc>add_mod_matrix_source_2_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mod_matrix_source_2_index" has changed. C++ signature :  void add_mod_matrix_source_2_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.add_mod_matrix_source_3_index_listener()<Description>Value</Description></Value>
<Doc>add_mod_matrix_source_3_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mod_matrix_source_3_index" has changed. C++ signature :  void add_mod_matrix_source_3_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.add_mod_matrix_target_1_index_listener()<Description>Value</Description></Value>
<Doc>add_mod_matrix_target_1_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mod_matrix_target_1_index" has changed. C++ signature :  void add_mod_matrix_target_1_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.add_mod_matrix_target_2_index_listener()<Description>Value</Description></Value>
<Doc>add_mod_matrix_target_2_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mod_matrix_target_2_index" has changed. C++ signature :  void add_mod_matrix_target_2_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.add_mod_matrix_target_3_index_listener()<Description>Value</Description></Value>
<Doc>add_mod_matrix_target_3_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mod_matrix_target_3_index" has changed. C++ signature :  void add_mod_matrix_target_3_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.add_name_listener()<Description>Value</Description></Value>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.add_parameters_listener()<Description>Value</Description></Value>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.add_pitch_bend_range_listener()<Description>Value</Description></Value>
<Doc>add_pitch_bend_range_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "pitch_bend_range" has changed. C++ signature :  void add_pitch_bend_range_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.add_voice_count_index_listener()<Description>Value</Description></Value>
<Doc>add_voice_count_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "voice_count_index" has changed. C++ signature :  void add_voice_count_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.add_voice_mode_index_listener()<Description>Value</Description></Value>
<Doc>add_voice_mode_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "voice_mode_index" has changed. C++ signature :  void add_voice_mode_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.can_have_chains<Description>Value</Description></Value>
<Doc>Returns true if the device is a rack.</Doc>
<Value>Live.DriftDevice.DriftDevice.can_have_drum_pads<Description>Value</Description></Value>
<Doc>Returns true if the device is a drum rack.</Doc>
<Value>Live.DriftDevice.DriftDevice.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the Device.</Doc>
<Value>Live.DriftDevice.DriftDevice.class_display_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class name as displayed in Live's browser and device chain</Doc>
<Value>Live.DriftDevice.DriftDevice.class_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class.</Doc>
<Value>Live.DriftDevice.DriftDevice.is_active<Description>Value</Description></Value>
<Doc>Return const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off.</Doc>
<Value>Live.DriftDevice.DriftDevice.is_active_has_listener()<Description>Value</Description></Value>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.latency_in_ms<Description>Value</Description></Value>
<Doc>Returns the latency of the device in ms.</Doc>
<Value>Live.DriftDevice.DriftDevice.latency_in_ms_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.latency_in_samples<Description>Value</Description></Value>
<Doc>Returns the latency of the device in samples.</Doc>
<Value>Live.DriftDevice.DriftDevice.latency_in_samples_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_filter_source_1_index<Description>Value</Description></Value>
<Doc>Return the filter mod source 1 index</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_filter_source_1_index_has_listener()<Description>Value</Description></Value>
<Doc>mod_matrix_filter_source_1_index_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mod_matrix_filter_source_1_index". C++ signature :  bool mod_matrix_filter_source_1_index_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_filter_source_1_list<Description>Value</Description></Value>
<Doc>Return the filter mod source 1 list</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_filter_source_2_index<Description>Value</Description></Value>
<Doc>Return the filter mod source 2 index</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_filter_source_2_index_has_listener()<Description>Value</Description></Value>
<Doc>mod_matrix_filter_source_2_index_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mod_matrix_filter_source_2_index". C++ signature :  bool mod_matrix_filter_source_2_index_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_filter_source_2_list<Description>Value</Description></Value>
<Doc>Return the filter mod source 2 list</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_lfo_source_index<Description>Value</Description></Value>
<Doc>Return the lfo mod source index</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_lfo_source_index_has_listener()<Description>Value</Description></Value>
<Doc>mod_matrix_lfo_source_index_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mod_matrix_lfo_source_index". C++ signature :  bool mod_matrix_lfo_source_index_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_lfo_source_list<Description>Value</Description></Value>
<Doc>Return the lfo mod source list</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_pitch_source_1_index<Description>Value</Description></Value>
<Doc>Return the pitch mod source 1 index</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_pitch_source_1_index_has_listener()<Description>Value</Description></Value>
<Doc>mod_matrix_pitch_source_1_index_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mod_matrix_pitch_source_1_index". C++ signature :  bool mod_matrix_pitch_source_1_index_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_pitch_source_1_list<Description>Value</Description></Value>
<Doc>Return the pitch mod source 1 list</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_pitch_source_2_index<Description>Value</Description></Value>
<Doc>Return the pitch mod source 2 index</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_pitch_source_2_index_has_listener()<Description>Value</Description></Value>
<Doc>mod_matrix_pitch_source_2_index_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mod_matrix_pitch_source_2_index". C++ signature :  bool mod_matrix_pitch_source_2_index_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_pitch_source_2_list<Description>Value</Description></Value>
<Doc>Return the pitch mod source 2 list</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_shape_source_index<Description>Value</Description></Value>
<Doc>Return the shape mod source index</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_shape_source_index_has_listener()<Description>Value</Description></Value>
<Doc>mod_matrix_shape_source_index_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mod_matrix_shape_source_index". C++ signature :  bool mod_matrix_shape_source_index_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_shape_source_list<Description>Value</Description></Value>
<Doc>Return the shape mod source list</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_source_1_index<Description>Value</Description></Value>
<Doc>Return the custom mod source 1 index</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_source_1_index_has_listener()<Description>Value</Description></Value>
<Doc>mod_matrix_source_1_index_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mod_matrix_source_1_index". C++ signature :  bool mod_matrix_source_1_index_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_source_1_list<Description>Value</Description></Value>
<Doc>Return the custom mod source 1 list</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_source_2_index<Description>Value</Description></Value>
<Doc>Return the custom mod source 2 index</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_source_2_index_has_listener()<Description>Value</Description></Value>
<Doc>mod_matrix_source_2_index_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mod_matrix_source_2_index". C++ signature :  bool mod_matrix_source_2_index_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_source_2_list<Description>Value</Description></Value>
<Doc>Return the custom mod source 2 list</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_source_3_index<Description>Value</Description></Value>
<Doc>Return the custom mod source 3 index</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_source_3_index_has_listener()<Description>Value</Description></Value>
<Doc>mod_matrix_source_3_index_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mod_matrix_source_3_index". C++ signature :  bool mod_matrix_source_3_index_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_source_3_list<Description>Value</Description></Value>
<Doc>Return the custom mod source 3 list</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_target_1_index<Description>Value</Description></Value>
<Doc>Return the custom mod target 1 index</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_target_1_index_has_listener()<Description>Value</Description></Value>
<Doc>mod_matrix_target_1_index_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mod_matrix_target_1_index". C++ signature :  bool mod_matrix_target_1_index_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_target_1_list<Description>Value</Description></Value>
<Doc>Return the custom mod target 1 list</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_target_2_index<Description>Value</Description></Value>
<Doc>Return the custom mod target 2 index</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_target_2_index_has_listener()<Description>Value</Description></Value>
<Doc>mod_matrix_target_2_index_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mod_matrix_target_2_index". C++ signature :  bool mod_matrix_target_2_index_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_target_2_list<Description>Value</Description></Value>
<Doc>Return the custom mod target 2 list</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_target_3_index<Description>Value</Description></Value>
<Doc>Return the custom mod target 3 index</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_target_3_index_has_listener()<Description>Value</Description></Value>
<Doc>mod_matrix_target_3_index_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mod_matrix_target_3_index". C++ signature :  bool mod_matrix_target_3_index_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.mod_matrix_target_3_list<Description>Value</Description></Value>
<Doc>Return the custom mod target 3 list</Doc>
<Value>Live.DriftDevice.DriftDevice.name<Description>Value</Description></Value>
<Doc>Return access to the name of the device.</Doc>
<Value>Live.DriftDevice.DriftDevice.name_has_listener()<Description>Value</Description></Value>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.parameters<Description>Value</Description></Value>
<Doc>Const access to the list of available automatable parameters for this device.</Doc>
<Value>Live.DriftDevice.DriftDevice.parameters_has_listener()<Description>Value</Description></Value>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.pitch_bend_range<Description>Value</Description></Value>
<Doc>Return the Pitch Bend Range</Doc>
<Value>Live.DriftDevice.DriftDevice.pitch_bend_range_has_listener()<Description>Value</Description></Value>
<Doc>pitch_bend_range_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "pitch_bend_range". C++ signature :  bool pitch_bend_range_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.remove_is_active_listener()<Description>Value</Description></Value>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.remove_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.remove_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.remove_mod_matrix_filter_source_1_index_listener()<Description>Value</Description></Value>
<Doc>remove_mod_matrix_filter_source_1_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mod_matrix_filter_source_1_index". C++ signature :  void remove_mod_matrix_filter_source_1_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.remove_mod_matrix_filter_source_2_index_listener()<Description>Value</Description></Value>
<Doc>remove_mod_matrix_filter_source_2_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mod_matrix_filter_source_2_index". C++ signature :  void remove_mod_matrix_filter_source_2_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.remove_mod_matrix_lfo_source_index_listener()<Description>Value</Description></Value>
<Doc>remove_mod_matrix_lfo_source_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mod_matrix_lfo_source_index". C++ signature :  void remove_mod_matrix_lfo_source_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.remove_mod_matrix_pitch_source_1_index_listener()<Description>Value</Description></Value>
<Doc>remove_mod_matrix_pitch_source_1_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mod_matrix_pitch_source_1_index". C++ signature :  void remove_mod_matrix_pitch_source_1_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.remove_mod_matrix_pitch_source_2_index_listener()<Description>Value</Description></Value>
<Doc>remove_mod_matrix_pitch_source_2_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mod_matrix_pitch_source_2_index". C++ signature :  void remove_mod_matrix_pitch_source_2_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.remove_mod_matrix_shape_source_index_listener()<Description>Value</Description></Value>
<Doc>remove_mod_matrix_shape_source_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mod_matrix_shape_source_index". C++ signature :  void remove_mod_matrix_shape_source_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.remove_mod_matrix_source_1_index_listener()<Description>Value</Description></Value>
<Doc>remove_mod_matrix_source_1_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mod_matrix_source_1_index". C++ signature :  void remove_mod_matrix_source_1_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.remove_mod_matrix_source_2_index_listener()<Description>Value</Description></Value>
<Doc>remove_mod_matrix_source_2_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mod_matrix_source_2_index". C++ signature :  void remove_mod_matrix_source_2_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.remove_mod_matrix_source_3_index_listener()<Description>Value</Description></Value>
<Doc>remove_mod_matrix_source_3_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mod_matrix_source_3_index". C++ signature :  void remove_mod_matrix_source_3_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.remove_mod_matrix_target_1_index_listener()<Description>Value</Description></Value>
<Doc>remove_mod_matrix_target_1_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mod_matrix_target_1_index". C++ signature :  void remove_mod_matrix_target_1_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.remove_mod_matrix_target_2_index_listener()<Description>Value</Description></Value>
<Doc>remove_mod_matrix_target_2_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mod_matrix_target_2_index". C++ signature :  void remove_mod_matrix_target_2_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.remove_mod_matrix_target_3_index_listener()<Description>Value</Description></Value>
<Doc>remove_mod_matrix_target_3_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mod_matrix_target_3_index". C++ signature :  void remove_mod_matrix_target_3_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.remove_name_listener()<Description>Value</Description></Value>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.remove_parameters_listener()<Description>Value</Description></Value>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.remove_pitch_bend_range_listener()<Description>Value</Description></Value>
<Doc>remove_pitch_bend_range_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "pitch_bend_range". C++ signature :  void remove_pitch_bend_range_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.remove_voice_count_index_listener()<Description>Value</Description></Value>
<Doc>remove_voice_count_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "voice_count_index". C++ signature :  void remove_voice_count_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.remove_voice_mode_index_listener()<Description>Value</Description></Value>
<Doc>remove_voice_mode_index_listener( (DriftDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "voice_mode_index". C++ signature :  void remove_voice_mode_index_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.store_chosen_bank()<Description>Value</Description></Value>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Value>Live.DriftDevice.DriftDevice.type<Description>Value</Description></Value>
<Doc>Return the type of the device.</Doc>
<Value>Live.DriftDevice.DriftDevice.view<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Value>Live.DriftDevice.DriftDevice.voice_count_index<Description>Value</Description></Value>
<Doc>Return the voice count index</Doc>
<Value>Live.DriftDevice.DriftDevice.voice_count_index_has_listener()<Description>Value</Description></Value>
<Doc>voice_count_index_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "voice_count_index". C++ signature :  bool voice_count_index_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.voice_count_list<Description>Value</Description></Value>
<Doc>Return the voice count list</Doc>
<Value>Live.DriftDevice.DriftDevice.voice_mode_index<Description>Value</Description></Value>
<Doc>Return the voice mode index</Doc>
<Value>Live.DriftDevice.DriftDevice.voice_mode_index_has_listener()<Description>Value</Description></Value>
<Doc>voice_mode_index_has_listener( (DriftDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "voice_mode_index". C++ signature :  bool voice_mode_index_has_listener(TDriftDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.voice_mode_list<Description>Value</Description></Value>
<Doc>Return the voice mode list</Doc>
<Class>Live.DriftDevice.DriftDevice.View<Description>Class</Description></Class>
<Doc>Representing the view aspects of a device.</Doc>
<Built-In>Live.DriftDevice.DriftDevice.View.add_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.View.is_collapsed_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DriftDevice.DriftDevice.View.remove_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.View.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.DriftDevice.DriftDevice.View._live_ptr<Description>Value</Description></Value>
<Value>Live.DriftDevice.DriftDevice.View.add_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.View.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the View.</Doc>
<Value>Live.DriftDevice.DriftDevice.View.is_collapsed<Description>Value</Description></Value>
<Doc>Get/Set/Listen if the device is shown collapsed in the device chain.</Doc>
<Value>Live.DriftDevice.DriftDevice.View.is_collapsed_has_listener()<Description>Value</Description></Value>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DriftDevice.DriftDevice.View.remove_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Module>Live.DrumCellDevice<Description>Module</Description></Module>
<Class>Live.DrumCellDevice.DrumCellDevice<Description>Class</Description></Class>
<Doc>This class represents a DrumCell device.</Doc>
<Built-In>Live.DrumCellDevice.DrumCellDevice.add_gain_listener()<Description>Built-In</Description></Built-In>
<Doc>add_gain_listener( (DrumCellDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "gain" has changed. C++ signature :  void add_gain_listener(TDrumCellDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumCellDevice.DrumCellDevice.add_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DrumCellDevice.DrumCellDevice.add_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DrumCellDevice.DrumCellDevice.add_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DrumCellDevice.DrumCellDevice.add_name_listener()<Description>Built-In</Description></Built-In>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DrumCellDevice.DrumCellDevice.add_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DrumCellDevice.DrumCellDevice.gain_has_listener()<Description>Built-In</Description></Built-In>
<Doc>gain_has_listener( (DrumCellDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "gain". C++ signature :  bool gain_has_listener(TDrumCellDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumCellDevice.DrumCellDevice.is_active_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DrumCellDevice.DrumCellDevice.latency_in_ms_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DrumCellDevice.DrumCellDevice.latency_in_samples_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DrumCellDevice.DrumCellDevice.name_has_listener()<Description>Built-In</Description></Built-In>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DrumCellDevice.DrumCellDevice.parameters_has_listener()<Description>Built-In</Description></Built-In>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DrumCellDevice.DrumCellDevice.remove_gain_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_gain_listener( (DrumCellDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "gain". C++ signature :  void remove_gain_listener(TDrumCellDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumCellDevice.DrumCellDevice.remove_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DrumCellDevice.DrumCellDevice.remove_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DrumCellDevice.DrumCellDevice.remove_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DrumCellDevice.DrumCellDevice.remove_name_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DrumCellDevice.DrumCellDevice.remove_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DrumCellDevice.DrumCellDevice.store_chosen_bank()<Description>Built-In</Description></Built-In>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.View<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice._live_ptr<Description>Value</Description></Value>
<Value>Live.DrumCellDevice.DrumCellDevice.add_gain_listener()<Description>Value</Description></Value>
<Doc>add_gain_listener( (DrumCellDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "gain" has changed. C++ signature :  void add_gain_listener(TDrumCellDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.add_is_active_listener()<Description>Value</Description></Value>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.add_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.add_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.add_name_listener()<Description>Value</Description></Value>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.add_parameters_listener()<Description>Value</Description></Value>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.can_have_chains<Description>Value</Description></Value>
<Doc>Returns true if the device is a rack.</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.can_have_drum_pads<Description>Value</Description></Value>
<Doc>Returns true if the device is a drum rack.</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the Device.</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.class_display_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class name as displayed in Live's browser and device chain</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.class_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class.</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.gain<Description>Value</Description></Value>
<Doc>Return the Gain value</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.gain_has_listener()<Description>Value</Description></Value>
<Doc>gain_has_listener( (DrumCellDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "gain". C++ signature :  bool gain_has_listener(TDrumCellDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.is_active<Description>Value</Description></Value>
<Doc>Return const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off.</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.is_active_has_listener()<Description>Value</Description></Value>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.latency_in_ms<Description>Value</Description></Value>
<Doc>Returns the latency of the device in ms.</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.latency_in_ms_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.latency_in_samples<Description>Value</Description></Value>
<Doc>Returns the latency of the device in samples.</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.latency_in_samples_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.name<Description>Value</Description></Value>
<Doc>Return access to the name of the device.</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.name_has_listener()<Description>Value</Description></Value>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.parameters<Description>Value</Description></Value>
<Doc>Const access to the list of available automatable parameters for this device.</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.parameters_has_listener()<Description>Value</Description></Value>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.remove_gain_listener()<Description>Value</Description></Value>
<Doc>remove_gain_listener( (DrumCellDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "gain". C++ signature :  void remove_gain_listener(TDrumCellDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.remove_is_active_listener()<Description>Value</Description></Value>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.remove_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.remove_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.remove_name_listener()<Description>Value</Description></Value>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.remove_parameters_listener()<Description>Value</Description></Value>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.store_chosen_bank()<Description>Value</Description></Value>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.type<Description>Value</Description></Value>
<Doc>Return the type of the device.</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.view<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Class>Live.DrumCellDevice.DrumCellDevice.View<Description>Class</Description></Class>
<Doc>Representing the view aspects of a device.</Doc>
<Built-In>Live.DrumCellDevice.DrumCellDevice.View.add_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DrumCellDevice.DrumCellDevice.View.is_collapsed_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DrumCellDevice.DrumCellDevice.View.remove_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.View.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.View._live_ptr<Description>Value</Description></Value>
<Value>Live.DrumCellDevice.DrumCellDevice.View.add_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.View.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the View.</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.View.is_collapsed<Description>Value</Description></Value>
<Doc>Get/Set/Listen if the device is shown collapsed in the device chain.</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.View.is_collapsed_has_listener()<Description>Value</Description></Value>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumCellDevice.DrumCellDevice.View.remove_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Module>Live.DrumChain<Description>Module</Description></Module>
<Class>Live.DrumChain.DrumChain<Description>Class</Description></Class>
<Doc>This class represents a drum group device chain in Live.</Doc>
<Built-In>Live.DrumChain.DrumChain.add_choke_group_listener()<Description>Built-In</Description></Built-In>
<Doc>add_choke_group_listener( (DrumChain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "choke_group" has changed. C++ signature :  void add_choke_group_listener(TDrumChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.add_color_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_color_index_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "color_index" has changed. C++ signature :  void add_color_index_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.add_color_listener()<Description>Built-In</Description></Built-In>
<Doc>add_color_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "color" has changed. C++ signature :  void add_color_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.add_devices_listener()<Description>Built-In</Description></Built-In>
<Doc>add_devices_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "devices" has changed. C++ signature :  void add_devices_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.add_is_auto_colored_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_auto_colored_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_auto_colored" has changed. C++ signature :  void add_is_auto_colored_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.add_mute_listener()<Description>Built-In</Description></Built-In>
<Doc>add_mute_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mute" has changed. C++ signature :  void add_mute_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.add_muted_via_solo_listener()<Description>Built-In</Description></Built-In>
<Doc>add_muted_via_solo_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "muted_via_solo" has changed. C++ signature :  void add_muted_via_solo_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.add_name_listener()<Description>Built-In</Description></Built-In>
<Doc>add_name_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.add_out_note_listener()<Description>Built-In</Description></Built-In>
<Doc>add_out_note_listener( (DrumChain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "out_note" has changed. C++ signature :  void add_out_note_listener(TDrumChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.add_solo_listener()<Description>Built-In</Description></Built-In>
<Doc>add_solo_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "solo" has changed. C++ signature :  void add_solo_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.choke_group_has_listener()<Description>Built-In</Description></Built-In>
<Doc>choke_group_has_listener( (DrumChain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "choke_group". C++ signature :  bool choke_group_has_listener(TDrumChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.color_has_listener()<Description>Built-In</Description></Built-In>
<Doc>color_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "color". C++ signature :  bool color_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.color_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>color_index_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "color_index". C++ signature :  bool color_index_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.delete_device()<Description>Built-In</Description></Built-In>
<Doc>delete_device( (Chain)arg1, (int)arg2) -&gt; None : Remove a device identified by its index from the chain. Throws runtime error if bad index.  C++ signature :  void delete_device(TChainPyHandle,int)</Doc>
<Built-In>Live.DrumChain.DrumChain.devices_has_listener()<Description>Built-In</Description></Built-In>
<Doc>devices_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "devices". C++ signature :  bool devices_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.is_auto_colored_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_auto_colored_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_auto_colored". C++ signature :  bool is_auto_colored_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.mute_has_listener()<Description>Built-In</Description></Built-In>
<Doc>mute_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mute". C++ signature :  bool mute_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.muted_via_solo_has_listener()<Description>Built-In</Description></Built-In>
<Doc>muted_via_solo_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "muted_via_solo". C++ signature :  bool muted_via_solo_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.name_has_listener()<Description>Built-In</Description></Built-In>
<Doc>name_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.out_note_has_listener()<Description>Built-In</Description></Built-In>
<Doc>out_note_has_listener( (DrumChain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "out_note". C++ signature :  bool out_note_has_listener(TDrumChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.remove_choke_group_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_choke_group_listener( (DrumChain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "choke_group". C++ signature :  void remove_choke_group_listener(TDrumChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.remove_color_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_color_index_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "color_index". C++ signature :  void remove_color_index_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.remove_color_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_color_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "color". C++ signature :  void remove_color_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.remove_devices_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_devices_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "devices". C++ signature :  void remove_devices_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.remove_is_auto_colored_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_auto_colored_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_auto_colored". C++ signature :  void remove_is_auto_colored_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.remove_mute_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_mute_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mute". C++ signature :  void remove_mute_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.remove_muted_via_solo_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_muted_via_solo_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "muted_via_solo". C++ signature :  void remove_muted_via_solo_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.remove_name_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_name_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.remove_out_note_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_out_note_listener( (DrumChain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "out_note". C++ signature :  void remove_out_note_listener(TDrumChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.remove_solo_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_solo_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "solo". C++ signature :  void remove_solo_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.DrumChain.DrumChain.solo_has_listener()<Description>Built-In</Description></Built-In>
<Doc>solo_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "solo". C++ signature :  bool solo_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.DrumChain.DrumChain._live_ptr<Description>Value</Description></Value>
<Value>Live.DrumChain.DrumChain.add_choke_group_listener()<Description>Value</Description></Value>
<Doc>add_choke_group_listener( (DrumChain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "choke_group" has changed. C++ signature :  void add_choke_group_listener(TDrumChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.add_color_index_listener()<Description>Value</Description></Value>
<Doc>add_color_index_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "color_index" has changed. C++ signature :  void add_color_index_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.add_color_listener()<Description>Value</Description></Value>
<Doc>add_color_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "color" has changed. C++ signature :  void add_color_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.add_devices_listener()<Description>Value</Description></Value>
<Doc>add_devices_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "devices" has changed. C++ signature :  void add_devices_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.add_is_auto_colored_listener()<Description>Value</Description></Value>
<Doc>add_is_auto_colored_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_auto_colored" has changed. C++ signature :  void add_is_auto_colored_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.add_mute_listener()<Description>Value</Description></Value>
<Doc>add_mute_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mute" has changed. C++ signature :  void add_mute_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.add_muted_via_solo_listener()<Description>Value</Description></Value>
<Doc>add_muted_via_solo_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "muted_via_solo" has changed. C++ signature :  void add_muted_via_solo_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.add_name_listener()<Description>Value</Description></Value>
<Doc>add_name_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.add_out_note_listener()<Description>Value</Description></Value>
<Doc>add_out_note_listener( (DrumChain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "out_note" has changed. C++ signature :  void add_out_note_listener(TDrumChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.add_solo_listener()<Description>Value</Description></Value>
<Doc>add_solo_listener( (Chain)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "solo" has changed. C++ signature :  void add_solo_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the chain.</Doc>
<Value>Live.DrumChain.DrumChain.choke_group<Description>Value</Description></Value>
<Doc>Access to the chain's choke group setting.</Doc>
<Value>Live.DrumChain.DrumChain.choke_group_has_listener()<Description>Value</Description></Value>
<Doc>choke_group_has_listener( (DrumChain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "choke_group". C++ signature :  bool choke_group_has_listener(TDrumChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.color<Description>Value</Description></Value>
<Doc>Access the color index of the Chain.</Doc>
<Value>Live.DrumChain.DrumChain.color_has_listener()<Description>Value</Description></Value>
<Doc>color_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "color". C++ signature :  bool color_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.color_index<Description>Value</Description></Value>
<Doc>Access the color index of the Chain.</Doc>
<Value>Live.DrumChain.DrumChain.color_index_has_listener()<Description>Value</Description></Value>
<Doc>color_index_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "color_index". C++ signature :  bool color_index_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.delete_device()<Description>Value</Description></Value>
<Doc>delete_device( (Chain)arg1, (int)arg2) -&gt; None : Remove a device identified by its index from the chain. Throws runtime error if bad index.  C++ signature :  void delete_device(TChainPyHandle,int)</Doc>
<Value>Live.DrumChain.DrumChain.devices<Description>Value</Description></Value>
<Doc>Return const access to all available Devices that are present in the chains</Doc>
<Value>Live.DrumChain.DrumChain.devices_has_listener()<Description>Value</Description></Value>
<Doc>devices_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "devices". C++ signature :  bool devices_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.has_audio_input<Description>Value</Description></Value>
<Doc>return True, if this Chain can be feed with an Audio signal. This istrue for all Audio Chains.</Doc>
<Value>Live.DrumChain.DrumChain.has_audio_output<Description>Value</Description></Value>
<Doc>return True, if this Chain sends out an Audio signal. This istrue for all Audio Chains, and MIDI chains with an Instrument.</Doc>
<Value>Live.DrumChain.DrumChain.has_midi_input<Description>Value</Description></Value>
<Doc>return True, if this Chain can be feed with an Audio signal. This istrue for all MIDI Chains.</Doc>
<Value>Live.DrumChain.DrumChain.has_midi_output<Description>Value</Description></Value>
<Doc>return True, if this Chain sends out MIDI events. This istrue for all MIDI Chains with no Instruments.</Doc>
<Value>Live.DrumChain.DrumChain.is_auto_colored<Description>Value</Description></Value>
<Doc>Get/set access to the auto color flag of the Chain.If True, the Chain will always have the same color as the containingTrack or Chain.</Doc>
<Value>Live.DrumChain.DrumChain.is_auto_colored_has_listener()<Description>Value</Description></Value>
<Doc>is_auto_colored_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_auto_colored". C++ signature :  bool is_auto_colored_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.mixer_device<Description>Value</Description></Value>
<Doc>Return access to the mixer device that holds the chain's mixer parameters:the Volume, Pan, and Sendamounts.</Doc>
<Value>Live.DrumChain.DrumChain.mute<Description>Value</Description></Value>
<Doc>Mute/unmute the chain.</Doc>
<Value>Live.DrumChain.DrumChain.mute_has_listener()<Description>Value</Description></Value>
<Doc>mute_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mute". C++ signature :  bool mute_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.muted_via_solo<Description>Value</Description></Value>
<Doc>Return const access to whether this chain is muted due to some other chainbeing soloed.</Doc>
<Value>Live.DrumChain.DrumChain.muted_via_solo_has_listener()<Description>Value</Description></Value>
<Doc>muted_via_solo_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "muted_via_solo". C++ signature :  bool muted_via_solo_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.name<Description>Value</Description></Value>
<Doc>Read/write access to the name of the Chain, as visible in the track header.</Doc>
<Value>Live.DrumChain.DrumChain.name_has_listener()<Description>Value</Description></Value>
<Doc>name_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.out_note<Description>Value</Description></Value>
<Doc>Access to the MIDI note sent to the devices in the chain.</Doc>
<Value>Live.DrumChain.DrumChain.out_note_has_listener()<Description>Value</Description></Value>
<Doc>out_note_has_listener( (DrumChain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "out_note". C++ signature :  bool out_note_has_listener(TDrumChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.remove_choke_group_listener()<Description>Value</Description></Value>
<Doc>remove_choke_group_listener( (DrumChain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "choke_group". C++ signature :  void remove_choke_group_listener(TDrumChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.remove_color_index_listener()<Description>Value</Description></Value>
<Doc>remove_color_index_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "color_index". C++ signature :  void remove_color_index_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.remove_color_listener()<Description>Value</Description></Value>
<Doc>remove_color_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "color". C++ signature :  void remove_color_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.remove_devices_listener()<Description>Value</Description></Value>
<Doc>remove_devices_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "devices". C++ signature :  void remove_devices_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.remove_is_auto_colored_listener()<Description>Value</Description></Value>
<Doc>remove_is_auto_colored_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_auto_colored". C++ signature :  void remove_is_auto_colored_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.remove_mute_listener()<Description>Value</Description></Value>
<Doc>remove_mute_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mute". C++ signature :  void remove_mute_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.remove_muted_via_solo_listener()<Description>Value</Description></Value>
<Doc>remove_muted_via_solo_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "muted_via_solo". C++ signature :  void remove_muted_via_solo_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.remove_name_listener()<Description>Value</Description></Value>
<Doc>remove_name_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.remove_out_note_listener()<Description>Value</Description></Value>
<Doc>remove_out_note_listener( (DrumChain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "out_note". C++ signature :  void remove_out_note_listener(TDrumChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.remove_solo_listener()<Description>Value</Description></Value>
<Doc>remove_solo_listener( (Chain)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "solo". C++ signature :  void remove_solo_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Value>Live.DrumChain.DrumChain.solo<Description>Value</Description></Value>
<Doc>Get/Set the solo status of the chain. Note that this will not disable thesolo state of any other Chain in the same rack. If you want exclusive solo, you have to disable the solo state of the other Chains manually.</Doc>
<Value>Live.DrumChain.DrumChain.solo_has_listener()<Description>Value</Description></Value>
<Doc>solo_has_listener( (Chain)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "solo". C++ signature :  bool solo_has_listener(TChainPyHandle,boost::python::api::object)</Doc>
<Module>Live.DrumPad<Description>Module</Description></Module>
<Class>Live.DrumPad.DrumPad<Description>Class</Description></Class>
<Doc>This class represents a drum group device pad in Live.</Doc>
<Built-In>Live.DrumPad.DrumPad.add_chains_listener()<Description>Built-In</Description></Built-In>
<Doc>add_chains_listener( (DrumPad)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "chains" has changed. C++ signature :  void add_chains_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DrumPad.DrumPad.add_mute_listener()<Description>Built-In</Description></Built-In>
<Doc>add_mute_listener( (DrumPad)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mute" has changed. C++ signature :  void add_mute_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DrumPad.DrumPad.add_name_listener()<Description>Built-In</Description></Built-In>
<Doc>add_name_listener( (DrumPad)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DrumPad.DrumPad.add_solo_listener()<Description>Built-In</Description></Built-In>
<Doc>add_solo_listener( (DrumPad)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "solo" has changed. C++ signature :  void add_solo_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DrumPad.DrumPad.chains_has_listener()<Description>Built-In</Description></Built-In>
<Doc>chains_has_listener( (DrumPad)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "chains". C++ signature :  bool chains_has_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DrumPad.DrumPad.delete_all_chains()<Description>Built-In</Description></Built-In>
<Doc>delete_all_chains( (DrumPad)arg1) -&gt; None : Deletes all chains associated with a drum pad. This is equivalent to deleting a drum rack pad in Live. C++ signature :  void delete_all_chains(TPyHandle&lt;ADrumGroupDevicePad&gt;)</Doc>
<Built-In>Live.DrumPad.DrumPad.mute_has_listener()<Description>Built-In</Description></Built-In>
<Doc>mute_has_listener( (DrumPad)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mute". C++ signature :  bool mute_has_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DrumPad.DrumPad.name_has_listener()<Description>Built-In</Description></Built-In>
<Doc>name_has_listener( (DrumPad)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DrumPad.DrumPad.remove_chains_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_chains_listener( (DrumPad)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "chains". C++ signature :  void remove_chains_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DrumPad.DrumPad.remove_mute_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_mute_listener( (DrumPad)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mute". C++ signature :  void remove_mute_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DrumPad.DrumPad.remove_name_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_name_listener( (DrumPad)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DrumPad.DrumPad.remove_solo_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_solo_listener( (DrumPad)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "solo". C++ signature :  void remove_solo_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>
<Built-In>Live.DrumPad.DrumPad.solo_has_listener()<Description>Built-In</Description></Built-In>
<Doc>solo_has_listener( (DrumPad)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "solo". C++ signature :  bool solo_has_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumPad.DrumPad.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.DrumPad.DrumPad._live_ptr<Description>Value</Description></Value>
<Value>Live.DrumPad.DrumPad.add_chains_listener()<Description>Value</Description></Value>
<Doc>add_chains_listener( (DrumPad)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "chains" has changed. C++ signature :  void add_chains_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumPad.DrumPad.add_mute_listener()<Description>Value</Description></Value>
<Doc>add_mute_listener( (DrumPad)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mute" has changed. C++ signature :  void add_mute_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumPad.DrumPad.add_name_listener()<Description>Value</Description></Value>
<Doc>add_name_listener( (DrumPad)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumPad.DrumPad.add_solo_listener()<Description>Value</Description></Value>
<Doc>add_solo_listener( (DrumPad)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "solo" has changed. C++ signature :  void add_solo_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumPad.DrumPad.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the drum pad.</Doc>
<Value>Live.DrumPad.DrumPad.chains<Description>Value</Description></Value>
<Doc>Return const access to the list of chains in this drum pad.</Doc>
<Value>Live.DrumPad.DrumPad.chains_has_listener()<Description>Value</Description></Value>
<Doc>chains_has_listener( (DrumPad)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "chains". C++ signature :  bool chains_has_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumPad.DrumPad.delete_all_chains()<Description>Value</Description></Value>
<Doc>delete_all_chains( (DrumPad)arg1) -&gt; None : Deletes all chains associated with a drum pad. This is equivalent to deleting a drum rack pad in Live. C++ signature :  void delete_all_chains(TPyHandle&lt;ADrumGroupDevicePad&gt;)</Doc>
<Value>Live.DrumPad.DrumPad.mute<Description>Value</Description></Value>
<Doc>Mute/unmute the pad.</Doc>
<Value>Live.DrumPad.DrumPad.mute_has_listener()<Description>Value</Description></Value>
<Doc>mute_has_listener( (DrumPad)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mute". C++ signature :  bool mute_has_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumPad.DrumPad.name<Description>Value</Description></Value>
<Doc>Return const access to the drum pad's name. It depends on the contained chains.</Doc>
<Value>Live.DrumPad.DrumPad.name_has_listener()<Description>Value</Description></Value>
<Doc>name_has_listener( (DrumPad)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumPad.DrumPad.note<Description>Value</Description></Value>
<Doc>Get the MIDI note of the drum pad.</Doc>
<Value>Live.DrumPad.DrumPad.remove_chains_listener()<Description>Value</Description></Value>
<Doc>remove_chains_listener( (DrumPad)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "chains". C++ signature :  void remove_chains_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumPad.DrumPad.remove_mute_listener()<Description>Value</Description></Value>
<Doc>remove_mute_listener( (DrumPad)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mute". C++ signature :  void remove_mute_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumPad.DrumPad.remove_name_listener()<Description>Value</Description></Value>
<Doc>remove_name_listener( (DrumPad)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumPad.DrumPad.remove_solo_listener()<Description>Value</Description></Value>
<Doc>remove_solo_listener( (DrumPad)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "solo". C++ signature :  void remove_solo_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>
<Value>Live.DrumPad.DrumPad.solo<Description>Value</Description></Value>
<Doc>Solo/unsolo the pad.</Doc>
<Value>Live.DrumPad.DrumPad.solo_has_listener()<Description>Value</Description></Value>
<Doc>solo_has_listener( (DrumPad)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "solo". C++ signature :  bool solo_has_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;,boost::python::api::object)</Doc>
<Module>Live.Eq8Device<Description>Module</Description></Module>
<Class>Live.Eq8Device.EditMode<Description>Class</Description></Class>
<Built-In>Live.Eq8Device.EditMode.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Eq8Device.EditMode.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Eq8Device.EditMode.a<Description>Value</Description></Value>
<Value>Live.Eq8Device.EditMode.b<Description>Value</Description></Value>
<Value>Live.Eq8Device.EditMode.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.Eq8Device.EditMode.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.Eq8Device.EditMode.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.Eq8Device.EditMode.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Eq8Device.EditMode.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.Eq8Device.EditMode.name<Description>Value</Description></Value>
<Value>Live.Eq8Device.EditMode.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.Eq8Device.EditMode.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.Eq8Device.EditMode.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.Eq8Device.EditMode.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.Eq8Device.EditMode.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.Eq8Device.Eq8Device<Description>Class</Description></Class>
<Doc>This class represents an Eq8 device.</Doc>
<Built-In>Live.Eq8Device.Eq8Device.add_edit_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>add_edit_mode_listener( (Eq8Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "edit_mode" has changed. C++ signature :  void add_edit_mode_listener(TEq8DevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.add_global_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>add_global_mode_listener( (Eq8Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "global_mode" has changed. C++ signature :  void add_global_mode_listener(TEq8DevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.add_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.add_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.add_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.add_name_listener()<Description>Built-In</Description></Built-In>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.add_oversample_listener()<Description>Built-In</Description></Built-In>
<Doc>add_oversample_listener( (Eq8Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "oversample" has changed. C++ signature :  void add_oversample_listener(TEq8DevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.add_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.edit_mode_has_listener()<Description>Built-In</Description></Built-In>
<Doc>edit_mode_has_listener( (Eq8Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "edit_mode". C++ signature :  bool edit_mode_has_listener(TEq8DevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.global_mode_has_listener()<Description>Built-In</Description></Built-In>
<Doc>global_mode_has_listener( (Eq8Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "global_mode". C++ signature :  bool global_mode_has_listener(TEq8DevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.is_active_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.latency_in_ms_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.latency_in_samples_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.name_has_listener()<Description>Built-In</Description></Built-In>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.oversample_has_listener()<Description>Built-In</Description></Built-In>
<Doc>oversample_has_listener( (Eq8Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "oversample". C++ signature :  bool oversample_has_listener(TEq8DevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.parameters_has_listener()<Description>Built-In</Description></Built-In>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.remove_edit_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_edit_mode_listener( (Eq8Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "edit_mode". C++ signature :  void remove_edit_mode_listener(TEq8DevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.remove_global_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_global_mode_listener( (Eq8Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "global_mode". C++ signature :  void remove_global_mode_listener(TEq8DevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.remove_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.remove_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.remove_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.remove_name_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.remove_oversample_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_oversample_listener( (Eq8Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "oversample". C++ signature :  void remove_oversample_listener(TEq8DevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.remove_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.store_chosen_bank()<Description>Built-In</Description></Built-In>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Value>Live.Eq8Device.Eq8Device.View<Description>Value</Description></Value>
<Doc>Representing the view aspects of an Eq8 device.</Doc>
<Value>Live.Eq8Device.Eq8Device.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Eq8Device.Eq8Device._live_ptr<Description>Value</Description></Value>
<Value>Live.Eq8Device.Eq8Device.add_edit_mode_listener()<Description>Value</Description></Value>
<Doc>add_edit_mode_listener( (Eq8Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "edit_mode" has changed. C++ signature :  void add_edit_mode_listener(TEq8DevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.add_global_mode_listener()<Description>Value</Description></Value>
<Doc>add_global_mode_listener( (Eq8Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "global_mode" has changed. C++ signature :  void add_global_mode_listener(TEq8DevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.add_is_active_listener()<Description>Value</Description></Value>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.add_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.add_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.add_name_listener()<Description>Value</Description></Value>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.add_oversample_listener()<Description>Value</Description></Value>
<Doc>add_oversample_listener( (Eq8Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "oversample" has changed. C++ signature :  void add_oversample_listener(TEq8DevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.add_parameters_listener()<Description>Value</Description></Value>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.can_have_chains<Description>Value</Description></Value>
<Doc>Returns true if the device is a rack.</Doc>
<Value>Live.Eq8Device.Eq8Device.can_have_drum_pads<Description>Value</Description></Value>
<Doc>Returns true if the device is a drum rack.</Doc>
<Value>Live.Eq8Device.Eq8Device.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the Device.</Doc>
<Value>Live.Eq8Device.Eq8Device.class_display_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class name as displayed in Live's browser and device chain</Doc>
<Value>Live.Eq8Device.Eq8Device.class_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class.</Doc>
<Value>Live.Eq8Device.Eq8Device.edit_mode<Description>Value</Description></Value>
<Doc>Access to Eq8's edit mode.</Doc>
<Value>Live.Eq8Device.Eq8Device.edit_mode_has_listener()<Description>Value</Description></Value>
<Doc>edit_mode_has_listener( (Eq8Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "edit_mode". C++ signature :  bool edit_mode_has_listener(TEq8DevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.global_mode<Description>Value</Description></Value>
<Doc>Access to Eq8's global mode.</Doc>
<Value>Live.Eq8Device.Eq8Device.global_mode_has_listener()<Description>Value</Description></Value>
<Doc>global_mode_has_listener( (Eq8Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "global_mode". C++ signature :  bool global_mode_has_listener(TEq8DevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.is_active<Description>Value</Description></Value>
<Doc>Return const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off.</Doc>
<Value>Live.Eq8Device.Eq8Device.is_active_has_listener()<Description>Value</Description></Value>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.latency_in_ms<Description>Value</Description></Value>
<Doc>Returns the latency of the device in ms.</Doc>
<Value>Live.Eq8Device.Eq8Device.latency_in_ms_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.latency_in_samples<Description>Value</Description></Value>
<Doc>Returns the latency of the device in samples.</Doc>
<Value>Live.Eq8Device.Eq8Device.latency_in_samples_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.name<Description>Value</Description></Value>
<Doc>Return access to the name of the device.</Doc>
<Value>Live.Eq8Device.Eq8Device.name_has_listener()<Description>Value</Description></Value>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.oversample<Description>Value</Description></Value>
<Doc>Access to Eq8's oversample value.</Doc>
<Value>Live.Eq8Device.Eq8Device.oversample_has_listener()<Description>Value</Description></Value>
<Doc>oversample_has_listener( (Eq8Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "oversample". C++ signature :  bool oversample_has_listener(TEq8DevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.parameters<Description>Value</Description></Value>
<Doc>Const access to the list of available automatable parameters for this device.</Doc>
<Value>Live.Eq8Device.Eq8Device.parameters_has_listener()<Description>Value</Description></Value>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.remove_edit_mode_listener()<Description>Value</Description></Value>
<Doc>remove_edit_mode_listener( (Eq8Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "edit_mode". C++ signature :  void remove_edit_mode_listener(TEq8DevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.remove_global_mode_listener()<Description>Value</Description></Value>
<Doc>remove_global_mode_listener( (Eq8Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "global_mode". C++ signature :  void remove_global_mode_listener(TEq8DevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.remove_is_active_listener()<Description>Value</Description></Value>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.remove_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.remove_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.remove_name_listener()<Description>Value</Description></Value>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.remove_oversample_listener()<Description>Value</Description></Value>
<Doc>remove_oversample_listener( (Eq8Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "oversample". C++ signature :  void remove_oversample_listener(TEq8DevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.remove_parameters_listener()<Description>Value</Description></Value>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.store_chosen_bank()<Description>Value</Description></Value>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Value>Live.Eq8Device.Eq8Device.type<Description>Value</Description></Value>
<Doc>Return the type of the device.</Doc>
<Value>Live.Eq8Device.Eq8Device.view<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Class>Live.Eq8Device.Eq8Device.View<Description>Class</Description></Class>
<Doc>Representing the view aspects of an Eq8 device.</Doc>
<Built-In>Live.Eq8Device.Eq8Device.View.add_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.View.add_selected_band_listener()<Description>Built-In</Description></Built-In>
<Doc>add_selected_band_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "selected_band" has changed. C++ signature :  void add_selected_band_listener(TEq8DevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.View.is_collapsed_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.View.remove_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.View.remove_selected_band_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_selected_band_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "selected_band". C++ signature :  void remove_selected_band_listener(TEq8DevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.Eq8Device.Eq8Device.View.selected_band_has_listener()<Description>Built-In</Description></Built-In>
<Doc>selected_band_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "selected_band". C++ signature :  bool selected_band_has_listener(TEq8DevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.View.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Eq8Device.Eq8Device.View._live_ptr<Description>Value</Description></Value>
<Value>Live.Eq8Device.Eq8Device.View.add_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.View.add_selected_band_listener()<Description>Value</Description></Value>
<Doc>add_selected_band_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "selected_band" has changed. C++ signature :  void add_selected_band_listener(TEq8DevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.View.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the View.</Doc>
<Value>Live.Eq8Device.Eq8Device.View.is_collapsed<Description>Value</Description></Value>
<Doc>Get/Set/Listen if the device is shown collapsed in the device chain.</Doc>
<Value>Live.Eq8Device.Eq8Device.View.is_collapsed_has_listener()<Description>Value</Description></Value>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.View.remove_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.View.remove_selected_band_listener()<Description>Value</Description></Value>
<Doc>remove_selected_band_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "selected_band". C++ signature :  void remove_selected_band_listener(TEq8DevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.Eq8Device.Eq8Device.View.selected_band<Description>Value</Description></Value>
<Doc>Access to the selected filter band.</Doc>
<Value>Live.Eq8Device.Eq8Device.View.selected_band_has_listener()<Description>Value</Description></Value>
<Doc>selected_band_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "selected_band". C++ signature :  bool selected_band_has_listener(TEq8DevicePyViewData,boost::python::api::object)</Doc>
<Class>Live.Eq8Device.GlobalMode<Description>Class</Description></Class>
<Built-In>Live.Eq8Device.GlobalMode.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Eq8Device.GlobalMode.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Eq8Device.GlobalMode.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.Eq8Device.GlobalMode.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.Eq8Device.GlobalMode.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.Eq8Device.GlobalMode.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Eq8Device.GlobalMode.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.Eq8Device.GlobalMode.left_right<Description>Value</Description></Value>
<Value>Live.Eq8Device.GlobalMode.mid_side<Description>Value</Description></Value>
<Value>Live.Eq8Device.GlobalMode.name<Description>Value</Description></Value>
<Value>Live.Eq8Device.GlobalMode.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.Eq8Device.GlobalMode.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.Eq8Device.GlobalMode.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.Eq8Device.GlobalMode.stereo<Description>Value</Description></Value>
<Value>Live.Eq8Device.GlobalMode.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.Eq8Device.GlobalMode.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Module>Live.Groove<Description>Module</Description></Module>
<Class>Live.Groove.Base<Description>Class</Description></Class>
<Built-In>Live.Groove.Base.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Groove.Base.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Groove.Base.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.Groove.Base.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.Groove.Base.count<Description>Value</Description></Value>
<Value>Live.Groove.Base.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.Groove.Base.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Groove.Base.gb_eight<Description>Value</Description></Value>
<Value>Live.Groove.Base.gb_eight_triplet<Description>Value</Description></Value>
<Value>Live.Groove.Base.gb_four<Description>Value</Description></Value>
<Value>Live.Groove.Base.gb_sixteen<Description>Value</Description></Value>
<Value>Live.Groove.Base.gb_sixteen_triplet<Description>Value</Description></Value>
<Value>Live.Groove.Base.gb_thirtytwo<Description>Value</Description></Value>
<Value>Live.Groove.Base.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.Groove.Base.name<Description>Value</Description></Value>
<Value>Live.Groove.Base.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.Groove.Base.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.Groove.Base.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.Groove.Base.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.Groove.Base.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.Groove.Groove<Description>Class</Description></Class>
<Doc>This class represents a groove in Live.</Doc>
<Built-In>Live.Groove.Groove.add_name_listener()<Description>Built-In</Description></Built-In>
<Doc>add_name_listener( (Groove)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Groove.Groove.add_quantization_amount_listener()<Description>Built-In</Description></Built-In>
<Doc>add_quantization_amount_listener( (Groove)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "quantization_amount" has changed. C++ signature :  void add_quantization_amount_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Groove.Groove.add_random_amount_listener()<Description>Built-In</Description></Built-In>
<Doc>add_random_amount_listener( (Groove)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "random_amount" has changed. C++ signature :  void add_random_amount_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Groove.Groove.add_timing_amount_listener()<Description>Built-In</Description></Built-In>
<Doc>add_timing_amount_listener( (Groove)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "timing_amount" has changed. C++ signature :  void add_timing_amount_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Groove.Groove.add_velocity_amount_listener()<Description>Built-In</Description></Built-In>
<Doc>add_velocity_amount_listener( (Groove)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "velocity_amount" has changed. C++ signature :  void add_velocity_amount_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Groove.Groove.name_has_listener()<Description>Built-In</Description></Built-In>
<Doc>name_has_listener( (Groove)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Groove.Groove.quantization_amount_has_listener()<Description>Built-In</Description></Built-In>
<Doc>quantization_amount_has_listener( (Groove)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "quantization_amount". C++ signature :  bool quantization_amount_has_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Groove.Groove.random_amount_has_listener()<Description>Built-In</Description></Built-In>
<Doc>random_amount_has_listener( (Groove)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "random_amount". C++ signature :  bool random_amount_has_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Groove.Groove.remove_name_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_name_listener( (Groove)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Groove.Groove.remove_quantization_amount_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_quantization_amount_listener( (Groove)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "quantization_amount". C++ signature :  void remove_quantization_amount_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Groove.Groove.remove_random_amount_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_random_amount_listener( (Groove)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "random_amount". C++ signature :  void remove_random_amount_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Groove.Groove.remove_timing_amount_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_timing_amount_listener( (Groove)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "timing_amount". C++ signature :  void remove_timing_amount_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Groove.Groove.remove_velocity_amount_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_velocity_amount_listener( (Groove)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "velocity_amount". C++ signature :  void remove_velocity_amount_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Groove.Groove.timing_amount_has_listener()<Description>Built-In</Description></Built-In>
<Doc>timing_amount_has_listener( (Groove)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "timing_amount". C++ signature :  bool timing_amount_has_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Groove.Groove.velocity_amount_has_listener()<Description>Built-In</Description></Built-In>
<Doc>velocity_amount_has_listener( (Groove)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "velocity_amount". C++ signature :  bool velocity_amount_has_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Value>Live.Groove.Groove.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Groove.Groove._live_ptr<Description>Value</Description></Value>
<Value>Live.Groove.Groove.add_name_listener()<Description>Value</Description></Value>
<Doc>add_name_listener( (Groove)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Value>Live.Groove.Groove.add_quantization_amount_listener()<Description>Value</Description></Value>
<Doc>add_quantization_amount_listener( (Groove)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "quantization_amount" has changed. C++ signature :  void add_quantization_amount_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Value>Live.Groove.Groove.add_random_amount_listener()<Description>Value</Description></Value>
<Doc>add_random_amount_listener( (Groove)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "random_amount" has changed. C++ signature :  void add_random_amount_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Value>Live.Groove.Groove.add_timing_amount_listener()<Description>Value</Description></Value>
<Doc>add_timing_amount_listener( (Groove)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "timing_amount" has changed. C++ signature :  void add_timing_amount_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Value>Live.Groove.Groove.add_velocity_amount_listener()<Description>Value</Description></Value>
<Doc>add_velocity_amount_listener( (Groove)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "velocity_amount" has changed. C++ signature :  void add_velocity_amount_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Value>Live.Groove.Groove.base<Description>Value</Description></Value>
<Doc>Get/set the groove's base grid.</Doc>
<Value>Live.Groove.Groove.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the groove.</Doc>
<Value>Live.Groove.Groove.name<Description>Value</Description></Value>
<Doc>Read/write/listen access to the groove's name</Doc>
<Value>Live.Groove.Groove.name_has_listener()<Description>Value</Description></Value>
<Doc>name_has_listener( (Groove)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Value>Live.Groove.Groove.quantization_amount<Description>Value</Description></Value>
<Doc>Read/write/listen access to the groove's quantization amount.</Doc>
<Value>Live.Groove.Groove.quantization_amount_has_listener()<Description>Value</Description></Value>
<Doc>quantization_amount_has_listener( (Groove)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "quantization_amount". C++ signature :  bool quantization_amount_has_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Value>Live.Groove.Groove.random_amount<Description>Value</Description></Value>
<Doc>Read/write/listen access to the groove's random amount.</Doc>
<Value>Live.Groove.Groove.random_amount_has_listener()<Description>Value</Description></Value>
<Doc>random_amount_has_listener( (Groove)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "random_amount". C++ signature :  bool random_amount_has_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Value>Live.Groove.Groove.remove_name_listener()<Description>Value</Description></Value>
<Doc>remove_name_listener( (Groove)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Value>Live.Groove.Groove.remove_quantization_amount_listener()<Description>Value</Description></Value>
<Doc>remove_quantization_amount_listener( (Groove)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "quantization_amount". C++ signature :  void remove_quantization_amount_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Value>Live.Groove.Groove.remove_random_amount_listener()<Description>Value</Description></Value>
<Doc>remove_random_amount_listener( (Groove)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "random_amount". C++ signature :  void remove_random_amount_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Value>Live.Groove.Groove.remove_timing_amount_listener()<Description>Value</Description></Value>
<Doc>remove_timing_amount_listener( (Groove)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "timing_amount". C++ signature :  void remove_timing_amount_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Value>Live.Groove.Groove.remove_velocity_amount_listener()<Description>Value</Description></Value>
<Doc>remove_velocity_amount_listener( (Groove)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "velocity_amount". C++ signature :  void remove_velocity_amount_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Value>Live.Groove.Groove.timing_amount<Description>Value</Description></Value>
<Doc>Read/write/listen access to the groove's timing amount.</Doc>
<Value>Live.Groove.Groove.timing_amount_has_listener()<Description>Value</Description></Value>
<Doc>timing_amount_has_listener( (Groove)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "timing_amount". C++ signature :  bool timing_amount_has_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Value>Live.Groove.Groove.velocity_amount<Description>Value</Description></Value>
<Doc>Read/write/listen access to the groove's velocity amount.</Doc>
<Value>Live.Groove.Groove.velocity_amount_has_listener()<Description>Value</Description></Value>
<Doc>velocity_amount_has_listener( (Groove)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "velocity_amount". C++ signature :  bool velocity_amount_has_listener(TPyHandle&lt;AAbstractGroove&gt;,boost::python::api::object)</Doc>
<Module>Live.GroovePool<Description>Module</Description></Module>
<Class>Live.GroovePool.GroovePool<Description>Class</Description></Class>
<Doc>This class represents the groove pool in Live.</Doc>
<Built-In>Live.GroovePool.GroovePool.add_grooves_listener()<Description>Built-In</Description></Built-In>
<Doc>add_grooves_listener( (GroovePool)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "grooves" has changed. C++ signature :  void add_grooves_listener(TPyHandle&lt;AGroovePool&gt;,boost::python::api::object)</Doc>
<Built-In>Live.GroovePool.GroovePool.grooves_has_listener()<Description>Built-In</Description></Built-In>
<Doc>grooves_has_listener( (GroovePool)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "grooves". C++ signature :  bool grooves_has_listener(TPyHandle&lt;AGroovePool&gt;,boost::python::api::object)</Doc>
<Built-In>Live.GroovePool.GroovePool.remove_grooves_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_grooves_listener( (GroovePool)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "grooves". C++ signature :  void remove_grooves_listener(TPyHandle&lt;AGroovePool&gt;,boost::python::api::object)</Doc>
<Value>Live.GroovePool.GroovePool.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.GroovePool.GroovePool._live_ptr<Description>Value</Description></Value>
<Value>Live.GroovePool.GroovePool.add_grooves_listener()<Description>Value</Description></Value>
<Doc>add_grooves_listener( (GroovePool)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "grooves" has changed. C++ signature :  void add_grooves_listener(TPyHandle&lt;AGroovePool&gt;,boost::python::api::object)</Doc>
<Value>Live.GroovePool.GroovePool.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the groove pool.</Doc>
<Value>Live.GroovePool.GroovePool.grooves<Description>Value</Description></Value>
<Doc>Access to the list of grooves</Doc>
<Value>Live.GroovePool.GroovePool.grooves_has_listener()<Description>Value</Description></Value>
<Doc>grooves_has_listener( (GroovePool)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "grooves". C++ signature :  bool grooves_has_listener(TPyHandle&lt;AGroovePool&gt;,boost::python::api::object)</Doc>
<Value>Live.GroovePool.GroovePool.remove_grooves_listener()<Description>Value</Description></Value>
<Doc>remove_grooves_listener( (GroovePool)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "grooves". C++ signature :  void remove_grooves_listener(TPyHandle&lt;AGroovePool&gt;,boost::python::api::object)</Doc>
<Module>Live.HybridReverbDevice<Description>Module</Description></Module>
<Class>Live.HybridReverbDevice.HybridReverbDevice<Description>Class</Description></Class>
<Doc>This class represents a Hybrid Reverb device.</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.add_ir_attack_time_listener()<Description>Built-In</Description></Built-In>
<Doc>add_ir_attack_time_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "ir_attack_time" has changed. C++ signature :  void add_ir_attack_time_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.add_ir_category_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_ir_category_index_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "ir_category_index" has changed. C++ signature :  void add_ir_category_index_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.add_ir_decay_time_listener()<Description>Built-In</Description></Built-In>
<Doc>add_ir_decay_time_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "ir_decay_time" has changed. C++ signature :  void add_ir_decay_time_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.add_ir_file_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_ir_file_index_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "ir_file_index" has changed. C++ signature :  void add_ir_file_index_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.add_ir_file_list_listener()<Description>Built-In</Description></Built-In>
<Doc>add_ir_file_list_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "ir_file_list" has changed. C++ signature :  void add_ir_file_list_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.add_ir_size_factor_listener()<Description>Built-In</Description></Built-In>
<Doc>add_ir_size_factor_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "ir_size_factor" has changed. C++ signature :  void add_ir_size_factor_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.add_ir_time_shaping_on_listener()<Description>Built-In</Description></Built-In>
<Doc>add_ir_time_shaping_on_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "ir_time_shaping_on" has changed. C++ signature :  void add_ir_time_shaping_on_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.add_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.add_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.add_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.add_name_listener()<Description>Built-In</Description></Built-In>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.add_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.ir_attack_time_has_listener()<Description>Built-In</Description></Built-In>
<Doc>ir_attack_time_has_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "ir_attack_time". C++ signature :  bool ir_attack_time_has_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.ir_category_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>ir_category_index_has_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "ir_category_index". C++ signature :  bool ir_category_index_has_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.ir_decay_time_has_listener()<Description>Built-In</Description></Built-In>
<Doc>ir_decay_time_has_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "ir_decay_time". C++ signature :  bool ir_decay_time_has_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.ir_file_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>ir_file_index_has_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "ir_file_index". C++ signature :  bool ir_file_index_has_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.ir_file_list_has_listener()<Description>Built-In</Description></Built-In>
<Doc>ir_file_list_has_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "ir_file_list". C++ signature :  bool ir_file_list_has_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.ir_size_factor_has_listener()<Description>Built-In</Description></Built-In>
<Doc>ir_size_factor_has_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "ir_size_factor". C++ signature :  bool ir_size_factor_has_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.ir_time_shaping_on_has_listener()<Description>Built-In</Description></Built-In>
<Doc>ir_time_shaping_on_has_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "ir_time_shaping_on". C++ signature :  bool ir_time_shaping_on_has_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.is_active_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.latency_in_ms_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.latency_in_samples_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.name_has_listener()<Description>Built-In</Description></Built-In>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.parameters_has_listener()<Description>Built-In</Description></Built-In>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.remove_ir_attack_time_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_ir_attack_time_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "ir_attack_time". C++ signature :  void remove_ir_attack_time_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.remove_ir_category_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_ir_category_index_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "ir_category_index". C++ signature :  void remove_ir_category_index_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.remove_ir_decay_time_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_ir_decay_time_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "ir_decay_time". C++ signature :  void remove_ir_decay_time_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.remove_ir_file_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_ir_file_index_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "ir_file_index". C++ signature :  void remove_ir_file_index_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.remove_ir_file_list_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_ir_file_list_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "ir_file_list". C++ signature :  void remove_ir_file_list_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.remove_ir_size_factor_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_ir_size_factor_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "ir_size_factor". C++ signature :  void remove_ir_size_factor_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.remove_ir_time_shaping_on_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_ir_time_shaping_on_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "ir_time_shaping_on". C++ signature :  void remove_ir_time_shaping_on_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.remove_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.remove_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.remove_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.remove_name_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.remove_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.store_chosen_bank()<Description>Built-In</Description></Built-In>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.View<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice._live_ptr<Description>Value</Description></Value>
<Value>Live.HybridReverbDevice.HybridReverbDevice.add_ir_attack_time_listener()<Description>Value</Description></Value>
<Doc>add_ir_attack_time_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "ir_attack_time" has changed. C++ signature :  void add_ir_attack_time_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.add_ir_category_index_listener()<Description>Value</Description></Value>
<Doc>add_ir_category_index_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "ir_category_index" has changed. C++ signature :  void add_ir_category_index_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.add_ir_decay_time_listener()<Description>Value</Description></Value>
<Doc>add_ir_decay_time_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "ir_decay_time" has changed. C++ signature :  void add_ir_decay_time_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.add_ir_file_index_listener()<Description>Value</Description></Value>
<Doc>add_ir_file_index_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "ir_file_index" has changed. C++ signature :  void add_ir_file_index_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.add_ir_file_list_listener()<Description>Value</Description></Value>
<Doc>add_ir_file_list_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "ir_file_list" has changed. C++ signature :  void add_ir_file_list_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.add_ir_size_factor_listener()<Description>Value</Description></Value>
<Doc>add_ir_size_factor_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "ir_size_factor" has changed. C++ signature :  void add_ir_size_factor_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.add_ir_time_shaping_on_listener()<Description>Value</Description></Value>
<Doc>add_ir_time_shaping_on_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "ir_time_shaping_on" has changed. C++ signature :  void add_ir_time_shaping_on_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.add_is_active_listener()<Description>Value</Description></Value>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.add_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.add_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.add_name_listener()<Description>Value</Description></Value>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.add_parameters_listener()<Description>Value</Description></Value>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.can_have_chains<Description>Value</Description></Value>
<Doc>Returns true if the device is a rack.</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.can_have_drum_pads<Description>Value</Description></Value>
<Doc>Returns true if the device is a drum rack.</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the Device.</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.class_display_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class name as displayed in Live's browser and device chain</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.class_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class.</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.ir_attack_time<Description>Value</Description></Value>
<Doc>Return the current IrAttackTime</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.ir_attack_time_has_listener()<Description>Value</Description></Value>
<Doc>ir_attack_time_has_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "ir_attack_time". C++ signature :  bool ir_attack_time_has_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.ir_category_index<Description>Value</Description></Value>
<Doc>Return the current IR category index</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.ir_category_index_has_listener()<Description>Value</Description></Value>
<Doc>ir_category_index_has_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "ir_category_index". C++ signature :  bool ir_category_index_has_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.ir_category_list<Description>Value</Description></Value>
<Doc>Return the current IR categories list</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.ir_decay_time<Description>Value</Description></Value>
<Doc>Return the current IrDecayTime</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.ir_decay_time_has_listener()<Description>Value</Description></Value>
<Doc>ir_decay_time_has_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "ir_decay_time". C++ signature :  bool ir_decay_time_has_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.ir_file_index<Description>Value</Description></Value>
<Doc>Return the current IR file index</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.ir_file_index_has_listener()<Description>Value</Description></Value>
<Doc>ir_file_index_has_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "ir_file_index". C++ signature :  bool ir_file_index_has_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.ir_file_list<Description>Value</Description></Value>
<Doc>Return the current IR file list</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.ir_file_list_has_listener()<Description>Value</Description></Value>
<Doc>ir_file_list_has_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "ir_file_list". C++ signature :  bool ir_file_list_has_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.ir_size_factor<Description>Value</Description></Value>
<Doc>Return the current IrSizeFactor</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.ir_size_factor_has_listener()<Description>Value</Description></Value>
<Doc>ir_size_factor_has_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "ir_size_factor". C++ signature :  bool ir_size_factor_has_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.ir_time_shaping_on<Description>Value</Description></Value>
<Doc>Return the current IrTimeShapingOn</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.ir_time_shaping_on_has_listener()<Description>Value</Description></Value>
<Doc>ir_time_shaping_on_has_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "ir_time_shaping_on". C++ signature :  bool ir_time_shaping_on_has_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.is_active<Description>Value</Description></Value>
<Doc>Return const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off.</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.is_active_has_listener()<Description>Value</Description></Value>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.latency_in_ms<Description>Value</Description></Value>
<Doc>Returns the latency of the device in ms.</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.latency_in_ms_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.latency_in_samples<Description>Value</Description></Value>
<Doc>Returns the latency of the device in samples.</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.latency_in_samples_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.name<Description>Value</Description></Value>
<Doc>Return access to the name of the device.</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.name_has_listener()<Description>Value</Description></Value>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.parameters<Description>Value</Description></Value>
<Doc>Const access to the list of available automatable parameters for this device.</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.parameters_has_listener()<Description>Value</Description></Value>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.remove_ir_attack_time_listener()<Description>Value</Description></Value>
<Doc>remove_ir_attack_time_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "ir_attack_time". C++ signature :  void remove_ir_attack_time_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.remove_ir_category_index_listener()<Description>Value</Description></Value>
<Doc>remove_ir_category_index_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "ir_category_index". C++ signature :  void remove_ir_category_index_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.remove_ir_decay_time_listener()<Description>Value</Description></Value>
<Doc>remove_ir_decay_time_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "ir_decay_time". C++ signature :  void remove_ir_decay_time_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.remove_ir_file_index_listener()<Description>Value</Description></Value>
<Doc>remove_ir_file_index_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "ir_file_index". C++ signature :  void remove_ir_file_index_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.remove_ir_file_list_listener()<Description>Value</Description></Value>
<Doc>remove_ir_file_list_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "ir_file_list". C++ signature :  void remove_ir_file_list_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.remove_ir_size_factor_listener()<Description>Value</Description></Value>
<Doc>remove_ir_size_factor_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "ir_size_factor". C++ signature :  void remove_ir_size_factor_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.remove_ir_time_shaping_on_listener()<Description>Value</Description></Value>
<Doc>remove_ir_time_shaping_on_listener( (HybridReverbDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "ir_time_shaping_on". C++ signature :  void remove_ir_time_shaping_on_listener(THybridReverbDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.remove_is_active_listener()<Description>Value</Description></Value>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.remove_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.remove_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.remove_name_listener()<Description>Value</Description></Value>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.remove_parameters_listener()<Description>Value</Description></Value>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.store_chosen_bank()<Description>Value</Description></Value>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.type<Description>Value</Description></Value>
<Doc>Return the type of the device.</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.view<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Class>Live.HybridReverbDevice.HybridReverbDevice.View<Description>Class</Description></Class>
<Doc>Representing the view aspects of a device.</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.View.add_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.View.is_collapsed_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.HybridReverbDevice.HybridReverbDevice.View.remove_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.View.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.View._live_ptr<Description>Value</Description></Value>
<Value>Live.HybridReverbDevice.HybridReverbDevice.View.add_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.View.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the View.</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.View.is_collapsed<Description>Value</Description></Value>
<Doc>Get/Set/Listen if the device is shown collapsed in the device chain.</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.View.is_collapsed_has_listener()<Description>Value</Description></Value>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.HybridReverbDevice.HybridReverbDevice.View.remove_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Module>Live.Licensing<Description>Module</Description></Module>
<Built-In>Live.Licensing.get_authorization_page_url()<Description>Built-In</Description></Built-In>
<Doc>get_authorization_page_url( (bool)reauthorize, (bool)is_trial) -&gt; str : Retrieves the appopriate URL on ableton.com where the unser can initiate the authorization. C++ signature :  TString get_authorization_page_url(bool,bool)</Doc>
<Built-In>Live.Licensing.get_services_url()<Description>Built-In</Description></Built-In>
<Doc>get_services_url() -&gt; str : Returns the URL against which service calls (e.g. for authorization) can be performed. C++ signature :  std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; get_services_url()</Doc>
<Built-In>Live.Licensing.get_unlock_dir()<Description>Built-In</Description></Built-In>
<Doc>get_unlock_dir() -&gt; tuple : Returns a tuple containing the unlock file directory and a flag indicating if the unlock file is in the system domain. C++ signature :  boost::python::tuple get_unlock_dir()</Doc>
<Built-In>Live.Licensing.launch_web_browser()<Description>Built-In</Description></Built-In>
<Doc>launch_web_browser( (str)url) -&gt; None : Opens a web browser at the specified URL on the user's computer. C++ signature :  void launch_web_browser(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;)</Doc>
<Class>Live.Licensing.ProgressDialog<Description>Class</Description></Class>
<Doc>A modal dialog showing a message and a progress animation.</Doc>
<Built-In>Live.Licensing.ProgressDialog.end_modal_loop()<Description>Built-In</Description></Built-In>
<Doc>end_modal_loop( (ProgressDialog)arg1) -&gt; None : C++ signature :  void end_modal_loop(AProgressDialog {lvalue})</Doc>
<Built-In>Live.Licensing.ProgressDialog.run_in_modal_loop()<Description>Built-In</Description></Built-In>
<Doc>run_in_modal_loop( (ProgressDialog)arg1) -&gt; None : C++ signature :  void run_in_modal_loop(AProgressDialog {lvalue})</Doc>
<Built-In>Live.Licensing.ProgressDialog.set_status_message()<Description>Built-In</Description></Built-In>
<Doc>set_status_message( (object)arg1, (str)msg) -&gt; None : C++ signature :  void set_status_message(TWeakPtr&lt;AProgressDialog&gt;,std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;)</Doc>
<Value>Live.Licensing.ProgressDialog.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Licensing.ProgressDialog.end_modal_loop()<Description>Value</Description></Value>
<Doc>end_modal_loop( (ProgressDialog)arg1) -&gt; None : C++ signature :  void end_modal_loop(AProgressDialog {lvalue})</Doc>
<Value>Live.Licensing.ProgressDialog.run_in_modal_loop()<Description>Value</Description></Value>
<Doc>run_in_modal_loop( (ProgressDialog)arg1) -&gt; None : C++ signature :  void run_in_modal_loop(AProgressDialog {lvalue})</Doc>
<Value>Live.Licensing.ProgressDialog.set_status_message()<Description>Value</Description></Value>
<Doc>set_status_message( (object)arg1, (str)msg) -&gt; None : C++ signature :  void set_status_message(TWeakPtr&lt;AProgressDialog&gt;,std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;)</Doc>
<Class>Live.Licensing.PythonLicensingBridge<Description>Class</Description></Class>
<Doc>Interface to the internal licensing services.</Doc>
<Built-In>Live.Licensing.PythonLicensingBridge.authorize_with_sassafras()<Description>Built-In</Description></Built-In>
<Doc>authorize_with_sassafras( (PythonLicensingBridge)arg1) -&gt; None : C++ signature :  void authorize_with_sassafras(APythonLicensingBridge {lvalue})</Doc>
<Built-In>Live.Licensing.PythonLicensingBridge.create_new_live_set()<Description>Built-In</Description></Built-In>
<Doc>create_new_live_set( (PythonLicensingBridge)arg1) -&gt; None : Creates a new live set and discards unsaved changes. C++ signature :  void create_new_live_set(APythonLicensingBridge {lvalue})</Doc>
<Built-In>Live.Licensing.PythonLicensingBridge.deauthenticate_user()<Description>Built-In</Description></Built-In>
<Doc>deauthenticate_user( (PythonLicensingBridge)arg1) -&gt; None : Deletes the current session ID. C++ signature :  void deauthenticate_user(APythonLicensingBridge {lvalue})</Doc>
<Built-In>Live.Licensing.PythonLicensingBridge.get_progress_dialog()<Description>Built-In</Description></Built-In>
<Doc>get_progress_dialog( (PythonLicensingBridge)arg1) -&gt; ProgressDialog : Retrieves an instance of ProgressDialog. C++ signature :  TWeakPtr&lt;AProgressDialog&gt; get_progress_dialog(APythonLicensingBridge {lvalue})</Doc>
<Built-In>Live.Licensing.PythonLicensingBridge.get_session_id()<Description>Built-In</Description></Built-In>
<Doc>get_session_id( (PythonLicensingBridge)arg1) -&gt; str : Retrieve stored session ID. C++ signature :  std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; get_session_id(APythonLicensingBridge {lvalue})</Doc>
<Built-In>Live.Licensing.PythonLicensingBridge.get_startup_dialog()<Description>Built-In</Description></Built-In>
<Doc>get_startup_dialog( (PythonLicensingBridge)arg1, (object)authorize_callable, (object)authorize_later_callable) -&gt; StartupDialogServes as an entry point for the user to authorize Live on first launch. : Retrieves an instance of the startup dialog with the passed callables connected to its buttons. C++ signature :  TWeakPtr&lt;AStartupDialog&gt; get_startup_dialog(APythonLicensingBridge {lvalue},boost::python::api::object,boost::python::api::object)</Doc>
<Built-In>Live.Licensing.PythonLicensingBridge.get_trial_time_left()<Description>Built-In</Description></Built-In>
<Doc>get_trial_time_left( (PythonLicensingBridge)arg1) -&gt; str : Returns remaining time on a trial as a formatted string. C++ signature :  TString get_trial_time_left(APythonLicensingBridge {lvalue})</Doc>
<Built-In>Live.Licensing.PythonLicensingBridge.load_and_convert_legacy_unlock_cfg()<Description>Built-In</Description></Built-In>
<Doc>load_and_convert_legacy_unlock_cfg( (PythonLicensingBridge)arg1) -&gt; dict : Loads the Unlock.cfg file and returns either an empty dict or one that can be converted to an UnlockData object. C++ signature :  boost::python::dict load_and_convert_legacy_unlock_cfg(APythonLicensingBridge {lvalue})</Doc>
<Built-In>Live.Licensing.PythonLicensingBridge.process_license_response()<Description>Built-In</Description></Built-In>
<Doc>process_license_response( (PythonLicensingBridge)arg1, (list)license_response_lines) -&gt; UnlockStatus : Processes a list of strings, each representing a server response to a product authorization. C++ signature :  TUnlockStatus process_license_response(APythonLicensingBridge {lvalue},boost::python::list)</Doc>
<Built-In>Live.Licensing.PythonLicensingBridge.process_trial_response()<Description>Built-In</Description></Built-In>
<Doc>process_trial_response( (PythonLicensingBridge)arg1, (str)trial_response_line) -&gt; bool : Process the server's response to a Trial authorization. C++ signature :  bool process_trial_response(APythonLicensingBridge {lvalue},std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;)</Doc>
<Built-In>Live.Licensing.PythonLicensingBridge.save_current_set()<Description>Built-In</Description></Built-In>
<Doc>save_current_set( (PythonLicensingBridge)arg1) -&gt; None : Saves the current Live session. C++ signature :  void save_current_set(APythonLicensingBridge {lvalue})</Doc>
<Built-In>Live.Licensing.PythonLicensingBridge.set_network_timer()<Description>Built-In</Description></Built-In>
<Doc>set_network_timer( (PythonLicensingBridge)arg1, (object)callback, (int)interval_in_ms) -&gt; None : Starts or stops a timer meant for driving network operations. Pass None as callback to stop the timer. If any callback invocation raises an exception, the timer is stopped. C++ signature :  void set_network_timer(APythonLicensingBridge {lvalue},boost::python::api::object,int)</Doc>
<Built-In>Live.Licensing.PythonLicensingBridge.store_session_id()<Description>Built-In</Description></Built-In>
<Doc>store_session_id( (PythonLicensingBridge)arg1, (str)session_id) -&gt; None : Securely stores the user's session ID (aka cookie, aka credentials). C++ signature :  void store_session_id(APythonLicensingBridge {lvalue},std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;)</Doc>
<Value>Live.Licensing.PythonLicensingBridge.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Licensing.PythonLicensingBridge.authorize_with_sassafras()<Description>Value</Description></Value>
<Doc>authorize_with_sassafras( (PythonLicensingBridge)arg1) -&gt; None : C++ signature :  void authorize_with_sassafras(APythonLicensingBridge {lvalue})</Doc>
<Value>Live.Licensing.PythonLicensingBridge.base_product_id<Description>Value</Description></Value>
<Doc>Returns Live's current base product ID.</Doc>
<Value>Live.Licensing.PythonLicensingBridge.create_new_live_set()<Description>Value</Description></Value>
<Doc>create_new_live_set( (PythonLicensingBridge)arg1) -&gt; None : Creates a new live set and discards unsaved changes. C++ signature :  void create_new_live_set(APythonLicensingBridge {lvalue})</Doc>
<Value>Live.Licensing.PythonLicensingBridge.deauthenticate_user()<Description>Value</Description></Value>
<Doc>deauthenticate_user( (PythonLicensingBridge)arg1) -&gt; None : Deletes the current session ID. C++ signature :  void deauthenticate_user(APythonLicensingBridge {lvalue})</Doc>
<Value>Live.Licensing.PythonLicensingBridge.get_progress_dialog()<Description>Value</Description></Value>
<Doc>get_progress_dialog( (PythonLicensingBridge)arg1) -&gt; ProgressDialog : Retrieves an instance of ProgressDialog. C++ signature :  TWeakPtr&lt;AProgressDialog&gt; get_progress_dialog(APythonLicensingBridge {lvalue})</Doc>
<Value>Live.Licensing.PythonLicensingBridge.get_session_id()<Description>Value</Description></Value>
<Doc>get_session_id( (PythonLicensingBridge)arg1) -&gt; str : Retrieve stored session ID. C++ signature :  std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; get_session_id(APythonLicensingBridge {lvalue})</Doc>
<Value>Live.Licensing.PythonLicensingBridge.get_startup_dialog()<Description>Value</Description></Value>
<Doc>get_startup_dialog( (PythonLicensingBridge)arg1, (object)authorize_callable, (object)authorize_later_callable) -&gt; StartupDialogServes as an entry point for the user to authorize Live on first launch. : Retrieves an instance of the startup dialog with the passed callables connected to its buttons. C++ signature :  TWeakPtr&lt;AStartupDialog&gt; get_startup_dialog(APythonLicensingBridge {lvalue},boost::python::api::object,boost::python::api::object)</Doc>
<Value>Live.Licensing.PythonLicensingBridge.get_trial_time_left()<Description>Value</Description></Value>
<Doc>get_trial_time_left( (PythonLicensingBridge)arg1) -&gt; str : Returns remaining time on a trial as a formatted string. C++ signature :  TString get_trial_time_left(APythonLicensingBridge {lvalue})</Doc>
<Value>Live.Licensing.PythonLicensingBridge.in_sassafras_mode<Description>Value</Description></Value>
<Value>Live.Licensing.PythonLicensingBridge.license_must_match_variant<Description>Value</Description></Value>
<Doc>Returns a bool indicating if we require the license information returned by the server to match the variant of Live.</Doc>
<Value>Live.Licensing.PythonLicensingBridge.load_and_convert_legacy_unlock_cfg()<Description>Value</Description></Value>
<Doc>load_and_convert_legacy_unlock_cfg( (PythonLicensingBridge)arg1) -&gt; dict : Loads the Unlock.cfg file and returns either an empty dict or one that can be converted to an UnlockData object. C++ signature :  boost::python::dict load_and_convert_legacy_unlock_cfg(APythonLicensingBridge {lvalue})</Doc>
<Value>Live.Licensing.PythonLicensingBridge.process_license_response()<Description>Value</Description></Value>
<Doc>process_license_response( (PythonLicensingBridge)arg1, (list)license_response_lines) -&gt; UnlockStatus : Processes a list of strings, each representing a server response to a product authorization. C++ signature :  TUnlockStatus process_license_response(APythonLicensingBridge {lvalue},boost::python::list)</Doc>
<Value>Live.Licensing.PythonLicensingBridge.process_trial_response()<Description>Value</Description></Value>
<Doc>process_trial_response( (PythonLicensingBridge)arg1, (str)trial_response_line) -&gt; bool : Process the server's response to a Trial authorization. C++ signature :  bool process_trial_response(APythonLicensingBridge {lvalue},std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;)</Doc>
<Value>Live.Licensing.PythonLicensingBridge.random_number_for_trial_authorization<Description>Value</Description></Value>
<Doc>Returns the integer to send along with the Trial authorization request. This same integer will be checked for in `process_trial_response` (and then changed).</Doc>
<Value>Live.Licensing.PythonLicensingBridge.save_current_set()<Description>Value</Description></Value>
<Doc>save_current_set( (PythonLicensingBridge)arg1) -&gt; None : Saves the current Live session. C++ signature :  void save_current_set(APythonLicensingBridge {lvalue})</Doc>
<Value>Live.Licensing.PythonLicensingBridge.set_has_unsaved_changes<Description>Value</Description></Value>
<Doc>Returns true if the set has unsaved changes.</Doc>
<Value>Live.Licensing.PythonLicensingBridge.set_network_timer()<Description>Value</Description></Value>
<Doc>set_network_timer( (PythonLicensingBridge)arg1, (object)callback, (int)interval_in_ms) -&gt; None : Starts or stops a timer meant for driving network operations. Pass None as callback to stop the timer. If any callback invocation raises an exception, the timer is stopped. C++ signature :  void set_network_timer(APythonLicensingBridge {lvalue},boost::python::api::object,int)</Doc>
<Value>Live.Licensing.PythonLicensingBridge.store_session_id()<Description>Value</Description></Value>
<Doc>store_session_id( (PythonLicensingBridge)arg1, (str)session_id) -&gt; None : Securely stores the user's session ID (aka cookie, aka credentials). C++ signature :  void store_session_id(APythonLicensingBridge {lvalue},std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;)</Doc>
<Class>Live.Licensing.StartupDialogServes as an entry point for the user to authorize Live on first launch.<Description>Class</Description></Class>
<Built-In>Live.Licensing.StartupDialogServes as an entry point for the user to authorize Live on first launch..end_modal_loop()<Description>Built-In</Description></Built-In>
<Doc>end_modal_loop( (StartupDialogServes as an entry point for the user to authorize Live on first launch.)arg1) -&gt; None : C++ signature :  void end_modal_loop(AStartupDialog {lvalue})</Doc>
<Built-In>Live.Licensing.StartupDialogServes as an entry point for the user to authorize Live on first launch..run_in_modal_loop()<Description>Built-In</Description></Built-In>
<Doc>run_in_modal_loop( (StartupDialogServes as an entry point for the user to authorize Live on first launch.)arg1, (bool)show_only_offline_auth_instructions) -&gt; None : C++ signature :  void run_in_modal_loop(AStartupDialog {lvalue},bool)</Doc>
<Built-In>Live.Licensing.StartupDialogServes as an entry point for the user to authorize Live on first launch..set_notification_message()<Description>Built-In</Description></Built-In>
<Doc>set_notification_message( (StartupDialogServes as an entry point for the user to authorize Live on first launch.)arg1, (object)notification_text, (bool)show_progress_bar) -&gt; None : C++ signature :  void set_notification_message(AStartupDialog {lvalue},TString,bool)</Doc>
<Value>Live.Licensing.StartupDialogServes as an entry point for the user to authorize Live on first launch..class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Licensing.StartupDialogServes as an entry point for the user to authorize Live on first launch..end_modal_loop()<Description>Value</Description></Value>
<Doc>end_modal_loop( (StartupDialogServes as an entry point for the user to authorize Live on first launch.)arg1) -&gt; None : C++ signature :  void end_modal_loop(AStartupDialog {lvalue})</Doc>
<Value>Live.Licensing.StartupDialogServes as an entry point for the user to authorize Live on first launch..run_in_modal_loop()<Description>Value</Description></Value>
<Doc>run_in_modal_loop( (StartupDialogServes as an entry point for the user to authorize Live on first launch.)arg1, (bool)show_only_offline_auth_instructions) -&gt; None : C++ signature :  void run_in_modal_loop(AStartupDialog {lvalue},bool)</Doc>
<Value>Live.Licensing.StartupDialogServes as an entry point for the user to authorize Live on first launch..set_notification_message()<Description>Value</Description></Value>
<Doc>set_notification_message( (StartupDialogServes as an entry point for the user to authorize Live on first launch.)arg1, (object)notification_text, (bool)show_progress_bar) -&gt; None : C++ signature :  void set_notification_message(AStartupDialog {lvalue},TString,bool)</Doc>
<Class>Live.Licensing.TrialContext<Description>Class</Description></Class>
<Built-In>Live.Licensing.TrialContext.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Licensing.TrialContext.FORCE_UPDATE<Description>Value</Description></Value>
<Value>Live.Licensing.TrialContext.SAVE<Description>Value</Description></Value>
<Value>Live.Licensing.TrialContext.STARTUP<Description>Value</Description></Value>
<Doc>abs(self)</Doc>
<Value>Live.Licensing.TrialContext.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Licensing.TrialContext.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.Licensing.TrialContext.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.Licensing.TrialContext.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.Licensing.TrialContext.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Licensing.TrialContext.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.Licensing.TrialContext.name<Description>Value</Description></Value>
<Value>Live.Licensing.TrialContext.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.Licensing.TrialContext.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.Licensing.TrialContext.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.Licensing.TrialContext.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.Licensing.TrialContext.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.Licensing.UnlockStatus<Description>Class</Description></Class>
<Doc>Returns relevant information after unlock</Doc>
<Value>Live.Licensing.UnlockStatus.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Licensing.UnlockStatus.authorization_expired<Description>Value</Description></Value>
<Value>Live.Licensing.UnlockStatus.has_max_unlock_products<Description>Value</Description></Value>
<Value>Live.Licensing.UnlockStatus.temp_demo_mode<Description>Value</Description></Value>
<Value>Live.Licensing.UnlockStatus.unlock_error<Description>Value</Description></Value>
<Value>Live.Licensing.UnlockStatus.unlocked<Description>Value</Description></Value>
<Module>Live.Listener<Description>Module</Description></Module>
<Class>Live.Listener.ListenerHandle<Description>Class</Description></Class>
<Doc>This class represents a Python listener when connected to a Live property.</Doc>
<Built-In>Live.Listener.ListenerHandle.disconnect()<Description>Built-In</Description></Built-In>
<Doc>disconnect( (ListenerHandle)arg1) -&gt; None : Disconnects the listener from its property C++ signature :  void disconnect(LPythonRemote {lvalue})</Doc>
<Value>Live.Listener.ListenerHandle.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Listener.ListenerHandle.disconnect()<Description>Value</Description></Value>
<Doc>disconnect( (ListenerHandle)arg1) -&gt; None : Disconnects the listener from its property C++ signature :  void disconnect(LPythonRemote {lvalue})</Doc>
<Value>Live.Listener.ListenerHandle.listener_func<Description>Value</Description></Value>
<Doc>Returns the original function</Doc>
<Value>Live.Listener.ListenerHandle.listener_self<Description>Value</Description></Value>
<Doc>Returns the weak reference to original self, if it was a bound method</Doc>
<Value>Live.Listener.ListenerHandle.name<Description>Value</Description></Value>
<Doc>Prints the name of the property that this listener is connected to</Doc>
<Class>Live.Listener.ListenerVector<Description>Class</Description></Class>
<Doc>A read only container for accessing a list of listeners.</Doc>
<Built-In>Live.Listener.ListenerVector.append()<Description>Built-In</Description></Built-In>
<Doc>append( (ListenerVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;TWeakPtr&lt;LPythonRemote&gt;, std::__1::allocator&lt;TWeakPtr&lt;LPythonRemote&gt;&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Built-In>Live.Listener.ListenerVector.extend()<Description>Built-In</Description></Built-In>
<Doc>extend( (ListenerVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;TWeakPtr&lt;LPythonRemote&gt;, std::__1::allocator&lt;TWeakPtr&lt;LPythonRemote&gt;&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Listener.ListenerVector.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Listener.ListenerVector.append()<Description>Value</Description></Value>
<Doc>append( (ListenerVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;TWeakPtr&lt;LPythonRemote&gt;, std::__1::allocator&lt;TWeakPtr&lt;LPythonRemote&gt;&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Listener.ListenerVector.extend()<Description>Value</Description></Value>
<Doc>extend( (ListenerVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;TWeakPtr&lt;LPythonRemote&gt;, std::__1::allocator&lt;TWeakPtr&lt;LPythonRemote&gt;&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Module>Live.LomObject<Description>Module</Description></Module>
<Class>Live.LomObject.LomObject<Description>Class</Description></Class>
<Doc>this is the base class for an object that is accessible via the LOM</Doc>
<Value>Live.LomObject.LomObject.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.LomObject.LomObject._live_ptr<Description>Value</Description></Value>
<Module>Live.LooperDevice<Description>Module</Description></Module>
<Class>Live.LooperDevice.LooperDevice<Description>Class</Description></Class>
<Doc>This class represents a Looper device.</Doc>
<Built-In>Live.LooperDevice.LooperDevice.add_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.add_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.add_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.add_loop_length_listener()<Description>Built-In</Description></Built-In>
<Doc>add_loop_length_listener( (LooperDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "loop_length" has changed. C++ signature :  void add_loop_length_listener(TLooperDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.add_name_listener()<Description>Built-In</Description></Built-In>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.add_overdub_after_record_listener()<Description>Built-In</Description></Built-In>
<Doc>add_overdub_after_record_listener( (LooperDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "overdub_after_record" has changed. C++ signature :  void add_overdub_after_record_listener(TLooperDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.add_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.add_record_length_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_record_length_index_listener( (LooperDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "record_length_index" has changed. C++ signature :  void add_record_length_index_listener(TLooperDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.add_tempo_listener()<Description>Built-In</Description></Built-In>
<Doc>add_tempo_listener( (LooperDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "tempo" has changed. C++ signature :  void add_tempo_listener(TLooperDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.clear()<Description>Built-In</Description></Built-In>
<Doc>clear( (LooperDevice)arg1) -&gt; None : Erase Looper's recorded content. C++ signature :  void clear(TLooperDevicePyHandle)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.double_length()<Description>Built-In</Description></Built-In>
<Doc>double_length( (LooperDevice)arg1) -&gt; None : Double the length of Looper's buffer. C++ signature :  void double_length(TLooperDevicePyHandle)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.double_speed()<Description>Built-In</Description></Built-In>
<Doc>double_speed( (LooperDevice)arg1) -&gt; None : Double the speed of Looper's playback. C++ signature :  void double_speed(TLooperDevicePyHandle)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.export_to_clip_slot()<Description>Built-In</Description></Built-In>
<Doc>export_to_clip_slot( (LooperDevice)arg1, (ClipSlot)arg2) -&gt; None : Export Looper's content to a Session Clip Slot. C++ signature :  void export_to_clip_slot(TLooperDevicePyHandle,TPyHandle&lt;AGroupAndClipSlotBase&gt;)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.half_length()<Description>Built-In</Description></Built-In>
<Doc>half_length( (LooperDevice)arg1) -&gt; None : Halve the length of Looper's buffer. C++ signature :  void half_length(TLooperDevicePyHandle)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.half_speed()<Description>Built-In</Description></Built-In>
<Doc>half_speed( (LooperDevice)arg1) -&gt; None : Halve the speed of Looper's playback. C++ signature :  void half_speed(TLooperDevicePyHandle)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.is_active_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.latency_in_ms_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.latency_in_samples_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.loop_length_has_listener()<Description>Built-In</Description></Built-In>
<Doc>loop_length_has_listener( (LooperDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "loop_length". C++ signature :  bool loop_length_has_listener(TLooperDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.name_has_listener()<Description>Built-In</Description></Built-In>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.overdub()<Description>Built-In</Description></Built-In>
<Doc>overdub( (LooperDevice)arg1) -&gt; None : Play back while adding additional layers of incoming audio. C++ signature :  void overdub(TLooperDevicePyHandle)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.overdub_after_record_has_listener()<Description>Built-In</Description></Built-In>
<Doc>overdub_after_record_has_listener( (LooperDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "overdub_after_record". C++ signature :  bool overdub_after_record_has_listener(TLooperDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.parameters_has_listener()<Description>Built-In</Description></Built-In>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.play()<Description>Built-In</Description></Built-In>
<Doc>play( (LooperDevice)arg1) -&gt; None : Play back without overdubbing. C++ signature :  void play(TLooperDevicePyHandle)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.record()<Description>Built-In</Description></Built-In>
<Doc>record( (LooperDevice)arg1) -&gt; None : Record incoming audio. C++ signature :  void record(TLooperDevicePyHandle)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.record_length_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>record_length_index_has_listener( (LooperDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "record_length_index". C++ signature :  bool record_length_index_has_listener(TLooperDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.remove_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.remove_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.remove_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.remove_loop_length_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_loop_length_listener( (LooperDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "loop_length". C++ signature :  void remove_loop_length_listener(TLooperDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.remove_name_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.remove_overdub_after_record_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_overdub_after_record_listener( (LooperDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "overdub_after_record". C++ signature :  void remove_overdub_after_record_listener(TLooperDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.remove_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.remove_record_length_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_record_length_index_listener( (LooperDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "record_length_index". C++ signature :  void remove_record_length_index_listener(TLooperDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.remove_tempo_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_tempo_listener( (LooperDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "tempo". C++ signature :  void remove_tempo_listener(TLooperDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.stop()<Description>Built-In</Description></Built-In>
<Doc>stop( (LooperDevice)arg1) -&gt; None : Stop Looper's playback. C++ signature :  void stop(TLooperDevicePyHandle)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.store_chosen_bank()<Description>Built-In</Description></Built-In>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.tempo_has_listener()<Description>Built-In</Description></Built-In>
<Doc>tempo_has_listener( (LooperDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "tempo". C++ signature :  bool tempo_has_listener(TLooperDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.undo()<Description>Built-In</Description></Built-In>
<Doc>undo( (LooperDevice)arg1) -&gt; None : Erase everything that was recorded since the last time Overdub was enabled. Calling a second time will restore the material erased by the previous undooperation. C++ signature :  void undo(TLooperDevicePyHandle)</Doc>
<Value>Live.LooperDevice.LooperDevice.View<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Value>Live.LooperDevice.LooperDevice.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.LooperDevice.LooperDevice._live_ptr<Description>Value</Description></Value>
<Value>Live.LooperDevice.LooperDevice.add_is_active_listener()<Description>Value</Description></Value>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.add_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.add_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.add_loop_length_listener()<Description>Value</Description></Value>
<Doc>add_loop_length_listener( (LooperDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "loop_length" has changed. C++ signature :  void add_loop_length_listener(TLooperDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.add_name_listener()<Description>Value</Description></Value>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.add_overdub_after_record_listener()<Description>Value</Description></Value>
<Doc>add_overdub_after_record_listener( (LooperDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "overdub_after_record" has changed. C++ signature :  void add_overdub_after_record_listener(TLooperDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.add_parameters_listener()<Description>Value</Description></Value>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.add_record_length_index_listener()<Description>Value</Description></Value>
<Doc>add_record_length_index_listener( (LooperDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "record_length_index" has changed. C++ signature :  void add_record_length_index_listener(TLooperDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.add_tempo_listener()<Description>Value</Description></Value>
<Doc>add_tempo_listener( (LooperDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "tempo" has changed. C++ signature :  void add_tempo_listener(TLooperDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.can_have_chains<Description>Value</Description></Value>
<Doc>Returns true if the device is a rack.</Doc>
<Value>Live.LooperDevice.LooperDevice.can_have_drum_pads<Description>Value</Description></Value>
<Doc>Returns true if the device is a drum rack.</Doc>
<Value>Live.LooperDevice.LooperDevice.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the Device.</Doc>
<Value>Live.LooperDevice.LooperDevice.class_display_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class name as displayed in Live's browser and device chain</Doc>
<Value>Live.LooperDevice.LooperDevice.class_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class.</Doc>
<Value>Live.LooperDevice.LooperDevice.clear()<Description>Value</Description></Value>
<Doc>clear( (LooperDevice)arg1) -&gt; None : Erase Looper's recorded content. C++ signature :  void clear(TLooperDevicePyHandle)</Doc>
<Value>Live.LooperDevice.LooperDevice.double_length()<Description>Value</Description></Value>
<Doc>double_length( (LooperDevice)arg1) -&gt; None : Double the length of Looper's buffer. C++ signature :  void double_length(TLooperDevicePyHandle)</Doc>
<Value>Live.LooperDevice.LooperDevice.double_speed()<Description>Value</Description></Value>
<Doc>double_speed( (LooperDevice)arg1) -&gt; None : Double the speed of Looper's playback. C++ signature :  void double_speed(TLooperDevicePyHandle)</Doc>
<Value>Live.LooperDevice.LooperDevice.export_to_clip_slot()<Description>Value</Description></Value>
<Doc>export_to_clip_slot( (LooperDevice)arg1, (ClipSlot)arg2) -&gt; None : Export Looper's content to a Session Clip Slot. C++ signature :  void export_to_clip_slot(TLooperDevicePyHandle,TPyHandle&lt;AGroupAndClipSlotBase&gt;)</Doc>
<Value>Live.LooperDevice.LooperDevice.half_length()<Description>Value</Description></Value>
<Doc>half_length( (LooperDevice)arg1) -&gt; None : Halve the length of Looper's buffer. C++ signature :  void half_length(TLooperDevicePyHandle)</Doc>
<Value>Live.LooperDevice.LooperDevice.half_speed()<Description>Value</Description></Value>
<Doc>half_speed( (LooperDevice)arg1) -&gt; None : Halve the speed of Looper's playback. C++ signature :  void half_speed(TLooperDevicePyHandle)</Doc>
<Value>Live.LooperDevice.LooperDevice.is_active<Description>Value</Description></Value>
<Doc>Return const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off.</Doc>
<Value>Live.LooperDevice.LooperDevice.is_active_has_listener()<Description>Value</Description></Value>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.latency_in_ms<Description>Value</Description></Value>
<Doc>Returns the latency of the device in ms.</Doc>
<Value>Live.LooperDevice.LooperDevice.latency_in_ms_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.latency_in_samples<Description>Value</Description></Value>
<Doc>Returns the latency of the device in samples.</Doc>
<Value>Live.LooperDevice.LooperDevice.latency_in_samples_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.loop_length<Description>Value</Description></Value>
<Doc>The length of Looper's buffer.</Doc>
<Value>Live.LooperDevice.LooperDevice.loop_length_has_listener()<Description>Value</Description></Value>
<Doc>loop_length_has_listener( (LooperDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "loop_length". C++ signature :  bool loop_length_has_listener(TLooperDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.name<Description>Value</Description></Value>
<Doc>Return access to the name of the device.</Doc>
<Value>Live.LooperDevice.LooperDevice.name_has_listener()<Description>Value</Description></Value>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.overdub()<Description>Value</Description></Value>
<Doc>overdub( (LooperDevice)arg1) -&gt; None : Play back while adding additional layers of incoming audio. C++ signature :  void overdub(TLooperDevicePyHandle)</Doc>
<Value>Live.LooperDevice.LooperDevice.overdub_after_record<Description>Value</Description></Value>
<Doc>If true, Looper will switch to overdub after recording, when recording a fixed number of bars. Otherwise, the switch will be to playback without overdubbing.</Doc>
<Value>Live.LooperDevice.LooperDevice.overdub_after_record_has_listener()<Description>Value</Description></Value>
<Doc>overdub_after_record_has_listener( (LooperDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "overdub_after_record". C++ signature :  bool overdub_after_record_has_listener(TLooperDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.parameters<Description>Value</Description></Value>
<Doc>Const access to the list of available automatable parameters for this device.</Doc>
<Value>Live.LooperDevice.LooperDevice.parameters_has_listener()<Description>Value</Description></Value>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.play()<Description>Value</Description></Value>
<Doc>play( (LooperDevice)arg1) -&gt; None : Play back without overdubbing. C++ signature :  void play(TLooperDevicePyHandle)</Doc>
<Value>Live.LooperDevice.LooperDevice.record()<Description>Value</Description></Value>
<Doc>record( (LooperDevice)arg1) -&gt; None : Record incoming audio. C++ signature :  void record(TLooperDevicePyHandle)</Doc>
<Value>Live.LooperDevice.LooperDevice.record_length_index<Description>Value</Description></Value>
<Doc>Access to the Record Length chooser entry index.</Doc>
<Value>Live.LooperDevice.LooperDevice.record_length_index_has_listener()<Description>Value</Description></Value>
<Doc>record_length_index_has_listener( (LooperDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "record_length_index". C++ signature :  bool record_length_index_has_listener(TLooperDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.record_length_list<Description>Value</Description></Value>
<Doc>Read-only access to the list of Record Length chooser entry strings.</Doc>
<Value>Live.LooperDevice.LooperDevice.remove_is_active_listener()<Description>Value</Description></Value>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.remove_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.remove_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.remove_loop_length_listener()<Description>Value</Description></Value>
<Doc>remove_loop_length_listener( (LooperDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "loop_length". C++ signature :  void remove_loop_length_listener(TLooperDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.remove_name_listener()<Description>Value</Description></Value>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.remove_overdub_after_record_listener()<Description>Value</Description></Value>
<Doc>remove_overdub_after_record_listener( (LooperDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "overdub_after_record". C++ signature :  void remove_overdub_after_record_listener(TLooperDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.remove_parameters_listener()<Description>Value</Description></Value>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.remove_record_length_index_listener()<Description>Value</Description></Value>
<Doc>remove_record_length_index_listener( (LooperDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "record_length_index". C++ signature :  void remove_record_length_index_listener(TLooperDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.remove_tempo_listener()<Description>Value</Description></Value>
<Doc>remove_tempo_listener( (LooperDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "tempo". C++ signature :  void remove_tempo_listener(TLooperDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.stop()<Description>Value</Description></Value>
<Doc>stop( (LooperDevice)arg1) -&gt; None : Stop Looper's playback. C++ signature :  void stop(TLooperDevicePyHandle)</Doc>
<Value>Live.LooperDevice.LooperDevice.store_chosen_bank()<Description>Value</Description></Value>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Value>Live.LooperDevice.LooperDevice.tempo<Description>Value</Description></Value>
<Doc>The tempo of Looper's buffer.</Doc>
<Value>Live.LooperDevice.LooperDevice.tempo_has_listener()<Description>Value</Description></Value>
<Doc>tempo_has_listener( (LooperDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "tempo". C++ signature :  bool tempo_has_listener(TLooperDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.type<Description>Value</Description></Value>
<Doc>Return the type of the device.</Doc>
<Value>Live.LooperDevice.LooperDevice.undo()<Description>Value</Description></Value>
<Doc>undo( (LooperDevice)arg1) -&gt; None : Erase everything that was recorded since the last time Overdub was enabled. Calling a second time will restore the material erased by the previous undooperation. C++ signature :  void undo(TLooperDevicePyHandle)</Doc>
<Value>Live.LooperDevice.LooperDevice.view<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Class>Live.LooperDevice.LooperDevice.View<Description>Class</Description></Class>
<Doc>Representing the view aspects of a device.</Doc>
<Built-In>Live.LooperDevice.LooperDevice.View.add_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.View.is_collapsed_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.LooperDevice.LooperDevice.View.remove_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.View.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.LooperDevice.LooperDevice.View._live_ptr<Description>Value</Description></Value>
<Value>Live.LooperDevice.LooperDevice.View.add_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.View.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the View.</Doc>
<Value>Live.LooperDevice.LooperDevice.View.is_collapsed<Description>Value</Description></Value>
<Doc>Get/Set/Listen if the device is shown collapsed in the device chain.</Doc>
<Value>Live.LooperDevice.LooperDevice.View.is_collapsed_has_listener()<Description>Value</Description></Value>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.LooperDevice.LooperDevice.View.remove_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Module>Live.MaxDevice<Description>Module</Description></Module>
<Class>Live.MaxDevice.MaxDevice<Description>Class</Description></Class>
<Doc>This class represents a Max for Live device.</Doc>
<Built-In>Live.MaxDevice.MaxDevice.add_audio_inputs_listener()<Description>Built-In</Description></Built-In>
<Doc>add_audio_inputs_listener( (MaxDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "audio_inputs" has changed. C++ signature :  void add_audio_inputs_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.add_audio_outputs_listener()<Description>Built-In</Description></Built-In>
<Doc>add_audio_outputs_listener( (MaxDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "audio_outputs" has changed. C++ signature :  void add_audio_outputs_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.add_bank_parameters_changed_listener()<Description>Built-In</Description></Built-In>
<Doc>add_bank_parameters_changed_listener( (MaxDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "bank_parameters_changed" has changed. C++ signature :  void add_bank_parameters_changed_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.add_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.add_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.add_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.add_midi_inputs_listener()<Description>Built-In</Description></Built-In>
<Doc>add_midi_inputs_listener( (MaxDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "midi_inputs" has changed. C++ signature :  void add_midi_inputs_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.add_midi_outputs_listener()<Description>Built-In</Description></Built-In>
<Doc>add_midi_outputs_listener( (MaxDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "midi_outputs" has changed. C++ signature :  void add_midi_outputs_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.add_name_listener()<Description>Built-In</Description></Built-In>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.add_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.audio_inputs_has_listener()<Description>Built-In</Description></Built-In>
<Doc>audio_inputs_has_listener( (MaxDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "audio_inputs". C++ signature :  bool audio_inputs_has_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.audio_outputs_has_listener()<Description>Built-In</Description></Built-In>
<Doc>audio_outputs_has_listener( (MaxDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "audio_outputs". C++ signature :  bool audio_outputs_has_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.bank_parameters_changed_has_listener()<Description>Built-In</Description></Built-In>
<Doc>bank_parameters_changed_has_listener( (MaxDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "bank_parameters_changed". C++ signature :  bool bank_parameters_changed_has_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.get_bank_count()<Description>Built-In</Description></Built-In>
<Doc>get_bank_count( (MaxDevice)arg1) -&gt; int : Get the number of parameter banks. This is related to hardware control surfaces. C++ signature :  int get_bank_count(TMaxDevicePyHandle)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.get_bank_name()<Description>Built-In</Description></Built-In>
<Doc>get_bank_name( (MaxDevice)arg1, (int)arg2) -&gt; str : Get the name of a parameter bank given by index. This is related to hardware control surfaces. C++ signature :  TString get_bank_name(TMaxDevicePyHandle,int)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.get_bank_parameters()<Description>Built-In</Description></Built-In>
<Doc>get_bank_parameters( (MaxDevice)arg1, (int)arg2) -&gt; list : Get the indices of parameters of the given bank index. Empty slots are marked as -1. Bank index -1 refers to the best-of bank. This function is related to hardware control surfaces. C++ signature :  boost::python::list get_bank_parameters(TMaxDevicePyHandle,int)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.get_value_item_icons()<Description>Built-In</Description></Built-In>
<Doc>get_value_item_icons( (MaxDevice)arg1, (DeviceParameter)arg2) -&gt; list : Get a list of icon identifier strings for a list parameter's values.An empty string is given where no icon should be displayed.An empty list is given when no icons should be displayed.This is related to hardware control surfaces. C++ signature :  boost::python::list get_value_item_icons(TMaxDevicePyHandle,TPyHandle&lt;ATimeableValue&gt;)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.is_active_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.latency_in_ms_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.latency_in_samples_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.midi_inputs_has_listener()<Description>Built-In</Description></Built-In>
<Doc>midi_inputs_has_listener( (MaxDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "midi_inputs". C++ signature :  bool midi_inputs_has_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.midi_outputs_has_listener()<Description>Built-In</Description></Built-In>
<Doc>midi_outputs_has_listener( (MaxDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "midi_outputs". C++ signature :  bool midi_outputs_has_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.name_has_listener()<Description>Built-In</Description></Built-In>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.parameters_has_listener()<Description>Built-In</Description></Built-In>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.remove_audio_inputs_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_audio_inputs_listener( (MaxDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "audio_inputs". C++ signature :  void remove_audio_inputs_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.remove_audio_outputs_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_audio_outputs_listener( (MaxDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "audio_outputs". C++ signature :  void remove_audio_outputs_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.remove_bank_parameters_changed_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_bank_parameters_changed_listener( (MaxDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "bank_parameters_changed". C++ signature :  void remove_bank_parameters_changed_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.remove_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.remove_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.remove_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.remove_midi_inputs_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_midi_inputs_listener( (MaxDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "midi_inputs". C++ signature :  void remove_midi_inputs_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.remove_midi_outputs_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_midi_outputs_listener( (MaxDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "midi_outputs". C++ signature :  void remove_midi_outputs_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.remove_name_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.remove_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.store_chosen_bank()<Description>Built-In</Description></Built-In>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Value>Live.MaxDevice.MaxDevice.View<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Value>Live.MaxDevice.MaxDevice.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.MaxDevice.MaxDevice._live_ptr<Description>Value</Description></Value>
<Value>Live.MaxDevice.MaxDevice.add_audio_inputs_listener()<Description>Value</Description></Value>
<Doc>add_audio_inputs_listener( (MaxDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "audio_inputs" has changed. C++ signature :  void add_audio_inputs_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.add_audio_outputs_listener()<Description>Value</Description></Value>
<Doc>add_audio_outputs_listener( (MaxDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "audio_outputs" has changed. C++ signature :  void add_audio_outputs_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.add_bank_parameters_changed_listener()<Description>Value</Description></Value>
<Doc>add_bank_parameters_changed_listener( (MaxDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "bank_parameters_changed" has changed. C++ signature :  void add_bank_parameters_changed_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.add_is_active_listener()<Description>Value</Description></Value>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.add_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.add_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.add_midi_inputs_listener()<Description>Value</Description></Value>
<Doc>add_midi_inputs_listener( (MaxDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "midi_inputs" has changed. C++ signature :  void add_midi_inputs_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.add_midi_outputs_listener()<Description>Value</Description></Value>
<Doc>add_midi_outputs_listener( (MaxDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "midi_outputs" has changed. C++ signature :  void add_midi_outputs_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.add_name_listener()<Description>Value</Description></Value>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.add_parameters_listener()<Description>Value</Description></Value>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.audio_inputs<Description>Value</Description></Value>
<Doc>Const access to a list of all audio inputs of the device.</Doc>
<Value>Live.MaxDevice.MaxDevice.audio_inputs_has_listener()<Description>Value</Description></Value>
<Doc>audio_inputs_has_listener( (MaxDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "audio_inputs". C++ signature :  bool audio_inputs_has_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.audio_outputs<Description>Value</Description></Value>
<Doc>Const access to a list of all audio outputs of the device.</Doc>
<Value>Live.MaxDevice.MaxDevice.audio_outputs_has_listener()<Description>Value</Description></Value>
<Doc>audio_outputs_has_listener( (MaxDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "audio_outputs". C++ signature :  bool audio_outputs_has_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.bank_parameters_changed_has_listener()<Description>Value</Description></Value>
<Doc>bank_parameters_changed_has_listener( (MaxDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "bank_parameters_changed". C++ signature :  bool bank_parameters_changed_has_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.can_have_chains<Description>Value</Description></Value>
<Doc>Returns true if the device is a rack.</Doc>
<Value>Live.MaxDevice.MaxDevice.can_have_drum_pads<Description>Value</Description></Value>
<Doc>Returns true if the device is a drum rack.</Doc>
<Value>Live.MaxDevice.MaxDevice.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the Device.</Doc>
<Value>Live.MaxDevice.MaxDevice.class_display_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class name as displayed in Live's browser and device chain</Doc>
<Value>Live.MaxDevice.MaxDevice.class_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class.</Doc>
<Value>Live.MaxDevice.MaxDevice.get_bank_count()<Description>Value</Description></Value>
<Doc>get_bank_count( (MaxDevice)arg1) -&gt; int : Get the number of parameter banks. This is related to hardware control surfaces. C++ signature :  int get_bank_count(TMaxDevicePyHandle)</Doc>
<Value>Live.MaxDevice.MaxDevice.get_bank_name()<Description>Value</Description></Value>
<Doc>get_bank_name( (MaxDevice)arg1, (int)arg2) -&gt; str : Get the name of a parameter bank given by index. This is related to hardware control surfaces. C++ signature :  TString get_bank_name(TMaxDevicePyHandle,int)</Doc>
<Value>Live.MaxDevice.MaxDevice.get_bank_parameters()<Description>Value</Description></Value>
<Doc>get_bank_parameters( (MaxDevice)arg1, (int)arg2) -&gt; list : Get the indices of parameters of the given bank index. Empty slots are marked as -1. Bank index -1 refers to the best-of bank. This function is related to hardware control surfaces. C++ signature :  boost::python::list get_bank_parameters(TMaxDevicePyHandle,int)</Doc>
<Value>Live.MaxDevice.MaxDevice.get_value_item_icons()<Description>Value</Description></Value>
<Doc>get_value_item_icons( (MaxDevice)arg1, (DeviceParameter)arg2) -&gt; list : Get a list of icon identifier strings for a list parameter's values.An empty string is given where no icon should be displayed.An empty list is given when no icons should be displayed.This is related to hardware control surfaces. C++ signature :  boost::python::list get_value_item_icons(TMaxDevicePyHandle,TPyHandle&lt;ATimeableValue&gt;)</Doc>
<Value>Live.MaxDevice.MaxDevice.is_active<Description>Value</Description></Value>
<Doc>Return const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off.</Doc>
<Value>Live.MaxDevice.MaxDevice.is_active_has_listener()<Description>Value</Description></Value>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.latency_in_ms<Description>Value</Description></Value>
<Doc>Returns the latency of the device in ms.</Doc>
<Value>Live.MaxDevice.MaxDevice.latency_in_ms_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.latency_in_samples<Description>Value</Description></Value>
<Doc>Returns the latency of the device in samples.</Doc>
<Value>Live.MaxDevice.MaxDevice.latency_in_samples_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.midi_inputs<Description>Value</Description></Value>
<Doc>Const access to a list of all midi outputs of the device.</Doc>
<Value>Live.MaxDevice.MaxDevice.midi_inputs_has_listener()<Description>Value</Description></Value>
<Doc>midi_inputs_has_listener( (MaxDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "midi_inputs". C++ signature :  bool midi_inputs_has_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.midi_outputs<Description>Value</Description></Value>
<Doc>Const access to a list of all midi outputs of the device.</Doc>
<Value>Live.MaxDevice.MaxDevice.midi_outputs_has_listener()<Description>Value</Description></Value>
<Doc>midi_outputs_has_listener( (MaxDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "midi_outputs". C++ signature :  bool midi_outputs_has_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.name<Description>Value</Description></Value>
<Doc>Return access to the name of the device.</Doc>
<Value>Live.MaxDevice.MaxDevice.name_has_listener()<Description>Value</Description></Value>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.parameters<Description>Value</Description></Value>
<Doc>Const access to the list of available automatable parameters for this device.</Doc>
<Value>Live.MaxDevice.MaxDevice.parameters_has_listener()<Description>Value</Description></Value>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.remove_audio_inputs_listener()<Description>Value</Description></Value>
<Doc>remove_audio_inputs_listener( (MaxDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "audio_inputs". C++ signature :  void remove_audio_inputs_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.remove_audio_outputs_listener()<Description>Value</Description></Value>
<Doc>remove_audio_outputs_listener( (MaxDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "audio_outputs". C++ signature :  void remove_audio_outputs_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.remove_bank_parameters_changed_listener()<Description>Value</Description></Value>
<Doc>remove_bank_parameters_changed_listener( (MaxDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "bank_parameters_changed". C++ signature :  void remove_bank_parameters_changed_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.remove_is_active_listener()<Description>Value</Description></Value>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.remove_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.remove_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.remove_midi_inputs_listener()<Description>Value</Description></Value>
<Doc>remove_midi_inputs_listener( (MaxDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "midi_inputs". C++ signature :  void remove_midi_inputs_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.remove_midi_outputs_listener()<Description>Value</Description></Value>
<Doc>remove_midi_outputs_listener( (MaxDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "midi_outputs". C++ signature :  void remove_midi_outputs_listener(TMaxDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.remove_name_listener()<Description>Value</Description></Value>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.remove_parameters_listener()<Description>Value</Description></Value>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.store_chosen_bank()<Description>Value</Description></Value>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Value>Live.MaxDevice.MaxDevice.type<Description>Value</Description></Value>
<Doc>Return the type of the device.</Doc>
<Value>Live.MaxDevice.MaxDevice.view<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Class>Live.MaxDevice.MaxDevice.View<Description>Class</Description></Class>
<Doc>Representing the view aspects of a device.</Doc>
<Built-In>Live.MaxDevice.MaxDevice.View.add_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.View.is_collapsed_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MaxDevice.MaxDevice.View.remove_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.View.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.MaxDevice.MaxDevice.View._live_ptr<Description>Value</Description></Value>
<Value>Live.MaxDevice.MaxDevice.View.add_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.View.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the View.</Doc>
<Value>Live.MaxDevice.MaxDevice.View.is_collapsed<Description>Value</Description></Value>
<Doc>Get/Set/Listen if the device is shown collapsed in the device chain.</Doc>
<Value>Live.MaxDevice.MaxDevice.View.is_collapsed_has_listener()<Description>Value</Description></Value>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MaxDevice.MaxDevice.View.remove_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Module>Live.MeldDevice<Description>Module</Description></Module>
<Class>Live.MeldDevice.MeldDevice<Description>Class</Description></Class>
<Doc>This class represents a Meld device.</Doc>
<Built-In>Live.MeldDevice.MeldDevice.add_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.add_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.add_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.add_mono_poly_listener()<Description>Built-In</Description></Built-In>
<Doc>add_mono_poly_listener( (MeldDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mono_poly" has changed. C++ signature :  void add_mono_poly_listener(TMeldDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.add_name_listener()<Description>Built-In</Description></Built-In>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.add_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.add_poly_voices_listener()<Description>Built-In</Description></Built-In>
<Doc>add_poly_voices_listener( (MeldDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "poly_voices" has changed. C++ signature :  void add_poly_voices_listener(TMeldDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.add_selected_engine_listener()<Description>Built-In</Description></Built-In>
<Doc>add_selected_engine_listener( (MeldDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "selected_engine" has changed. C++ signature :  void add_selected_engine_listener(TMeldDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.add_unison_voices_listener()<Description>Built-In</Description></Built-In>
<Doc>add_unison_voices_listener( (MeldDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "unison_voices" has changed. C++ signature :  void add_unison_voices_listener(TMeldDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.is_active_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.latency_in_ms_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.latency_in_samples_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.mono_poly_has_listener()<Description>Built-In</Description></Built-In>
<Doc>mono_poly_has_listener( (MeldDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mono_poly". C++ signature :  bool mono_poly_has_listener(TMeldDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.name_has_listener()<Description>Built-In</Description></Built-In>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.parameters_has_listener()<Description>Built-In</Description></Built-In>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.poly_voices_has_listener()<Description>Built-In</Description></Built-In>
<Doc>poly_voices_has_listener( (MeldDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "poly_voices". C++ signature :  bool poly_voices_has_listener(TMeldDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.remove_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.remove_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.remove_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.remove_mono_poly_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_mono_poly_listener( (MeldDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mono_poly". C++ signature :  void remove_mono_poly_listener(TMeldDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.remove_name_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.remove_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.remove_poly_voices_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_poly_voices_listener( (MeldDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "poly_voices". C++ signature :  void remove_poly_voices_listener(TMeldDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.remove_selected_engine_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_selected_engine_listener( (MeldDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "selected_engine". C++ signature :  void remove_selected_engine_listener(TMeldDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.remove_unison_voices_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_unison_voices_listener( (MeldDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "unison_voices". C++ signature :  void remove_unison_voices_listener(TMeldDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.selected_engine_has_listener()<Description>Built-In</Description></Built-In>
<Doc>selected_engine_has_listener( (MeldDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "selected_engine". C++ signature :  bool selected_engine_has_listener(TMeldDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.store_chosen_bank()<Description>Built-In</Description></Built-In>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.unison_voices_has_listener()<Description>Built-In</Description></Built-In>
<Doc>unison_voices_has_listener( (MeldDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "unison_voices". C++ signature :  bool unison_voices_has_listener(TMeldDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.View<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Value>Live.MeldDevice.MeldDevice.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.MeldDevice.MeldDevice._live_ptr<Description>Value</Description></Value>
<Value>Live.MeldDevice.MeldDevice.add_is_active_listener()<Description>Value</Description></Value>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.add_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.add_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.add_mono_poly_listener()<Description>Value</Description></Value>
<Doc>add_mono_poly_listener( (MeldDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mono_poly" has changed. C++ signature :  void add_mono_poly_listener(TMeldDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.add_name_listener()<Description>Value</Description></Value>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.add_parameters_listener()<Description>Value</Description></Value>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.add_poly_voices_listener()<Description>Value</Description></Value>
<Doc>add_poly_voices_listener( (MeldDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "poly_voices" has changed. C++ signature :  void add_poly_voices_listener(TMeldDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.add_selected_engine_listener()<Description>Value</Description></Value>
<Doc>add_selected_engine_listener( (MeldDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "selected_engine" has changed. C++ signature :  void add_selected_engine_listener(TMeldDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.add_unison_voices_listener()<Description>Value</Description></Value>
<Doc>add_unison_voices_listener( (MeldDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "unison_voices" has changed. C++ signature :  void add_unison_voices_listener(TMeldDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.can_have_chains<Description>Value</Description></Value>
<Doc>Returns true if the device is a rack.</Doc>
<Value>Live.MeldDevice.MeldDevice.can_have_drum_pads<Description>Value</Description></Value>
<Doc>Returns true if the device is a drum rack.</Doc>
<Value>Live.MeldDevice.MeldDevice.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the Device.</Doc>
<Value>Live.MeldDevice.MeldDevice.class_display_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class name as displayed in Live's browser and device chain</Doc>
<Value>Live.MeldDevice.MeldDevice.class_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class.</Doc>
<Value>Live.MeldDevice.MeldDevice.is_active<Description>Value</Description></Value>
<Doc>Return const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off.</Doc>
<Value>Live.MeldDevice.MeldDevice.is_active_has_listener()<Description>Value</Description></Value>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.latency_in_ms<Description>Value</Description></Value>
<Doc>Returns the latency of the device in ms.</Doc>
<Value>Live.MeldDevice.MeldDevice.latency_in_ms_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.latency_in_samples<Description>Value</Description></Value>
<Doc>Returns the latency of the device in samples.</Doc>
<Value>Live.MeldDevice.MeldDevice.latency_in_samples_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.mono_poly<Description>Value</Description></Value>
<Doc>Returns the mode of Polyphony</Doc>
<Value>Live.MeldDevice.MeldDevice.mono_poly_has_listener()<Description>Value</Description></Value>
<Doc>mono_poly_has_listener( (MeldDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mono_poly". C++ signature :  bool mono_poly_has_listener(TMeldDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.name<Description>Value</Description></Value>
<Doc>Return access to the name of the device.</Doc>
<Value>Live.MeldDevice.MeldDevice.name_has_listener()<Description>Value</Description></Value>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.parameters<Description>Value</Description></Value>
<Doc>Const access to the list of available automatable parameters for this device.</Doc>
<Value>Live.MeldDevice.MeldDevice.parameters_has_listener()<Description>Value</Description></Value>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.poly_voices<Description>Value</Description></Value>
<Doc>Return the Poly Voice count</Doc>
<Value>Live.MeldDevice.MeldDevice.poly_voices_has_listener()<Description>Value</Description></Value>
<Doc>poly_voices_has_listener( (MeldDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "poly_voices". C++ signature :  bool poly_voices_has_listener(TMeldDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.remove_is_active_listener()<Description>Value</Description></Value>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.remove_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.remove_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.remove_mono_poly_listener()<Description>Value</Description></Value>
<Doc>remove_mono_poly_listener( (MeldDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mono_poly". C++ signature :  void remove_mono_poly_listener(TMeldDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.remove_name_listener()<Description>Value</Description></Value>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.remove_parameters_listener()<Description>Value</Description></Value>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.remove_poly_voices_listener()<Description>Value</Description></Value>
<Doc>remove_poly_voices_listener( (MeldDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "poly_voices". C++ signature :  void remove_poly_voices_listener(TMeldDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.remove_selected_engine_listener()<Description>Value</Description></Value>
<Doc>remove_selected_engine_listener( (MeldDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "selected_engine". C++ signature :  void remove_selected_engine_listener(TMeldDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.remove_unison_voices_listener()<Description>Value</Description></Value>
<Doc>remove_unison_voices_listener( (MeldDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "unison_voices". C++ signature :  void remove_unison_voices_listener(TMeldDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.selected_engine<Description>Value</Description></Value>
<Doc>Return what Voice Engine is selected</Doc>
<Value>Live.MeldDevice.MeldDevice.selected_engine_has_listener()<Description>Value</Description></Value>
<Doc>selected_engine_has_listener( (MeldDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "selected_engine". C++ signature :  bool selected_engine_has_listener(TMeldDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.store_chosen_bank()<Description>Value</Description></Value>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Value>Live.MeldDevice.MeldDevice.type<Description>Value</Description></Value>
<Doc>Return the type of the device.</Doc>
<Value>Live.MeldDevice.MeldDevice.unison_voices<Description>Value</Description></Value>
<Doc>Return the Unison Voice count</Doc>
<Value>Live.MeldDevice.MeldDevice.unison_voices_has_listener()<Description>Value</Description></Value>
<Doc>unison_voices_has_listener( (MeldDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "unison_voices". C++ signature :  bool unison_voices_has_listener(TMeldDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.view<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Class>Live.MeldDevice.MeldDevice.View<Description>Class</Description></Class>
<Doc>Representing the view aspects of a device.</Doc>
<Built-In>Live.MeldDevice.MeldDevice.View.add_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.View.is_collapsed_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MeldDevice.MeldDevice.View.remove_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.View.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.MeldDevice.MeldDevice.View._live_ptr<Description>Value</Description></Value>
<Value>Live.MeldDevice.MeldDevice.View.add_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.View.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the View.</Doc>
<Value>Live.MeldDevice.MeldDevice.View.is_collapsed<Description>Value</Description></Value>
<Doc>Get/Set/Listen if the device is shown collapsed in the device chain.</Doc>
<Value>Live.MeldDevice.MeldDevice.View.is_collapsed_has_listener()<Description>Value</Description></Value>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MeldDevice.MeldDevice.View.remove_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Module>Live.MidiMap<Description>Module</Description></Module>
<Built-In>Live.MidiMap.forward_midi_cc()<Description>Built-In</Description></Built-In>
<Doc>forward_midi_cc( (int)arg1, (int)arg2, (int)arg3, (int)arg4 [, (bool)ShouldConsumeEvent=True]) -&gt; bool : C++ signature :  bool forward_midi_cc(unsigned int,unsigned int,int,int [,bool=True])</Doc>
<Built-In>Live.MidiMap.forward_midi_note()<Description>Built-In</Description></Built-In>
<Doc>forward_midi_note( (int)arg1, (int)arg2, (int)arg3, (int)arg4 [, (bool)ShouldConsumeEvent=True]) -&gt; bool : C++ signature :  bool forward_midi_note(unsigned int,unsigned int,int,int [,bool=True])</Doc>
<Built-In>Live.MidiMap.forward_midi_pitchbend()<Description>Built-In</Description></Built-In>
<Doc>forward_midi_pitchbend( (int)arg1, (int)arg2, (int)arg3) -&gt; bool : C++ signature :  bool forward_midi_pitchbend(unsigned int,unsigned int,int)</Doc>
<Built-In>Live.MidiMap.map_midi_cc()<Description>Built-In</Description></Built-In>
<Doc>map_midi_cc( (int)midi_map_handle, (DeviceParameter)parameter, (int)midi_channel, (int)controller_number, (MapMode)map_mode, (bool)avoid_takeover [, (float)sensitivity=1.0]) -&gt; bool : C++ signature :  bool map_midi_cc(unsigned int,TPyHandle&lt;ATimeableValue&gt;,int,int,NRemoteMapperTypes::TControllerMapMode,bool [,float=1.0])</Doc>
<Built-In>Live.MidiMap.map_midi_cc_with_feedback_map()<Description>Built-In</Description></Built-In>
<Doc>map_midi_cc_with_feedback_map( (int)midi_map_handle, (DeviceParameter)parameter, (int)midi_channel, (int)controller_number, (MapMode)map_mode, (CCFeedbackRule)feedback_rule, (bool)avoid_takeover [, (float)sensitivity=1.0]) -&gt; bool : C++ signature :  bool map_midi_cc_with_feedback_map(unsigned int,TPyHandle&lt;ATimeableValue&gt;,int,int,NRemoteMapperTypes::TControllerMapMode,NPythonMidiMap::TCCFeedbackRule,bool [,float=1.0])</Doc>
<Built-In>Live.MidiMap.map_midi_note()<Description>Built-In</Description></Built-In>
<Doc>map_midi_note( (int)arg1, (DeviceParameter)arg2, (int)arg3, (int)arg4) -&gt; bool : C++ signature :  bool map_midi_note(unsigned int,TPyHandle&lt;ATimeableValue&gt;,int,int)</Doc>
<Built-In>Live.MidiMap.map_midi_note_with_feedback_map()<Description>Built-In</Description></Built-In>
<Doc>map_midi_note_with_feedback_map( (int)arg1, (DeviceParameter)arg2, (int)arg3, (int)arg4, (NoteFeedbackRule)arg5) -&gt; bool : C++ signature :  bool map_midi_note_with_feedback_map(unsigned int,TPyHandle&lt;ATimeableValue&gt;,int,int,NPythonMidiMap::TNoteFeedbackRule)</Doc>
<Built-In>Live.MidiMap.map_midi_pitchbend()<Description>Built-In</Description></Built-In>
<Doc>map_midi_pitchbend( (int)arg1, (DeviceParameter)arg2, (int)arg3, (bool)arg4) -&gt; bool : C++ signature :  bool map_midi_pitchbend(unsigned int,TPyHandle&lt;ATimeableValue&gt;,int,bool)</Doc>
<Built-In>Live.MidiMap.map_midi_pitchbend_with_feedback_map()<Description>Built-In</Description></Built-In>
<Doc>map_midi_pitchbend_with_feedback_map( (int)arg1, (DeviceParameter)arg2, (int)arg3, (PitchBendFeedbackRule)arg4, (bool)arg5) -&gt; bool : C++ signature :  bool map_midi_pitchbend_with_feedback_map(unsigned int,TPyHandle&lt;ATimeableValue&gt;,int,NPythonMidiMap::TPitchBendFeedbackRule,bool)</Doc>
<Built-In>Live.MidiMap.send_feedback_for_parameter()<Description>Built-In</Description></Built-In>
<Doc>send_feedback_for_parameter( (int)arg1, (DeviceParameter)arg2) -&gt; None : C++ signature :  void send_feedback_for_parameter(unsigned int,TPyHandle&lt;ATimeableValue&gt;)</Doc>
<Class>Live.MidiMap.CCFeedbackRule<Description>Class</Description></Class>
<Doc>Structure to define feedback properties of MIDI mappings.</Doc>
<Value>Live.MidiMap.CCFeedbackRule.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.MidiMap.CCFeedbackRule.cc_no<Description>Value</Description></Value>
<Value>Live.MidiMap.CCFeedbackRule.cc_value_map<Description>Value</Description></Value>
<Value>Live.MidiMap.CCFeedbackRule.channel<Description>Value</Description></Value>
<Value>Live.MidiMap.CCFeedbackRule.delay_in_ms<Description>Value</Description></Value>
<Value>Live.MidiMap.CCFeedbackRule.enabled<Description>Value</Description></Value>
<Class>Live.MidiMap.MapMode<Description>Class</Description></Class>
<Built-In>Live.MidiMap.MapMode.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.MidiMap.MapMode.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.MidiMap.MapMode.absolute<Description>Value</Description></Value>
<Value>Live.MidiMap.MapMode.absolute_14_bit<Description>Value</Description></Value>
<Value>Live.MidiMap.MapMode.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.MidiMap.MapMode.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.MidiMap.MapMode.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.MidiMap.MapMode.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.MidiMap.MapMode.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.MidiMap.MapMode.name<Description>Value</Description></Value>
<Value>Live.MidiMap.MapMode.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.MidiMap.MapMode.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.MidiMap.MapMode.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.MidiMap.MapMode.relative_binary_offset<Description>Value</Description></Value>
<Value>Live.MidiMap.MapMode.relative_signed_bit<Description>Value</Description></Value>
<Value>Live.MidiMap.MapMode.relative_signed_bit2<Description>Value</Description></Value>
<Value>Live.MidiMap.MapMode.relative_smooth_binary_offset<Description>Value</Description></Value>
<Value>Live.MidiMap.MapMode.relative_smooth_signed_bit<Description>Value</Description></Value>
<Value>Live.MidiMap.MapMode.relative_smooth_signed_bit2<Description>Value</Description></Value>
<Value>Live.MidiMap.MapMode.relative_smooth_two_compliment<Description>Value</Description></Value>
<Value>Live.MidiMap.MapMode.relative_two_compliment<Description>Value</Description></Value>
<Value>Live.MidiMap.MapMode.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.MidiMap.MapMode.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.MidiMap.NoteFeedbackRule<Description>Class</Description></Class>
<Doc>Structure to define feedback properties of MIDI mappings.</Doc>
<Value>Live.MidiMap.NoteFeedbackRule.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.MidiMap.NoteFeedbackRule.channel<Description>Value</Description></Value>
<Value>Live.MidiMap.NoteFeedbackRule.delay_in_ms<Description>Value</Description></Value>
<Value>Live.MidiMap.NoteFeedbackRule.enabled<Description>Value</Description></Value>
<Value>Live.MidiMap.NoteFeedbackRule.note_no<Description>Value</Description></Value>
<Value>Live.MidiMap.NoteFeedbackRule.vel_map<Description>Value</Description></Value>
<Class>Live.MidiMap.PitchBendFeedbackRule<Description>Class</Description></Class>
<Doc>Structure to define feedback properties of MIDI mappings.</Doc>
<Value>Live.MidiMap.PitchBendFeedbackRule.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.MidiMap.PitchBendFeedbackRule.channel<Description>Value</Description></Value>
<Value>Live.MidiMap.PitchBendFeedbackRule.delay_in_ms<Description>Value</Description></Value>
<Value>Live.MidiMap.PitchBendFeedbackRule.enabled<Description>Value</Description></Value>
<Value>Live.MidiMap.PitchBendFeedbackRule.value_pair_map<Description>Value</Description></Value>
<Module>Live.MixerDevice<Description>Module</Description></Module>
<Class>Live.MixerDevice.MixerDevice<Description>Class</Description></Class>
<Doc>This class represents a Mixer Device in Live, which gives youaccess to the Volume and Panning properties of a Track.</Doc>
<Built-In>Live.MixerDevice.MixerDevice.add_crossfade_assign_listener()<Description>Built-In</Description></Built-In>
<Doc>add_crossfade_assign_listener( (MixerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "crossfade_assign" has changed. C++ signature :  void add_crossfade_assign_listener(TPyHandle&lt;ATrackDevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MixerDevice.MixerDevice.add_panning_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>add_panning_mode_listener( (MixerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "panning_mode" has changed. C++ signature :  void add_panning_mode_listener(TPyHandle&lt;ATrackDevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MixerDevice.MixerDevice.add_sends_listener()<Description>Built-In</Description></Built-In>
<Doc>add_sends_listener( (MixerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "sends" has changed. C++ signature :  void add_sends_listener(TPyHandle&lt;ATrackDevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MixerDevice.MixerDevice.crossfade_assign_has_listener()<Description>Built-In</Description></Built-In>
<Doc>crossfade_assign_has_listener( (MixerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "crossfade_assign". C++ signature :  bool crossfade_assign_has_listener(TPyHandle&lt;ATrackDevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MixerDevice.MixerDevice.panning_mode_has_listener()<Description>Built-In</Description></Built-In>
<Doc>panning_mode_has_listener( (MixerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "panning_mode". C++ signature :  bool panning_mode_has_listener(TPyHandle&lt;ATrackDevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MixerDevice.MixerDevice.remove_crossfade_assign_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_crossfade_assign_listener( (MixerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "crossfade_assign". C++ signature :  void remove_crossfade_assign_listener(TPyHandle&lt;ATrackDevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MixerDevice.MixerDevice.remove_panning_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_panning_mode_listener( (MixerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "panning_mode". C++ signature :  void remove_panning_mode_listener(TPyHandle&lt;ATrackDevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MixerDevice.MixerDevice.remove_sends_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_sends_listener( (MixerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "sends". C++ signature :  void remove_sends_listener(TPyHandle&lt;ATrackDevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.MixerDevice.MixerDevice.sends_has_listener()<Description>Built-In</Description></Built-In>
<Doc>sends_has_listener( (MixerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "sends". C++ signature :  bool sends_has_listener(TPyHandle&lt;ATrackDevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MixerDevice.MixerDevice.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.MixerDevice.MixerDevice._live_ptr<Description>Value</Description></Value>
<Value>Live.MixerDevice.MixerDevice.add_crossfade_assign_listener()<Description>Value</Description></Value>
<Doc>add_crossfade_assign_listener( (MixerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "crossfade_assign" has changed. C++ signature :  void add_crossfade_assign_listener(TPyHandle&lt;ATrackDevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MixerDevice.MixerDevice.add_panning_mode_listener()<Description>Value</Description></Value>
<Doc>add_panning_mode_listener( (MixerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "panning_mode" has changed. C++ signature :  void add_panning_mode_listener(TPyHandle&lt;ATrackDevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MixerDevice.MixerDevice.add_sends_listener()<Description>Value</Description></Value>
<Doc>add_sends_listener( (MixerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "sends" has changed. C++ signature :  void add_sends_listener(TPyHandle&lt;ATrackDevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MixerDevice.MixerDevice.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the mixer device.</Doc>
<Value>Live.MixerDevice.MixerDevice.crossfade_assign<Description>Value</Description></Value>
<Doc>Player- and ReturnTracks only: Access to the Track's Crossfade Assign State.</Doc>
<Value>Live.MixerDevice.MixerDevice.crossfade_assign_has_listener()<Description>Value</Description></Value>
<Doc>crossfade_assign_has_listener( (MixerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "crossfade_assign". C++ signature :  bool crossfade_assign_has_listener(TPyHandle&lt;ATrackDevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MixerDevice.MixerDevice.crossfade_assignments<Description>Value</Description></Value>
<Value>Live.MixerDevice.MixerDevice.crossfader<Description>Value</Description></Value>
<Doc>MainTrack only: Const access to the Crossfader.</Doc>
<Value>Live.MixerDevice.MixerDevice.cue_volume<Description>Value</Description></Value>
<Doc>MainTrack only: Const access to the Cue Volume Parameter.</Doc>
<Value>Live.MixerDevice.MixerDevice.left_split_stereo<Description>Value</Description></Value>
<Doc>Const access to the Track's Left Split Stereo Panning Device Parameter.</Doc>
<Value>Live.MixerDevice.MixerDevice.panning<Description>Value</Description></Value>
<Doc>Const access to the Tracks Panning Device Parameter.</Doc>
<Value>Live.MixerDevice.MixerDevice.panning_mode<Description>Value</Description></Value>
<Doc>Access to the Track's Panning Mode.</Doc>
<Value>Live.MixerDevice.MixerDevice.panning_mode_has_listener()<Description>Value</Description></Value>
<Doc>panning_mode_has_listener( (MixerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "panning_mode". C++ signature :  bool panning_mode_has_listener(TPyHandle&lt;ATrackDevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MixerDevice.MixerDevice.panning_modes<Description>Value</Description></Value>
<Value>Live.MixerDevice.MixerDevice.remove_crossfade_assign_listener()<Description>Value</Description></Value>
<Doc>remove_crossfade_assign_listener( (MixerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "crossfade_assign". C++ signature :  void remove_crossfade_assign_listener(TPyHandle&lt;ATrackDevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MixerDevice.MixerDevice.remove_panning_mode_listener()<Description>Value</Description></Value>
<Doc>remove_panning_mode_listener( (MixerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "panning_mode". C++ signature :  void remove_panning_mode_listener(TPyHandle&lt;ATrackDevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MixerDevice.MixerDevice.remove_sends_listener()<Description>Value</Description></Value>
<Doc>remove_sends_listener( (MixerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "sends". C++ signature :  void remove_sends_listener(TPyHandle&lt;ATrackDevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MixerDevice.MixerDevice.right_split_stereo<Description>Value</Description></Value>
<Doc>Const access to the Track's Right Split Stereo Panning Device Parameter.</Doc>
<Value>Live.MixerDevice.MixerDevice.sends<Description>Value</Description></Value>
<Doc>Const access to the Tracks list of Send Amount Device Parameters.</Doc>
<Value>Live.MixerDevice.MixerDevice.sends_has_listener()<Description>Value</Description></Value>
<Doc>sends_has_listener( (MixerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "sends". C++ signature :  bool sends_has_listener(TPyHandle&lt;ATrackDevice&gt;,boost::python::api::object)</Doc>
<Value>Live.MixerDevice.MixerDevice.song_tempo<Description>Value</Description></Value>
<Doc>MainTrack only: Const access to the Song's Tempo.</Doc>
<Value>Live.MixerDevice.MixerDevice.track_activator<Description>Value</Description></Value>
<Doc>Const access to the Tracks Activator Device Parameter.</Doc>
<Value>Live.MixerDevice.MixerDevice.volume<Description>Value</Description></Value>
<Doc>Const access to the Tracks Volume Device Parameter.</Doc>
<Class>Live.MixerDevice.MixerDevice.crossfade_assignments<Description>Class</Description></Class>
<Built-In>Live.MixerDevice.MixerDevice.crossfade_assignments.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.MixerDevice.MixerDevice.crossfade_assignments.A<Description>Value</Description></Value>
<Value>Live.MixerDevice.MixerDevice.crossfade_assignments.B<Description>Value</Description></Value>
<Value>Live.MixerDevice.MixerDevice.crossfade_assignments.NONE<Description>Value</Description></Value>
<Doc>abs(self)</Doc>
<Value>Live.MixerDevice.MixerDevice.crossfade_assignments.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.MixerDevice.MixerDevice.crossfade_assignments.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.MixerDevice.MixerDevice.crossfade_assignments.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.MixerDevice.MixerDevice.crossfade_assignments.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.MixerDevice.MixerDevice.crossfade_assignments.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.MixerDevice.MixerDevice.crossfade_assignments.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.MixerDevice.MixerDevice.crossfade_assignments.name<Description>Value</Description></Value>
<Value>Live.MixerDevice.MixerDevice.crossfade_assignments.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.MixerDevice.MixerDevice.crossfade_assignments.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.MixerDevice.MixerDevice.crossfade_assignments.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.MixerDevice.MixerDevice.crossfade_assignments.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.MixerDevice.MixerDevice.crossfade_assignments.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.MixerDevice.MixerDevice.panning_modes<Description>Class</Description></Class>
<Built-In>Live.MixerDevice.MixerDevice.panning_modes.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.MixerDevice.MixerDevice.panning_modes.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.MixerDevice.MixerDevice.panning_modes.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.MixerDevice.MixerDevice.panning_modes.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.MixerDevice.MixerDevice.panning_modes.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.MixerDevice.MixerDevice.panning_modes.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.MixerDevice.MixerDevice.panning_modes.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.MixerDevice.MixerDevice.panning_modes.name<Description>Value</Description></Value>
<Value>Live.MixerDevice.MixerDevice.panning_modes.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.MixerDevice.MixerDevice.panning_modes.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.MixerDevice.MixerDevice.panning_modes.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.MixerDevice.MixerDevice.panning_modes.stereo<Description>Value</Description></Value>
<Value>Live.MixerDevice.MixerDevice.panning_modes.stereo_split<Description>Value</Description></Value>
<Value>Live.MixerDevice.MixerDevice.panning_modes.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.MixerDevice.MixerDevice.panning_modes.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Module>Live.PluginDevice<Description>Module</Description></Module>
<Class>Live.PluginDevice.PluginDevice<Description>Class</Description></Class>
<Doc>This class represents a plugin device.</Doc>
<Built-In>Live.PluginDevice.PluginDevice.add_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.PluginDevice.PluginDevice.add_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.PluginDevice.PluginDevice.add_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.PluginDevice.PluginDevice.add_name_listener()<Description>Built-In</Description></Built-In>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.PluginDevice.PluginDevice.add_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.PluginDevice.PluginDevice.add_presets_listener()<Description>Built-In</Description></Built-In>
<Doc>add_presets_listener( (PluginDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "presets" has changed. C++ signature :  void add_presets_listener(TPluginDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.PluginDevice.PluginDevice.add_selected_preset_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_selected_preset_index_listener( (PluginDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "selected_preset_index" has changed. C++ signature :  void add_selected_preset_index_listener(TPluginDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.PluginDevice.PluginDevice.get_parameter_names()<Description>Built-In</Description></Built-In>
<Doc>get_parameter_names( (PluginDevice)arg1 [, (int)begin=0 [, (int)end=-1]]) -&gt; StringVector : Get the range of plugin parameter names, bound by begin and end. If end is smaller than 0 it is interpreted as the parameter count.  C++ signature :  std::__1::vector&lt;TString, std::__1::allocator&lt;TString&gt;&gt; get_parameter_names(TPluginDevicePyHandle [,int=0 [,int=-1]])</Doc>
<Built-In>Live.PluginDevice.PluginDevice.is_active_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.PluginDevice.PluginDevice.latency_in_ms_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.PluginDevice.PluginDevice.latency_in_samples_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.PluginDevice.PluginDevice.name_has_listener()<Description>Built-In</Description></Built-In>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.PluginDevice.PluginDevice.parameters_has_listener()<Description>Built-In</Description></Built-In>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.PluginDevice.PluginDevice.presets_has_listener()<Description>Built-In</Description></Built-In>
<Doc>presets_has_listener( (PluginDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "presets". C++ signature :  bool presets_has_listener(TPluginDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.PluginDevice.PluginDevice.remove_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.PluginDevice.PluginDevice.remove_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.PluginDevice.PluginDevice.remove_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.PluginDevice.PluginDevice.remove_name_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.PluginDevice.PluginDevice.remove_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.PluginDevice.PluginDevice.remove_presets_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_presets_listener( (PluginDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "presets". C++ signature :  void remove_presets_listener(TPluginDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.PluginDevice.PluginDevice.remove_selected_preset_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_selected_preset_index_listener( (PluginDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "selected_preset_index". C++ signature :  void remove_selected_preset_index_listener(TPluginDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.PluginDevice.PluginDevice.selected_preset_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>selected_preset_index_has_listener( (PluginDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "selected_preset_index". C++ signature :  bool selected_preset_index_has_listener(TPluginDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.PluginDevice.PluginDevice.store_chosen_bank()<Description>Built-In</Description></Built-In>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Value>Live.PluginDevice.PluginDevice.View<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Value>Live.PluginDevice.PluginDevice.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.PluginDevice.PluginDevice._live_ptr<Description>Value</Description></Value>
<Value>Live.PluginDevice.PluginDevice.add_is_active_listener()<Description>Value</Description></Value>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.PluginDevice.PluginDevice.add_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.PluginDevice.PluginDevice.add_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.PluginDevice.PluginDevice.add_name_listener()<Description>Value</Description></Value>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.PluginDevice.PluginDevice.add_parameters_listener()<Description>Value</Description></Value>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.PluginDevice.PluginDevice.add_presets_listener()<Description>Value</Description></Value>
<Doc>add_presets_listener( (PluginDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "presets" has changed. C++ signature :  void add_presets_listener(TPluginDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.PluginDevice.PluginDevice.add_selected_preset_index_listener()<Description>Value</Description></Value>
<Doc>add_selected_preset_index_listener( (PluginDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "selected_preset_index" has changed. C++ signature :  void add_selected_preset_index_listener(TPluginDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.PluginDevice.PluginDevice.can_have_chains<Description>Value</Description></Value>
<Doc>Returns true if the device is a rack.</Doc>
<Value>Live.PluginDevice.PluginDevice.can_have_drum_pads<Description>Value</Description></Value>
<Doc>Returns true if the device is a drum rack.</Doc>
<Value>Live.PluginDevice.PluginDevice.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the Device.</Doc>
<Value>Live.PluginDevice.PluginDevice.class_display_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class name as displayed in Live's browser and device chain</Doc>
<Value>Live.PluginDevice.PluginDevice.class_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class.</Doc>
<Value>Live.PluginDevice.PluginDevice.get_parameter_names()<Description>Value</Description></Value>
<Doc>get_parameter_names( (PluginDevice)arg1 [, (int)begin=0 [, (int)end=-1]]) -&gt; StringVector : Get the range of plugin parameter names, bound by begin and end. If end is smaller than 0 it is interpreted as the parameter count.  C++ signature :  std::__1::vector&lt;TString, std::__1::allocator&lt;TString&gt;&gt; get_parameter_names(TPluginDevicePyHandle [,int=0 [,int=-1]])</Doc>
<Value>Live.PluginDevice.PluginDevice.is_active<Description>Value</Description></Value>
<Doc>Return const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off.</Doc>
<Value>Live.PluginDevice.PluginDevice.is_active_has_listener()<Description>Value</Description></Value>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.PluginDevice.PluginDevice.latency_in_ms<Description>Value</Description></Value>
<Doc>Returns the latency of the device in ms.</Doc>
<Value>Live.PluginDevice.PluginDevice.latency_in_ms_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.PluginDevice.PluginDevice.latency_in_samples<Description>Value</Description></Value>
<Doc>Returns the latency of the device in samples.</Doc>
<Value>Live.PluginDevice.PluginDevice.latency_in_samples_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.PluginDevice.PluginDevice.name<Description>Value</Description></Value>
<Doc>Return access to the name of the device.</Doc>
<Value>Live.PluginDevice.PluginDevice.name_has_listener()<Description>Value</Description></Value>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.PluginDevice.PluginDevice.parameters<Description>Value</Description></Value>
<Doc>Const access to the list of available automatable parameters for this device.</Doc>
<Value>Live.PluginDevice.PluginDevice.parameters_has_listener()<Description>Value</Description></Value>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.PluginDevice.PluginDevice.presets<Description>Value</Description></Value>
<Doc>Get the list of presets the plugin offers.</Doc>
<Value>Live.PluginDevice.PluginDevice.presets_has_listener()<Description>Value</Description></Value>
<Doc>presets_has_listener( (PluginDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "presets". C++ signature :  bool presets_has_listener(TPluginDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.PluginDevice.PluginDevice.remove_is_active_listener()<Description>Value</Description></Value>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.PluginDevice.PluginDevice.remove_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.PluginDevice.PluginDevice.remove_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.PluginDevice.PluginDevice.remove_name_listener()<Description>Value</Description></Value>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.PluginDevice.PluginDevice.remove_parameters_listener()<Description>Value</Description></Value>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.PluginDevice.PluginDevice.remove_presets_listener()<Description>Value</Description></Value>
<Doc>remove_presets_listener( (PluginDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "presets". C++ signature :  void remove_presets_listener(TPluginDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.PluginDevice.PluginDevice.remove_selected_preset_index_listener()<Description>Value</Description></Value>
<Doc>remove_selected_preset_index_listener( (PluginDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "selected_preset_index". C++ signature :  void remove_selected_preset_index_listener(TPluginDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.PluginDevice.PluginDevice.selected_preset_index<Description>Value</Description></Value>
<Doc>Access to the index of the currently selected preset.</Doc>
<Value>Live.PluginDevice.PluginDevice.selected_preset_index_has_listener()<Description>Value</Description></Value>
<Doc>selected_preset_index_has_listener( (PluginDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "selected_preset_index". C++ signature :  bool selected_preset_index_has_listener(TPluginDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.PluginDevice.PluginDevice.store_chosen_bank()<Description>Value</Description></Value>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Value>Live.PluginDevice.PluginDevice.type<Description>Value</Description></Value>
<Doc>Return the type of the device.</Doc>
<Value>Live.PluginDevice.PluginDevice.view<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Class>Live.PluginDevice.PluginDevice.View<Description>Class</Description></Class>
<Doc>Representing the view aspects of a device.</Doc>
<Built-In>Live.PluginDevice.PluginDevice.View.add_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.PluginDevice.PluginDevice.View.is_collapsed_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.PluginDevice.PluginDevice.View.remove_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.PluginDevice.PluginDevice.View.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.PluginDevice.PluginDevice.View._live_ptr<Description>Value</Description></Value>
<Value>Live.PluginDevice.PluginDevice.View.add_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.PluginDevice.PluginDevice.View.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the View.</Doc>
<Value>Live.PluginDevice.PluginDevice.View.is_collapsed<Description>Value</Description></Value>
<Doc>Get/Set/Listen if the device is shown collapsed in the device chain.</Doc>
<Value>Live.PluginDevice.PluginDevice.View.is_collapsed_has_listener()<Description>Value</Description></Value>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.PluginDevice.PluginDevice.View.remove_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Module>Live.RackDevice<Description>Module</Description></Module>
<Class>Live.RackDevice.RackDevice<Description>Class</Description></Class>
<Doc>This class represents a Rack device.</Doc>
<Built-In>Live.RackDevice.RackDevice.add_chains_listener()<Description>Built-In</Description></Built-In>
<Doc>add_chains_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "chains" has changed. C++ signature :  void add_chains_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.add_drum_pads_listener()<Description>Built-In</Description></Built-In>
<Doc>add_drum_pads_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "drum_pads" has changed. C++ signature :  void add_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.add_has_drum_pads_listener()<Description>Built-In</Description></Built-In>
<Doc>add_has_drum_pads_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "has_drum_pads" has changed. C++ signature :  void add_has_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.add_has_macro_mappings_listener()<Description>Built-In</Description></Built-In>
<Doc>add_has_macro_mappings_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "has_macro_mappings" has changed. C++ signature :  void add_has_macro_mappings_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.add_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.add_is_showing_chains_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_showing_chains_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_showing_chains" has changed. C++ signature :  void add_is_showing_chains_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.add_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.add_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.add_macro()<Description>Built-In</Description></Built-In>
<Doc>add_macro( (RackDevice)arg1) -&gt; None : Increases the number of visible macro controls in the rack. Throws an exception if the maximum number of macro controls is reached. C++ signature :  void add_macro(TRackDevicePyHandle)</Doc>
<Built-In>Live.RackDevice.RackDevice.add_macros_mapped_listener()<Description>Built-In</Description></Built-In>
<Doc>add_macros_mapped_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "macros_mapped" has changed. C++ signature :  void add_macros_mapped_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.add_name_listener()<Description>Built-In</Description></Built-In>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.add_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.add_return_chains_listener()<Description>Built-In</Description></Built-In>
<Doc>add_return_chains_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "return_chains" has changed. C++ signature :  void add_return_chains_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.add_variation_count_listener()<Description>Built-In</Description></Built-In>
<Doc>add_variation_count_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "variation_count" has changed. C++ signature :  void add_variation_count_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.add_visible_drum_pads_listener()<Description>Built-In</Description></Built-In>
<Doc>add_visible_drum_pads_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "visible_drum_pads" has changed. C++ signature :  void add_visible_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.add_visible_macro_count_listener()<Description>Built-In</Description></Built-In>
<Doc>add_visible_macro_count_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "visible_macro_count" has changed. C++ signature :  void add_visible_macro_count_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.chains_has_listener()<Description>Built-In</Description></Built-In>
<Doc>chains_has_listener( (RackDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "chains". C++ signature :  bool chains_has_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.copy_pad()<Description>Built-In</Description></Built-In>
<Doc>copy_pad( (RackDevice)arg1, (int)arg2, (int)arg3) -&gt; None : Copies all contents of a drum pad from a source pad into a destination pad. copy_pad(source_index, destination_index) where source_index and destination_index correspond to the note number/index of the drum pad in a drum rack. Throws an exception when the source pad is empty, or when the source or destination indices are not between 0 - 127. C++ signature :  void copy_pad(TRackDevicePyHandle,int,int)</Doc>
<Built-In>Live.RackDevice.RackDevice.delete_selected_variation()<Description>Built-In</Description></Built-In>
<Doc>delete_selected_variation( (Device)arg1) -&gt; None : Deletes the currently selected macro variation.Does nothing if there is no selected variation. C++ signature :  void delete_selected_variation(TPyHandle&lt;ADevice&gt;)</Doc>
<Built-In>Live.RackDevice.RackDevice.drum_pads_has_listener()<Description>Built-In</Description></Built-In>
<Doc>drum_pads_has_listener( (RackDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "drum_pads". C++ signature :  bool drum_pads_has_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.has_drum_pads_has_listener()<Description>Built-In</Description></Built-In>
<Doc>has_drum_pads_has_listener( (RackDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "has_drum_pads". C++ signature :  bool has_drum_pads_has_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.has_macro_mappings_has_listener()<Description>Built-In</Description></Built-In>
<Doc>has_macro_mappings_has_listener( (RackDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "has_macro_mappings". C++ signature :  bool has_macro_mappings_has_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.is_active_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.is_showing_chains_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_showing_chains_has_listener( (RackDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_showing_chains". C++ signature :  bool is_showing_chains_has_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.latency_in_ms_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.latency_in_samples_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.macros_mapped_has_listener()<Description>Built-In</Description></Built-In>
<Doc>macros_mapped_has_listener( (RackDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "macros_mapped". C++ signature :  bool macros_mapped_has_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.name_has_listener()<Description>Built-In</Description></Built-In>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.parameters_has_listener()<Description>Built-In</Description></Built-In>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.randomize_macros()<Description>Built-In</Description></Built-In>
<Doc>randomize_macros( (RackDevice)arg1) -&gt; None : Randomizes the values for all macro controls not excluded from randomization. C++ signature :  void randomize_macros(TRackDevicePyHandle)</Doc>
<Built-In>Live.RackDevice.RackDevice.recall_last_used_variation()<Description>Built-In</Description></Built-In>
<Doc>recall_last_used_variation( (Device)arg1) -&gt; None : Recalls the macro variation that was recalled most recently.Does nothing if no variation has been recalled yet. C++ signature :  void recall_last_used_variation(TPyHandle&lt;ADevice&gt;)</Doc>
<Built-In>Live.RackDevice.RackDevice.recall_selected_variation()<Description>Built-In</Description></Built-In>
<Doc>recall_selected_variation( (Device)arg1) -&gt; None : Recalls the currently selected macro variation.Does nothing if there are no variations. C++ signature :  void recall_selected_variation(TPyHandle&lt;ADevice&gt;)</Doc>
<Built-In>Live.RackDevice.RackDevice.remove_chains_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_chains_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "chains". C++ signature :  void remove_chains_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.remove_drum_pads_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_drum_pads_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "drum_pads". C++ signature :  void remove_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.remove_has_drum_pads_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_has_drum_pads_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "has_drum_pads". C++ signature :  void remove_has_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.remove_has_macro_mappings_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_has_macro_mappings_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "has_macro_mappings". C++ signature :  void remove_has_macro_mappings_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.remove_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.remove_is_showing_chains_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_showing_chains_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_showing_chains". C++ signature :  void remove_is_showing_chains_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.remove_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.remove_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.remove_macro()<Description>Built-In</Description></Built-In>
<Doc>remove_macro( (RackDevice)arg1) -&gt; None : Decreases the number of visible macro controls in the rack. Throws an exception if the minimum number of macro controls is reached. C++ signature :  void remove_macro(TRackDevicePyHandle)</Doc>
<Built-In>Live.RackDevice.RackDevice.remove_macros_mapped_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_macros_mapped_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "macros_mapped". C++ signature :  void remove_macros_mapped_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.remove_name_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.remove_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.remove_return_chains_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_return_chains_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "return_chains". C++ signature :  void remove_return_chains_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.remove_variation_count_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_variation_count_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "variation_count". C++ signature :  void remove_variation_count_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.remove_visible_drum_pads_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_visible_drum_pads_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "visible_drum_pads". C++ signature :  void remove_visible_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.remove_visible_macro_count_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_visible_macro_count_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "visible_macro_count". C++ signature :  void remove_visible_macro_count_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.return_chains_has_listener()<Description>Built-In</Description></Built-In>
<Doc>return_chains_has_listener( (RackDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "return_chains". C++ signature :  bool return_chains_has_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.store_chosen_bank()<Description>Built-In</Description></Built-In>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Built-In>Live.RackDevice.RackDevice.store_variation()<Description>Built-In</Description></Built-In>
<Doc>store_variation( (Device)arg1) -&gt; None : Stores a new variation of the values of all currently mapped macros C++ signature :  void store_variation(TPyHandle&lt;ADevice&gt;)</Doc>
<Built-In>Live.RackDevice.RackDevice.variation_count_has_listener()<Description>Built-In</Description></Built-In>
<Doc>variation_count_has_listener( (RackDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "variation_count". C++ signature :  bool variation_count_has_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.visible_drum_pads_has_listener()<Description>Built-In</Description></Built-In>
<Doc>visible_drum_pads_has_listener( (RackDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "visible_drum_pads". C++ signature :  bool visible_drum_pads_has_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.visible_macro_count_has_listener()<Description>Built-In</Description></Built-In>
<Doc>visible_macro_count_has_listener( (RackDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "visible_macro_count". C++ signature :  bool visible_macro_count_has_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.View<Description>Value</Description></Value>
<Doc>Representing the view aspects of a rack device.</Doc>
<Value>Live.RackDevice.RackDevice.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.RackDevice.RackDevice._live_ptr<Description>Value</Description></Value>
<Value>Live.RackDevice.RackDevice.add_chains_listener()<Description>Value</Description></Value>
<Doc>add_chains_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "chains" has changed. C++ signature :  void add_chains_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.add_drum_pads_listener()<Description>Value</Description></Value>
<Doc>add_drum_pads_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "drum_pads" has changed. C++ signature :  void add_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.add_has_drum_pads_listener()<Description>Value</Description></Value>
<Doc>add_has_drum_pads_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "has_drum_pads" has changed. C++ signature :  void add_has_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.add_has_macro_mappings_listener()<Description>Value</Description></Value>
<Doc>add_has_macro_mappings_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "has_macro_mappings" has changed. C++ signature :  void add_has_macro_mappings_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.add_is_active_listener()<Description>Value</Description></Value>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.add_is_showing_chains_listener()<Description>Value</Description></Value>
<Doc>add_is_showing_chains_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_showing_chains" has changed. C++ signature :  void add_is_showing_chains_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.add_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.add_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.add_macro()<Description>Value</Description></Value>
<Doc>add_macro( (RackDevice)arg1) -&gt; None : Increases the number of visible macro controls in the rack. Throws an exception if the maximum number of macro controls is reached. C++ signature :  void add_macro(TRackDevicePyHandle)</Doc>
<Value>Live.RackDevice.RackDevice.add_macros_mapped_listener()<Description>Value</Description></Value>
<Doc>add_macros_mapped_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "macros_mapped" has changed. C++ signature :  void add_macros_mapped_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.add_name_listener()<Description>Value</Description></Value>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.add_parameters_listener()<Description>Value</Description></Value>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.add_return_chains_listener()<Description>Value</Description></Value>
<Doc>add_return_chains_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "return_chains" has changed. C++ signature :  void add_return_chains_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.add_variation_count_listener()<Description>Value</Description></Value>
<Doc>add_variation_count_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "variation_count" has changed. C++ signature :  void add_variation_count_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.add_visible_drum_pads_listener()<Description>Value</Description></Value>
<Doc>add_visible_drum_pads_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "visible_drum_pads" has changed. C++ signature :  void add_visible_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.add_visible_macro_count_listener()<Description>Value</Description></Value>
<Doc>add_visible_macro_count_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "visible_macro_count" has changed. C++ signature :  void add_visible_macro_count_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.can_have_chains<Description>Value</Description></Value>
<Doc>Returns true if the device is a rack.</Doc>
<Value>Live.RackDevice.RackDevice.can_have_drum_pads<Description>Value</Description></Value>
<Doc>Returns true if the device is a drum rack.</Doc>
<Value>Live.RackDevice.RackDevice.can_show_chains<Description>Value</Description></Value>
<Doc>return True, if this Rack contains a rack instrument device that is capable of showing its chains in session view.</Doc>
<Value>Live.RackDevice.RackDevice.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the Device.</Doc>
<Value>Live.RackDevice.RackDevice.chain_selector<Description>Value</Description></Value>
<Doc>Const access to the chain selector parameter.</Doc>
<Value>Live.RackDevice.RackDevice.chains<Description>Value</Description></Value>
<Doc>Return const access to the list of chains in this device. Throws an exception if can_have_chains is false.</Doc>
<Value>Live.RackDevice.RackDevice.chains_has_listener()<Description>Value</Description></Value>
<Doc>chains_has_listener( (RackDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "chains". C++ signature :  bool chains_has_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.class_display_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class name as displayed in Live's browser and device chain</Doc>
<Value>Live.RackDevice.RackDevice.class_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class.</Doc>
<Value>Live.RackDevice.RackDevice.copy_pad()<Description>Value</Description></Value>
<Doc>copy_pad( (RackDevice)arg1, (int)arg2, (int)arg3) -&gt; None : Copies all contents of a drum pad from a source pad into a destination pad. copy_pad(source_index, destination_index) where source_index and destination_index correspond to the note number/index of the drum pad in a drum rack. Throws an exception when the source pad is empty, or when the source or destination indices are not between 0 - 127. C++ signature :  void copy_pad(TRackDevicePyHandle,int,int)</Doc>
<Value>Live.RackDevice.RackDevice.delete_selected_variation()<Description>Value</Description></Value>
<Doc>delete_selected_variation( (Device)arg1) -&gt; None : Deletes the currently selected macro variation.Does nothing if there is no selected variation. C++ signature :  void delete_selected_variation(TPyHandle&lt;ADevice&gt;)</Doc>
<Value>Live.RackDevice.RackDevice.drum_pads<Description>Value</Description></Value>
<Doc>Return const access to the list of drum pads in this device. Throws an exception if can_have_drum_pads is false.</Doc>
<Value>Live.RackDevice.RackDevice.drum_pads_has_listener()<Description>Value</Description></Value>
<Doc>drum_pads_has_listener( (RackDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "drum_pads". C++ signature :  bool drum_pads_has_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.has_drum_pads<Description>Value</Description></Value>
<Doc>Returns true if the device is a drum rack which has drum pads. Throws an exception if can_have_drum_pads is false.</Doc>
<Value>Live.RackDevice.RackDevice.has_drum_pads_has_listener()<Description>Value</Description></Value>
<Doc>has_drum_pads_has_listener( (RackDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "has_drum_pads". C++ signature :  bool has_drum_pads_has_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.has_macro_mappings<Description>Value</Description></Value>
<Doc>Returns true if any of the rack's macros are mapped to a parameter.</Doc>
<Value>Live.RackDevice.RackDevice.has_macro_mappings_has_listener()<Description>Value</Description></Value>
<Doc>has_macro_mappings_has_listener( (RackDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "has_macro_mappings". C++ signature :  bool has_macro_mappings_has_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.is_active<Description>Value</Description></Value>
<Doc>Return const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off.</Doc>
<Value>Live.RackDevice.RackDevice.is_active_has_listener()<Description>Value</Description></Value>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.is_showing_chains<Description>Value</Description></Value>
<Doc>Returns True, if it is showing chains.</Doc>
<Value>Live.RackDevice.RackDevice.is_showing_chains_has_listener()<Description>Value</Description></Value>
<Doc>is_showing_chains_has_listener( (RackDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_showing_chains". C++ signature :  bool is_showing_chains_has_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.latency_in_ms<Description>Value</Description></Value>
<Doc>Returns the latency of the device in ms.</Doc>
<Value>Live.RackDevice.RackDevice.latency_in_ms_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.latency_in_samples<Description>Value</Description></Value>
<Doc>Returns the latency of the device in samples.</Doc>
<Value>Live.RackDevice.RackDevice.latency_in_samples_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.macros_mapped<Description>Value</Description></Value>
<Doc>A list of booleans, one for each macro parameter, which is True iffthat macro is mapped to something</Doc>
<Value>Live.RackDevice.RackDevice.macros_mapped_has_listener()<Description>Value</Description></Value>
<Doc>macros_mapped_has_listener( (RackDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "macros_mapped". C++ signature :  bool macros_mapped_has_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.name<Description>Value</Description></Value>
<Doc>Return access to the name of the device.</Doc>
<Value>Live.RackDevice.RackDevice.name_has_listener()<Description>Value</Description></Value>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.parameters<Description>Value</Description></Value>
<Doc>Const access to the list of available automatable parameters for this device.</Doc>
<Value>Live.RackDevice.RackDevice.parameters_has_listener()<Description>Value</Description></Value>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.randomize_macros()<Description>Value</Description></Value>
<Doc>randomize_macros( (RackDevice)arg1) -&gt; None : Randomizes the values for all macro controls not excluded from randomization. C++ signature :  void randomize_macros(TRackDevicePyHandle)</Doc>
<Value>Live.RackDevice.RackDevice.recall_last_used_variation()<Description>Value</Description></Value>
<Doc>recall_last_used_variation( (Device)arg1) -&gt; None : Recalls the macro variation that was recalled most recently.Does nothing if no variation has been recalled yet. C++ signature :  void recall_last_used_variation(TPyHandle&lt;ADevice&gt;)</Doc>
<Value>Live.RackDevice.RackDevice.recall_selected_variation()<Description>Value</Description></Value>
<Doc>recall_selected_variation( (Device)arg1) -&gt; None : Recalls the currently selected macro variation.Does nothing if there are no variations. C++ signature :  void recall_selected_variation(TPyHandle&lt;ADevice&gt;)</Doc>
<Value>Live.RackDevice.RackDevice.remove_chains_listener()<Description>Value</Description></Value>
<Doc>remove_chains_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "chains". C++ signature :  void remove_chains_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.remove_drum_pads_listener()<Description>Value</Description></Value>
<Doc>remove_drum_pads_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "drum_pads". C++ signature :  void remove_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.remove_has_drum_pads_listener()<Description>Value</Description></Value>
<Doc>remove_has_drum_pads_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "has_drum_pads". C++ signature :  void remove_has_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.remove_has_macro_mappings_listener()<Description>Value</Description></Value>
<Doc>remove_has_macro_mappings_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "has_macro_mappings". C++ signature :  void remove_has_macro_mappings_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.remove_is_active_listener()<Description>Value</Description></Value>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.remove_is_showing_chains_listener()<Description>Value</Description></Value>
<Doc>remove_is_showing_chains_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_showing_chains". C++ signature :  void remove_is_showing_chains_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.remove_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.remove_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.remove_macro()<Description>Value</Description></Value>
<Doc>remove_macro( (RackDevice)arg1) -&gt; None : Decreases the number of visible macro controls in the rack. Throws an exception if the minimum number of macro controls is reached. C++ signature :  void remove_macro(TRackDevicePyHandle)</Doc>
<Value>Live.RackDevice.RackDevice.remove_macros_mapped_listener()<Description>Value</Description></Value>
<Doc>remove_macros_mapped_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "macros_mapped". C++ signature :  void remove_macros_mapped_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.remove_name_listener()<Description>Value</Description></Value>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.remove_parameters_listener()<Description>Value</Description></Value>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.remove_return_chains_listener()<Description>Value</Description></Value>
<Doc>remove_return_chains_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "return_chains". C++ signature :  void remove_return_chains_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.remove_variation_count_listener()<Description>Value</Description></Value>
<Doc>remove_variation_count_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "variation_count". C++ signature :  void remove_variation_count_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.remove_visible_drum_pads_listener()<Description>Value</Description></Value>
<Doc>remove_visible_drum_pads_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "visible_drum_pads". C++ signature :  void remove_visible_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.remove_visible_macro_count_listener()<Description>Value</Description></Value>
<Doc>remove_visible_macro_count_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "visible_macro_count". C++ signature :  void remove_visible_macro_count_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.return_chains<Description>Value</Description></Value>
<Doc>Return const access to the list of return chains in this device. Throws an exception if can_have_chains is false.</Doc>
<Value>Live.RackDevice.RackDevice.return_chains_has_listener()<Description>Value</Description></Value>
<Doc>return_chains_has_listener( (RackDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "return_chains". C++ signature :  bool return_chains_has_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.selected_variation_index<Description>Value</Description></Value>
<Doc>Access to the index of the currently selected macro variation.Throws an exception if the index is out of range.</Doc>
<Value>Live.RackDevice.RackDevice.store_chosen_bank()<Description>Value</Description></Value>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Value>Live.RackDevice.RackDevice.store_variation()<Description>Value</Description></Value>
<Doc>store_variation( (Device)arg1) -&gt; None : Stores a new variation of the values of all currently mapped macros C++ signature :  void store_variation(TPyHandle&lt;ADevice&gt;)</Doc>
<Value>Live.RackDevice.RackDevice.type<Description>Value</Description></Value>
<Doc>Return the type of the device.</Doc>
<Value>Live.RackDevice.RackDevice.variation_count<Description>Value</Description></Value>
<Doc>Access to the number of macro variations currently stored.</Doc>
<Value>Live.RackDevice.RackDevice.variation_count_has_listener()<Description>Value</Description></Value>
<Doc>variation_count_has_listener( (RackDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "variation_count". C++ signature :  bool variation_count_has_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.view<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Value>Live.RackDevice.RackDevice.visible_drum_pads<Description>Value</Description></Value>
<Doc>Return const access to the list of visible drum pads in this device. Throws an exception if can_have_drum_pads is false.</Doc>
<Value>Live.RackDevice.RackDevice.visible_drum_pads_has_listener()<Description>Value</Description></Value>
<Doc>visible_drum_pads_has_listener( (RackDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "visible_drum_pads". C++ signature :  bool visible_drum_pads_has_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.visible_macro_count<Description>Value</Description></Value>
<Doc>Access to the number of macros that are currently visible.</Doc>
<Value>Live.RackDevice.RackDevice.visible_macro_count_has_listener()<Description>Value</Description></Value>
<Doc>visible_macro_count_has_listener( (RackDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "visible_macro_count". C++ signature :  bool visible_macro_count_has_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
<Class>Live.RackDevice.RackDevice.View<Description>Class</Description></Class>
<Doc>Representing the view aspects of a rack device.</Doc>
<Built-In>Live.RackDevice.RackDevice.View.add_drum_pads_scroll_position_listener()<Description>Built-In</Description></Built-In>
<Doc>add_drum_pads_scroll_position_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "drum_pads_scroll_position" has changed. C++ signature :  void add_drum_pads_scroll_position_listener(TRackDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.View.add_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.View.add_is_showing_chain_devices_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_showing_chain_devices_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_showing_chain_devices" has changed. C++ signature :  void add_is_showing_chain_devices_listener(TRackDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.View.add_selected_chain_listener()<Description>Built-In</Description></Built-In>
<Doc>add_selected_chain_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "selected_chain" has changed. C++ signature :  void add_selected_chain_listener(TRackDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.View.add_selected_drum_pad_listener()<Description>Built-In</Description></Built-In>
<Doc>add_selected_drum_pad_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "selected_drum_pad" has changed. C++ signature :  void add_selected_drum_pad_listener(TRackDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.View.drum_pads_scroll_position_has_listener()<Description>Built-In</Description></Built-In>
<Doc>drum_pads_scroll_position_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "drum_pads_scroll_position". C++ signature :  bool drum_pads_scroll_position_has_listener(TRackDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.View.is_collapsed_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.View.is_showing_chain_devices_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_showing_chain_devices_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_showing_chain_devices". C++ signature :  bool is_showing_chain_devices_has_listener(TRackDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.View.remove_drum_pads_scroll_position_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_drum_pads_scroll_position_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "drum_pads_scroll_position". C++ signature :  void remove_drum_pads_scroll_position_listener(TRackDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.View.remove_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.View.remove_is_showing_chain_devices_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_showing_chain_devices_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_showing_chain_devices". C++ signature :  void remove_is_showing_chain_devices_listener(TRackDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.View.remove_selected_chain_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_selected_chain_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "selected_chain". C++ signature :  void remove_selected_chain_listener(TRackDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.View.remove_selected_drum_pad_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_selected_drum_pad_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "selected_drum_pad". C++ signature :  void remove_selected_drum_pad_listener(TRackDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.View.selected_chain_has_listener()<Description>Built-In</Description></Built-In>
<Doc>selected_chain_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "selected_chain". C++ signature :  bool selected_chain_has_listener(TRackDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.RackDevice.RackDevice.View.selected_drum_pad_has_listener()<Description>Built-In</Description></Built-In>
<Doc>selected_drum_pad_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "selected_drum_pad". C++ signature :  bool selected_drum_pad_has_listener(TRackDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.View.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.RackDevice.RackDevice.View._live_ptr<Description>Value</Description></Value>
<Value>Live.RackDevice.RackDevice.View.add_drum_pads_scroll_position_listener()<Description>Value</Description></Value>
<Doc>add_drum_pads_scroll_position_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "drum_pads_scroll_position" has changed. C++ signature :  void add_drum_pads_scroll_position_listener(TRackDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.View.add_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.View.add_is_showing_chain_devices_listener()<Description>Value</Description></Value>
<Doc>add_is_showing_chain_devices_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_showing_chain_devices" has changed. C++ signature :  void add_is_showing_chain_devices_listener(TRackDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.View.add_selected_chain_listener()<Description>Value</Description></Value>
<Doc>add_selected_chain_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "selected_chain" has changed. C++ signature :  void add_selected_chain_listener(TRackDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.View.add_selected_drum_pad_listener()<Description>Value</Description></Value>
<Doc>add_selected_drum_pad_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "selected_drum_pad" has changed. C++ signature :  void add_selected_drum_pad_listener(TRackDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.View.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the View.</Doc>
<Value>Live.RackDevice.RackDevice.View.drum_pads_scroll_position<Description>Value</Description></Value>
<Doc>Access to the index of the lowest visible row of pads. Throws an exception if can_have_drum_pads is false.</Doc>
<Value>Live.RackDevice.RackDevice.View.drum_pads_scroll_position_has_listener()<Description>Value</Description></Value>
<Doc>drum_pads_scroll_position_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "drum_pads_scroll_position". C++ signature :  bool drum_pads_scroll_position_has_listener(TRackDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.View.is_collapsed<Description>Value</Description></Value>
<Doc>Get/Set/Listen if the device is shown collapsed in the device chain.</Doc>
<Value>Live.RackDevice.RackDevice.View.is_collapsed_has_listener()<Description>Value</Description></Value>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.View.is_showing_chain_devices<Description>Value</Description></Value>
<Doc>Return whether the devices in the currently selected chain are visible. Throws an exception if can_have_chains is false.</Doc>
<Value>Live.RackDevice.RackDevice.View.is_showing_chain_devices_has_listener()<Description>Value</Description></Value>
<Doc>is_showing_chain_devices_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_showing_chain_devices". C++ signature :  bool is_showing_chain_devices_has_listener(TRackDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.View.remove_drum_pads_scroll_position_listener()<Description>Value</Description></Value>
<Doc>remove_drum_pads_scroll_position_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "drum_pads_scroll_position". C++ signature :  void remove_drum_pads_scroll_position_listener(TRackDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.View.remove_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.View.remove_is_showing_chain_devices_listener()<Description>Value</Description></Value>
<Doc>remove_is_showing_chain_devices_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_showing_chain_devices". C++ signature :  void remove_is_showing_chain_devices_listener(TRackDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.View.remove_selected_chain_listener()<Description>Value</Description></Value>
<Doc>remove_selected_chain_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "selected_chain". C++ signature :  void remove_selected_chain_listener(TRackDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.View.remove_selected_drum_pad_listener()<Description>Value</Description></Value>
<Doc>remove_selected_drum_pad_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "selected_drum_pad". C++ signature :  void remove_selected_drum_pad_listener(TRackDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.View.selected_chain<Description>Value</Description></Value>
<Doc>Return access to the currently selected chain.</Doc>
<Value>Live.RackDevice.RackDevice.View.selected_chain_has_listener()<Description>Value</Description></Value>
<Doc>selected_chain_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "selected_chain". C++ signature :  bool selected_chain_has_listener(TRackDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.RackDevice.RackDevice.View.selected_drum_pad<Description>Value</Description></Value>
<Doc>Return access to the currently selected drum pad. Throws an exception if can_have_drum_pads is false.</Doc>
<Value>Live.RackDevice.RackDevice.View.selected_drum_pad_has_listener()<Description>Value</Description></Value>
<Doc>selected_drum_pad_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "selected_drum_pad". C++ signature :  bool selected_drum_pad_has_listener(TRackDevicePyViewData,boost::python::api::object)</Doc>
<Module>Live.RoarDevice<Description>Module</Description></Module>
<Class>Live.RoarDevice.RoarDevice<Description>Class</Description></Class>
<Doc>This class represents a Roar device.</Doc>
<Built-In>Live.RoarDevice.RoarDevice.add_env_listen_listener()<Description>Built-In</Description></Built-In>
<Doc>add_env_listen_listener( (RoarDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "env_listen" has changed. C++ signature :  void add_env_listen_listener(TRoarDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RoarDevice.RoarDevice.add_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RoarDevice.RoarDevice.add_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RoarDevice.RoarDevice.add_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RoarDevice.RoarDevice.add_name_listener()<Description>Built-In</Description></Built-In>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RoarDevice.RoarDevice.add_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RoarDevice.RoarDevice.add_routing_mode_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_routing_mode_index_listener( (RoarDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "routing_mode_index" has changed. C++ signature :  void add_routing_mode_index_listener(TRoarDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RoarDevice.RoarDevice.env_listen_has_listener()<Description>Built-In</Description></Built-In>
<Doc>env_listen_has_listener( (RoarDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "env_listen". C++ signature :  bool env_listen_has_listener(TRoarDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RoarDevice.RoarDevice.is_active_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RoarDevice.RoarDevice.latency_in_ms_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RoarDevice.RoarDevice.latency_in_samples_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RoarDevice.RoarDevice.name_has_listener()<Description>Built-In</Description></Built-In>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RoarDevice.RoarDevice.parameters_has_listener()<Description>Built-In</Description></Built-In>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RoarDevice.RoarDevice.remove_env_listen_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_env_listen_listener( (RoarDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "env_listen". C++ signature :  void remove_env_listen_listener(TRoarDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RoarDevice.RoarDevice.remove_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RoarDevice.RoarDevice.remove_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RoarDevice.RoarDevice.remove_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RoarDevice.RoarDevice.remove_name_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RoarDevice.RoarDevice.remove_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RoarDevice.RoarDevice.remove_routing_mode_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_routing_mode_index_listener( (RoarDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "routing_mode_index". C++ signature :  void remove_routing_mode_index_listener(TRoarDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RoarDevice.RoarDevice.routing_mode_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>routing_mode_index_has_listener( (RoarDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "routing_mode_index". C++ signature :  bool routing_mode_index_has_listener(TRoarDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.RoarDevice.RoarDevice.store_chosen_bank()<Description>Built-In</Description></Built-In>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Value>Live.RoarDevice.RoarDevice.View<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Value>Live.RoarDevice.RoarDevice.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.RoarDevice.RoarDevice._live_ptr<Description>Value</Description></Value>
<Value>Live.RoarDevice.RoarDevice.add_env_listen_listener()<Description>Value</Description></Value>
<Doc>add_env_listen_listener( (RoarDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "env_listen" has changed. C++ signature :  void add_env_listen_listener(TRoarDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RoarDevice.RoarDevice.add_is_active_listener()<Description>Value</Description></Value>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RoarDevice.RoarDevice.add_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RoarDevice.RoarDevice.add_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RoarDevice.RoarDevice.add_name_listener()<Description>Value</Description></Value>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RoarDevice.RoarDevice.add_parameters_listener()<Description>Value</Description></Value>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RoarDevice.RoarDevice.add_routing_mode_index_listener()<Description>Value</Description></Value>
<Doc>add_routing_mode_index_listener( (RoarDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "routing_mode_index" has changed. C++ signature :  void add_routing_mode_index_listener(TRoarDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RoarDevice.RoarDevice.can_have_chains<Description>Value</Description></Value>
<Doc>Returns true if the device is a rack.</Doc>
<Value>Live.RoarDevice.RoarDevice.can_have_drum_pads<Description>Value</Description></Value>
<Doc>Returns true if the device is a drum rack.</Doc>
<Value>Live.RoarDevice.RoarDevice.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the Device.</Doc>
<Value>Live.RoarDevice.RoarDevice.class_display_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class name as displayed in Live's browser and device chain</Doc>
<Value>Live.RoarDevice.RoarDevice.class_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class.</Doc>
<Value>Live.RoarDevice.RoarDevice.env_listen<Description>Value</Description></Value>
<Doc>Return the Envelope Input Listen toggle state</Doc>
<Value>Live.RoarDevice.RoarDevice.env_listen_has_listener()<Description>Value</Description></Value>
<Doc>env_listen_has_listener( (RoarDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "env_listen". C++ signature :  bool env_listen_has_listener(TRoarDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RoarDevice.RoarDevice.is_active<Description>Value</Description></Value>
<Doc>Return const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off.</Doc>
<Value>Live.RoarDevice.RoarDevice.is_active_has_listener()<Description>Value</Description></Value>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RoarDevice.RoarDevice.latency_in_ms<Description>Value</Description></Value>
<Doc>Returns the latency of the device in ms.</Doc>
<Value>Live.RoarDevice.RoarDevice.latency_in_ms_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RoarDevice.RoarDevice.latency_in_samples<Description>Value</Description></Value>
<Doc>Returns the latency of the device in samples.</Doc>
<Value>Live.RoarDevice.RoarDevice.latency_in_samples_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RoarDevice.RoarDevice.name<Description>Value</Description></Value>
<Doc>Return access to the name of the device.</Doc>
<Value>Live.RoarDevice.RoarDevice.name_has_listener()<Description>Value</Description></Value>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RoarDevice.RoarDevice.parameters<Description>Value</Description></Value>
<Doc>Const access to the list of available automatable parameters for this device.</Doc>
<Value>Live.RoarDevice.RoarDevice.parameters_has_listener()<Description>Value</Description></Value>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RoarDevice.RoarDevice.remove_env_listen_listener()<Description>Value</Description></Value>
<Doc>remove_env_listen_listener( (RoarDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "env_listen". C++ signature :  void remove_env_listen_listener(TRoarDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RoarDevice.RoarDevice.remove_is_active_listener()<Description>Value</Description></Value>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RoarDevice.RoarDevice.remove_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RoarDevice.RoarDevice.remove_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RoarDevice.RoarDevice.remove_name_listener()<Description>Value</Description></Value>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RoarDevice.RoarDevice.remove_parameters_listener()<Description>Value</Description></Value>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RoarDevice.RoarDevice.remove_routing_mode_index_listener()<Description>Value</Description></Value>
<Doc>remove_routing_mode_index_listener( (RoarDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "routing_mode_index". C++ signature :  void remove_routing_mode_index_listener(TRoarDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RoarDevice.RoarDevice.routing_mode_index<Description>Value</Description></Value>
<Doc>Return the routing mode index</Doc>
<Value>Live.RoarDevice.RoarDevice.routing_mode_index_has_listener()<Description>Value</Description></Value>
<Doc>routing_mode_index_has_listener( (RoarDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "routing_mode_index". C++ signature :  bool routing_mode_index_has_listener(TRoarDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.RoarDevice.RoarDevice.routing_mode_list<Description>Value</Description></Value>
<Doc>Return the routing mode list</Doc>
<Value>Live.RoarDevice.RoarDevice.store_chosen_bank()<Description>Value</Description></Value>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Value>Live.RoarDevice.RoarDevice.type<Description>Value</Description></Value>
<Doc>Return the type of the device.</Doc>
<Value>Live.RoarDevice.RoarDevice.view<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Class>Live.RoarDevice.RoarDevice.View<Description>Class</Description></Class>
<Doc>Representing the view aspects of a device.</Doc>
<Built-In>Live.RoarDevice.RoarDevice.View.add_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RoarDevice.RoarDevice.View.is_collapsed_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.RoarDevice.RoarDevice.View.remove_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RoarDevice.RoarDevice.View.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.RoarDevice.RoarDevice.View._live_ptr<Description>Value</Description></Value>
<Value>Live.RoarDevice.RoarDevice.View.add_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RoarDevice.RoarDevice.View.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the View.</Doc>
<Value>Live.RoarDevice.RoarDevice.View.is_collapsed<Description>Value</Description></Value>
<Doc>Get/Set/Listen if the device is shown collapsed in the device chain.</Doc>
<Value>Live.RoarDevice.RoarDevice.View.is_collapsed_has_listener()<Description>Value</Description></Value>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.RoarDevice.RoarDevice.View.remove_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Module>Live.Sample<Description>Module</Description></Module>
<Class>Live.Sample.Sample<Description>Class</Description></Class>
<Doc>This class represents a sample file loaded into a Simpler instance.</Doc>
<Built-In>Live.Sample.Sample.add_beats_granulation_resolution_listener()<Description>Built-In</Description></Built-In>
<Doc>add_beats_granulation_resolution_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "beats_granulation_resolution" has changed. C++ signature :  void add_beats_granulation_resolution_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.add_beats_transient_envelope_listener()<Description>Built-In</Description></Built-In>
<Doc>add_beats_transient_envelope_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "beats_transient_envelope" has changed. C++ signature :  void add_beats_transient_envelope_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.add_beats_transient_loop_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>add_beats_transient_loop_mode_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "beats_transient_loop_mode" has changed. C++ signature :  void add_beats_transient_loop_mode_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.add_complex_pro_envelope_listener()<Description>Built-In</Description></Built-In>
<Doc>add_complex_pro_envelope_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "complex_pro_envelope" has changed. C++ signature :  void add_complex_pro_envelope_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.add_complex_pro_formants_listener()<Description>Built-In</Description></Built-In>
<Doc>add_complex_pro_formants_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "complex_pro_formants" has changed. C++ signature :  void add_complex_pro_formants_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.add_end_marker_listener()<Description>Built-In</Description></Built-In>
<Doc>add_end_marker_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "end_marker" has changed. C++ signature :  void add_end_marker_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.add_file_path_listener()<Description>Built-In</Description></Built-In>
<Doc>add_file_path_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "file_path" has changed. C++ signature :  void add_file_path_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.add_gain_listener()<Description>Built-In</Description></Built-In>
<Doc>add_gain_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "gain" has changed. C++ signature :  void add_gain_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.add_slices_listener()<Description>Built-In</Description></Built-In>
<Doc>add_slices_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "slices" has changed. C++ signature :  void add_slices_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.add_slicing_beat_division_listener()<Description>Built-In</Description></Built-In>
<Doc>add_slicing_beat_division_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "slicing_beat_division" has changed. C++ signature :  void add_slicing_beat_division_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.add_slicing_region_count_listener()<Description>Built-In</Description></Built-In>
<Doc>add_slicing_region_count_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "slicing_region_count" has changed. C++ signature :  void add_slicing_region_count_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.add_slicing_sensitivity_listener()<Description>Built-In</Description></Built-In>
<Doc>add_slicing_sensitivity_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "slicing_sensitivity" has changed. C++ signature :  void add_slicing_sensitivity_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.add_slicing_style_listener()<Description>Built-In</Description></Built-In>
<Doc>add_slicing_style_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "slicing_style" has changed. C++ signature :  void add_slicing_style_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.add_start_marker_listener()<Description>Built-In</Description></Built-In>
<Doc>add_start_marker_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "start_marker" has changed. C++ signature :  void add_start_marker_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.add_texture_flux_listener()<Description>Built-In</Description></Built-In>
<Doc>add_texture_flux_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "texture_flux" has changed. C++ signature :  void add_texture_flux_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.add_texture_grain_size_listener()<Description>Built-In</Description></Built-In>
<Doc>add_texture_grain_size_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "texture_grain_size" has changed. C++ signature :  void add_texture_grain_size_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.add_tones_grain_size_listener()<Description>Built-In</Description></Built-In>
<Doc>add_tones_grain_size_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "tones_grain_size" has changed. C++ signature :  void add_tones_grain_size_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.add_warp_markers_listener()<Description>Built-In</Description></Built-In>
<Doc>add_warp_markers_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "warp_markers" has changed. C++ signature :  void add_warp_markers_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.add_warp_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>add_warp_mode_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "warp_mode" has changed. C++ signature :  void add_warp_mode_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.add_warping_listener()<Description>Built-In</Description></Built-In>
<Doc>add_warping_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "warping" has changed. C++ signature :  void add_warping_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.beat_to_sample_time()<Description>Built-In</Description></Built-In>
<Doc>beat_to_sample_time( (Sample)self, (float)beat_time) -&gt; float : Converts the given beat time to sample time. Raises an error if the sample is not warped. C++ signature :  double beat_to_sample_time(TPyHandle&lt;AMultiSamplePart&gt;,double)</Doc>
<Built-In>Live.Sample.Sample.beats_granulation_resolution_has_listener()<Description>Built-In</Description></Built-In>
<Doc>beats_granulation_resolution_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "beats_granulation_resolution". C++ signature :  bool beats_granulation_resolution_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.beats_transient_envelope_has_listener()<Description>Built-In</Description></Built-In>
<Doc>beats_transient_envelope_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "beats_transient_envelope". C++ signature :  bool beats_transient_envelope_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.beats_transient_loop_mode_has_listener()<Description>Built-In</Description></Built-In>
<Doc>beats_transient_loop_mode_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "beats_transient_loop_mode". C++ signature :  bool beats_transient_loop_mode_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.clear_slices()<Description>Built-In</Description></Built-In>
<Doc>clear_slices( (Sample)self) -&gt; None : Clears all slices created in Simpler's manual mode. C++ signature :  void clear_slices(TPyHandle&lt;AMultiSamplePart&gt;)</Doc>
<Built-In>Live.Sample.Sample.complex_pro_envelope_has_listener()<Description>Built-In</Description></Built-In>
<Doc>complex_pro_envelope_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "complex_pro_envelope". C++ signature :  bool complex_pro_envelope_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.complex_pro_formants_has_listener()<Description>Built-In</Description></Built-In>
<Doc>complex_pro_formants_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "complex_pro_formants". C++ signature :  bool complex_pro_formants_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.end_marker_has_listener()<Description>Built-In</Description></Built-In>
<Doc>end_marker_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "end_marker". C++ signature :  bool end_marker_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.file_path_has_listener()<Description>Built-In</Description></Built-In>
<Doc>file_path_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "file_path". C++ signature :  bool file_path_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.gain_display_string()<Description>Built-In</Description></Built-In>
<Doc>gain_display_string( (Sample)self) -&gt; str : Get the gain's display value as a string. C++ signature :  TString gain_display_string(TPyHandle&lt;AMultiSamplePart&gt;)</Doc>
<Built-In>Live.Sample.Sample.gain_has_listener()<Description>Built-In</Description></Built-In>
<Doc>gain_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "gain". C++ signature :  bool gain_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.insert_slice()<Description>Built-In</Description></Built-In>
<Doc>insert_slice( (Sample)self, (int)slice_time) -&gt; None : Add a slice point at the provided time if there is none. C++ signature :  void insert_slice(TPyHandle&lt;AMultiSamplePart&gt;,int)</Doc>
<Built-In>Live.Sample.Sample.move_slice()<Description>Built-In</Description></Built-In>
<Doc>move_slice( (Sample)self, (int)old_time, (int)new_time) -&gt; int : Move the slice point at the provided time. C++ signature :  int move_slice(TPyHandle&lt;AMultiSamplePart&gt;,int,int)</Doc>
<Built-In>Live.Sample.Sample.remove_beats_granulation_resolution_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_beats_granulation_resolution_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "beats_granulation_resolution". C++ signature :  void remove_beats_granulation_resolution_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.remove_beats_transient_envelope_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_beats_transient_envelope_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "beats_transient_envelope". C++ signature :  void remove_beats_transient_envelope_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.remove_beats_transient_loop_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_beats_transient_loop_mode_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "beats_transient_loop_mode". C++ signature :  void remove_beats_transient_loop_mode_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.remove_complex_pro_envelope_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_complex_pro_envelope_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "complex_pro_envelope". C++ signature :  void remove_complex_pro_envelope_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.remove_complex_pro_formants_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_complex_pro_formants_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "complex_pro_formants". C++ signature :  void remove_complex_pro_formants_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.remove_end_marker_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_end_marker_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "end_marker". C++ signature :  void remove_end_marker_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.remove_file_path_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_file_path_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "file_path". C++ signature :  void remove_file_path_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.remove_gain_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_gain_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "gain". C++ signature :  void remove_gain_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.remove_slice()<Description>Built-In</Description></Built-In>
<Doc>remove_slice( (Sample)self, (int)slice_time) -&gt; None : Remove the slice point at the provided time if there is one. C++ signature :  void remove_slice(TPyHandle&lt;AMultiSamplePart&gt;,int)</Doc>
<Built-In>Live.Sample.Sample.remove_slices_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_slices_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "slices". C++ signature :  void remove_slices_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.remove_slicing_beat_division_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_slicing_beat_division_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "slicing_beat_division". C++ signature :  void remove_slicing_beat_division_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.remove_slicing_region_count_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_slicing_region_count_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "slicing_region_count". C++ signature :  void remove_slicing_region_count_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.remove_slicing_sensitivity_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_slicing_sensitivity_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "slicing_sensitivity". C++ signature :  void remove_slicing_sensitivity_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.remove_slicing_style_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_slicing_style_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "slicing_style". C++ signature :  void remove_slicing_style_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.remove_start_marker_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_start_marker_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "start_marker". C++ signature :  void remove_start_marker_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.remove_texture_flux_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_texture_flux_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "texture_flux". C++ signature :  void remove_texture_flux_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.remove_texture_grain_size_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_texture_grain_size_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "texture_grain_size". C++ signature :  void remove_texture_grain_size_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.remove_tones_grain_size_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_tones_grain_size_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "tones_grain_size". C++ signature :  void remove_tones_grain_size_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.remove_warp_markers_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_warp_markers_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "warp_markers". C++ signature :  void remove_warp_markers_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.remove_warp_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_warp_mode_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "warp_mode". C++ signature :  void remove_warp_mode_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.remove_warping_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_warping_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "warping". C++ signature :  void remove_warping_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.reset_slices()<Description>Built-In</Description></Built-In>
<Doc>reset_slices( (Sample)self) -&gt; None : Resets all edited slices to their original positions. C++ signature :  void reset_slices(TPyHandle&lt;AMultiSamplePart&gt;)</Doc>
<Built-In>Live.Sample.Sample.sample_to_beat_time()<Description>Built-In</Description></Built-In>
<Doc>sample_to_beat_time( (Sample)self, (float)sample_time) -&gt; float : Converts the given sample time to beat time. Raises an error if the sample is not warped. C++ signature :  double sample_to_beat_time(TPyHandle&lt;AMultiSamplePart&gt;,double)</Doc>
<Built-In>Live.Sample.Sample.slices_has_listener()<Description>Built-In</Description></Built-In>
<Doc>slices_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "slices". C++ signature :  bool slices_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.slicing_beat_division_has_listener()<Description>Built-In</Description></Built-In>
<Doc>slicing_beat_division_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "slicing_beat_division". C++ signature :  bool slicing_beat_division_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.slicing_region_count_has_listener()<Description>Built-In</Description></Built-In>
<Doc>slicing_region_count_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "slicing_region_count". C++ signature :  bool slicing_region_count_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.slicing_sensitivity_has_listener()<Description>Built-In</Description></Built-In>
<Doc>slicing_sensitivity_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "slicing_sensitivity". C++ signature :  bool slicing_sensitivity_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.slicing_style_has_listener()<Description>Built-In</Description></Built-In>
<Doc>slicing_style_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "slicing_style". C++ signature :  bool slicing_style_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.start_marker_has_listener()<Description>Built-In</Description></Built-In>
<Doc>start_marker_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "start_marker". C++ signature :  bool start_marker_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.texture_flux_has_listener()<Description>Built-In</Description></Built-In>
<Doc>texture_flux_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "texture_flux". C++ signature :  bool texture_flux_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.texture_grain_size_has_listener()<Description>Built-In</Description></Built-In>
<Doc>texture_grain_size_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "texture_grain_size". C++ signature :  bool texture_grain_size_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.tones_grain_size_has_listener()<Description>Built-In</Description></Built-In>
<Doc>tones_grain_size_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "tones_grain_size". C++ signature :  bool tones_grain_size_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.warp_markers_has_listener()<Description>Built-In</Description></Built-In>
<Doc>warp_markers_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "warp_markers". C++ signature :  bool warp_markers_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.warp_mode_has_listener()<Description>Built-In</Description></Built-In>
<Doc>warp_mode_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "warp_mode". C++ signature :  bool warp_mode_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Sample.Sample.warping_has_listener()<Description>Built-In</Description></Built-In>
<Doc>warping_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "warping". C++ signature :  bool warping_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Sample.Sample._live_ptr<Description>Value</Description></Value>
<Value>Live.Sample.Sample.add_beats_granulation_resolution_listener()<Description>Value</Description></Value>
<Doc>add_beats_granulation_resolution_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "beats_granulation_resolution" has changed. C++ signature :  void add_beats_granulation_resolution_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.add_beats_transient_envelope_listener()<Description>Value</Description></Value>
<Doc>add_beats_transient_envelope_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "beats_transient_envelope" has changed. C++ signature :  void add_beats_transient_envelope_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.add_beats_transient_loop_mode_listener()<Description>Value</Description></Value>
<Doc>add_beats_transient_loop_mode_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "beats_transient_loop_mode" has changed. C++ signature :  void add_beats_transient_loop_mode_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.add_complex_pro_envelope_listener()<Description>Value</Description></Value>
<Doc>add_complex_pro_envelope_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "complex_pro_envelope" has changed. C++ signature :  void add_complex_pro_envelope_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.add_complex_pro_formants_listener()<Description>Value</Description></Value>
<Doc>add_complex_pro_formants_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "complex_pro_formants" has changed. C++ signature :  void add_complex_pro_formants_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.add_end_marker_listener()<Description>Value</Description></Value>
<Doc>add_end_marker_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "end_marker" has changed. C++ signature :  void add_end_marker_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.add_file_path_listener()<Description>Value</Description></Value>
<Doc>add_file_path_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "file_path" has changed. C++ signature :  void add_file_path_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.add_gain_listener()<Description>Value</Description></Value>
<Doc>add_gain_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "gain" has changed. C++ signature :  void add_gain_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.add_slices_listener()<Description>Value</Description></Value>
<Doc>add_slices_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "slices" has changed. C++ signature :  void add_slices_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.add_slicing_beat_division_listener()<Description>Value</Description></Value>
<Doc>add_slicing_beat_division_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "slicing_beat_division" has changed. C++ signature :  void add_slicing_beat_division_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.add_slicing_region_count_listener()<Description>Value</Description></Value>
<Doc>add_slicing_region_count_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "slicing_region_count" has changed. C++ signature :  void add_slicing_region_count_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.add_slicing_sensitivity_listener()<Description>Value</Description></Value>
<Doc>add_slicing_sensitivity_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "slicing_sensitivity" has changed. C++ signature :  void add_slicing_sensitivity_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.add_slicing_style_listener()<Description>Value</Description></Value>
<Doc>add_slicing_style_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "slicing_style" has changed. C++ signature :  void add_slicing_style_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.add_start_marker_listener()<Description>Value</Description></Value>
<Doc>add_start_marker_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "start_marker" has changed. C++ signature :  void add_start_marker_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.add_texture_flux_listener()<Description>Value</Description></Value>
<Doc>add_texture_flux_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "texture_flux" has changed. C++ signature :  void add_texture_flux_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.add_texture_grain_size_listener()<Description>Value</Description></Value>
<Doc>add_texture_grain_size_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "texture_grain_size" has changed. C++ signature :  void add_texture_grain_size_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.add_tones_grain_size_listener()<Description>Value</Description></Value>
<Doc>add_tones_grain_size_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "tones_grain_size" has changed. C++ signature :  void add_tones_grain_size_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.add_warp_markers_listener()<Description>Value</Description></Value>
<Doc>add_warp_markers_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "warp_markers" has changed. C++ signature :  void add_warp_markers_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.add_warp_mode_listener()<Description>Value</Description></Value>
<Doc>add_warp_mode_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "warp_mode" has changed. C++ signature :  void add_warp_mode_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.add_warping_listener()<Description>Value</Description></Value>
<Doc>add_warping_listener( (Sample)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "warping" has changed. C++ signature :  void add_warping_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.beat_to_sample_time()<Description>Value</Description></Value>
<Doc>beat_to_sample_time( (Sample)self, (float)beat_time) -&gt; float : Converts the given beat time to sample time. Raises an error if the sample is not warped. C++ signature :  double beat_to_sample_time(TPyHandle&lt;AMultiSamplePart&gt;,double)</Doc>
<Value>Live.Sample.Sample.beats_granulation_resolution<Description>Value</Description></Value>
<Doc>Access to the Granulation Resolution parameter in Beats Warp Mode.</Doc>
<Value>Live.Sample.Sample.beats_granulation_resolution_has_listener()<Description>Value</Description></Value>
<Doc>beats_granulation_resolution_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "beats_granulation_resolution". C++ signature :  bool beats_granulation_resolution_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.beats_transient_envelope<Description>Value</Description></Value>
<Doc>Access to the Transient Envelope parameter in Beats Warp Mode.</Doc>
<Value>Live.Sample.Sample.beats_transient_envelope_has_listener()<Description>Value</Description></Value>
<Doc>beats_transient_envelope_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "beats_transient_envelope". C++ signature :  bool beats_transient_envelope_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.beats_transient_loop_mode<Description>Value</Description></Value>
<Doc>Access to the Transient Loop Mode parameter in Beats Warp Mode.</Doc>
<Value>Live.Sample.Sample.beats_transient_loop_mode_has_listener()<Description>Value</Description></Value>
<Doc>beats_transient_loop_mode_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "beats_transient_loop_mode". C++ signature :  bool beats_transient_loop_mode_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.canonical_parent<Description>Value</Description></Value>
<Doc>Access to the sample's canonical parent.</Doc>
<Value>Live.Sample.Sample.clear_slices()<Description>Value</Description></Value>
<Doc>clear_slices( (Sample)self) -&gt; None : Clears all slices created in Simpler's manual mode. C++ signature :  void clear_slices(TPyHandle&lt;AMultiSamplePart&gt;)</Doc>
<Value>Live.Sample.Sample.complex_pro_envelope<Description>Value</Description></Value>
<Doc>Access to the Envelope parameter in Complex Pro Mode.</Doc>
<Value>Live.Sample.Sample.complex_pro_envelope_has_listener()<Description>Value</Description></Value>
<Doc>complex_pro_envelope_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "complex_pro_envelope". C++ signature :  bool complex_pro_envelope_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.complex_pro_formants<Description>Value</Description></Value>
<Doc>Access to the Formants parameter in Complex Pro Warp Mode.</Doc>
<Value>Live.Sample.Sample.complex_pro_formants_has_listener()<Description>Value</Description></Value>
<Doc>complex_pro_formants_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "complex_pro_formants". C++ signature :  bool complex_pro_formants_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.end_marker<Description>Value</Description></Value>
<Doc>Access to the position of the sample's end marker.</Doc>
<Value>Live.Sample.Sample.end_marker_has_listener()<Description>Value</Description></Value>
<Doc>end_marker_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "end_marker". C++ signature :  bool end_marker_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.file_path<Description>Value</Description></Value>
<Doc>Get the path of the sample file.</Doc>
<Value>Live.Sample.Sample.file_path_has_listener()<Description>Value</Description></Value>
<Doc>file_path_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "file_path". C++ signature :  bool file_path_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.gain<Description>Value</Description></Value>
<Doc>Access to the sample gain.</Doc>
<Value>Live.Sample.Sample.gain_display_string()<Description>Value</Description></Value>
<Doc>gain_display_string( (Sample)self) -&gt; str : Get the gain's display value as a string. C++ signature :  TString gain_display_string(TPyHandle&lt;AMultiSamplePart&gt;)</Doc>
<Value>Live.Sample.Sample.gain_has_listener()<Description>Value</Description></Value>
<Doc>gain_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "gain". C++ signature :  bool gain_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.insert_slice()<Description>Value</Description></Value>
<Doc>insert_slice( (Sample)self, (int)slice_time) -&gt; None : Add a slice point at the provided time if there is none. C++ signature :  void insert_slice(TPyHandle&lt;AMultiSamplePart&gt;,int)</Doc>
<Value>Live.Sample.Sample.length<Description>Value</Description></Value>
<Doc>Get the length of the sample file in sample frames.</Doc>
<Value>Live.Sample.Sample.move_slice()<Description>Value</Description></Value>
<Doc>move_slice( (Sample)self, (int)old_time, (int)new_time) -&gt; int : Move the slice point at the provided time. C++ signature :  int move_slice(TPyHandle&lt;AMultiSamplePart&gt;,int,int)</Doc>
<Value>Live.Sample.Sample.remove_beats_granulation_resolution_listener()<Description>Value</Description></Value>
<Doc>remove_beats_granulation_resolution_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "beats_granulation_resolution". C++ signature :  void remove_beats_granulation_resolution_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.remove_beats_transient_envelope_listener()<Description>Value</Description></Value>
<Doc>remove_beats_transient_envelope_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "beats_transient_envelope". C++ signature :  void remove_beats_transient_envelope_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.remove_beats_transient_loop_mode_listener()<Description>Value</Description></Value>
<Doc>remove_beats_transient_loop_mode_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "beats_transient_loop_mode". C++ signature :  void remove_beats_transient_loop_mode_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.remove_complex_pro_envelope_listener()<Description>Value</Description></Value>
<Doc>remove_complex_pro_envelope_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "complex_pro_envelope". C++ signature :  void remove_complex_pro_envelope_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.remove_complex_pro_formants_listener()<Description>Value</Description></Value>
<Doc>remove_complex_pro_formants_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "complex_pro_formants". C++ signature :  void remove_complex_pro_formants_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.remove_end_marker_listener()<Description>Value</Description></Value>
<Doc>remove_end_marker_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "end_marker". C++ signature :  void remove_end_marker_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.remove_file_path_listener()<Description>Value</Description></Value>
<Doc>remove_file_path_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "file_path". C++ signature :  void remove_file_path_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.remove_gain_listener()<Description>Value</Description></Value>
<Doc>remove_gain_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "gain". C++ signature :  void remove_gain_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.remove_slice()<Description>Value</Description></Value>
<Doc>remove_slice( (Sample)self, (int)slice_time) -&gt; None : Remove the slice point at the provided time if there is one. C++ signature :  void remove_slice(TPyHandle&lt;AMultiSamplePart&gt;,int)</Doc>
<Value>Live.Sample.Sample.remove_slices_listener()<Description>Value</Description></Value>
<Doc>remove_slices_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "slices". C++ signature :  void remove_slices_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.remove_slicing_beat_division_listener()<Description>Value</Description></Value>
<Doc>remove_slicing_beat_division_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "slicing_beat_division". C++ signature :  void remove_slicing_beat_division_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.remove_slicing_region_count_listener()<Description>Value</Description></Value>
<Doc>remove_slicing_region_count_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "slicing_region_count". C++ signature :  void remove_slicing_region_count_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.remove_slicing_sensitivity_listener()<Description>Value</Description></Value>
<Doc>remove_slicing_sensitivity_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "slicing_sensitivity". C++ signature :  void remove_slicing_sensitivity_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.remove_slicing_style_listener()<Description>Value</Description></Value>
<Doc>remove_slicing_style_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "slicing_style". C++ signature :  void remove_slicing_style_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.remove_start_marker_listener()<Description>Value</Description></Value>
<Doc>remove_start_marker_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "start_marker". C++ signature :  void remove_start_marker_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.remove_texture_flux_listener()<Description>Value</Description></Value>
<Doc>remove_texture_flux_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "texture_flux". C++ signature :  void remove_texture_flux_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.remove_texture_grain_size_listener()<Description>Value</Description></Value>
<Doc>remove_texture_grain_size_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "texture_grain_size". C++ signature :  void remove_texture_grain_size_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.remove_tones_grain_size_listener()<Description>Value</Description></Value>
<Doc>remove_tones_grain_size_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "tones_grain_size". C++ signature :  void remove_tones_grain_size_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.remove_warp_markers_listener()<Description>Value</Description></Value>
<Doc>remove_warp_markers_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "warp_markers". C++ signature :  void remove_warp_markers_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.remove_warp_mode_listener()<Description>Value</Description></Value>
<Doc>remove_warp_mode_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "warp_mode". C++ signature :  void remove_warp_mode_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.remove_warping_listener()<Description>Value</Description></Value>
<Doc>remove_warping_listener( (Sample)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "warping". C++ signature :  void remove_warping_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.reset_slices()<Description>Value</Description></Value>
<Doc>reset_slices( (Sample)self) -&gt; None : Resets all edited slices to their original positions. C++ signature :  void reset_slices(TPyHandle&lt;AMultiSamplePart&gt;)</Doc>
<Value>Live.Sample.Sample.sample_rate<Description>Value</Description></Value>
<Doc>Access to the audio sample rate of the sample.</Doc>
<Value>Live.Sample.Sample.sample_to_beat_time()<Description>Value</Description></Value>
<Doc>sample_to_beat_time( (Sample)self, (float)sample_time) -&gt; float : Converts the given sample time to beat time. Raises an error if the sample is not warped. C++ signature :  double sample_to_beat_time(TPyHandle&lt;AMultiSamplePart&gt;,double)</Doc>
<Value>Live.Sample.Sample.slices<Description>Value</Description></Value>
<Doc>Access to the list of slice points in sample time in the sample.</Doc>
<Value>Live.Sample.Sample.slices_has_listener()<Description>Value</Description></Value>
<Doc>slices_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "slices". C++ signature :  bool slices_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.slicing_beat_division<Description>Value</Description></Value>
<Doc>Access to sample's slicing step size.</Doc>
<Value>Live.Sample.Sample.slicing_beat_division_has_listener()<Description>Value</Description></Value>
<Doc>slicing_beat_division_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "slicing_beat_division". C++ signature :  bool slicing_beat_division_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.slicing_region_count<Description>Value</Description></Value>
<Doc>Access to sample's slicing split count.</Doc>
<Value>Live.Sample.Sample.slicing_region_count_has_listener()<Description>Value</Description></Value>
<Doc>slicing_region_count_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "slicing_region_count". C++ signature :  bool slicing_region_count_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.slicing_sensitivity<Description>Value</Description></Value>
<Doc>Access to sample's slicing sensitivity whose sensitivity is in between 0.0 and 1.0.The higher the sensitivity, the more slices will be available.</Doc>
<Value>Live.Sample.Sample.slicing_sensitivity_has_listener()<Description>Value</Description></Value>
<Doc>slicing_sensitivity_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "slicing_sensitivity". C++ signature :  bool slicing_sensitivity_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.slicing_style<Description>Value</Description></Value>
<Doc>Access to sample's slicing style.</Doc>
<Value>Live.Sample.Sample.slicing_style_has_listener()<Description>Value</Description></Value>
<Doc>slicing_style_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "slicing_style". C++ signature :  bool slicing_style_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.start_marker<Description>Value</Description></Value>
<Doc>Access to the position of the sample's start marker.</Doc>
<Value>Live.Sample.Sample.start_marker_has_listener()<Description>Value</Description></Value>
<Doc>start_marker_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "start_marker". C++ signature :  bool start_marker_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.texture_flux<Description>Value</Description></Value>
<Doc>Access to the Flux parameter in Texture Warp Mode.</Doc>
<Value>Live.Sample.Sample.texture_flux_has_listener()<Description>Value</Description></Value>
<Doc>texture_flux_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "texture_flux". C++ signature :  bool texture_flux_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.texture_grain_size<Description>Value</Description></Value>
<Doc>Access to the Grain Size parameter in Texture Warp Mode.</Doc>
<Value>Live.Sample.Sample.texture_grain_size_has_listener()<Description>Value</Description></Value>
<Doc>texture_grain_size_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "texture_grain_size". C++ signature :  bool texture_grain_size_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.tones_grain_size<Description>Value</Description></Value>
<Doc>Access to the Grain Size parameter in Tones Warp Mode.</Doc>
<Value>Live.Sample.Sample.tones_grain_size_has_listener()<Description>Value</Description></Value>
<Doc>tones_grain_size_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "tones_grain_size". C++ signature :  bool tones_grain_size_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.warp_markers<Description>Value</Description></Value>
<Doc>Get the warp markers for this sample.</Doc>
<Value>Live.Sample.Sample.warp_markers_has_listener()<Description>Value</Description></Value>
<Doc>warp_markers_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "warp_markers". C++ signature :  bool warp_markers_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.warp_mode<Description>Value</Description></Value>
<Doc>Access to the sample's warp mode.</Doc>
<Value>Live.Sample.Sample.warp_mode_has_listener()<Description>Value</Description></Value>
<Doc>warp_mode_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "warp_mode". C++ signature :  bool warp_mode_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Value>Live.Sample.Sample.warping<Description>Value</Description></Value>
<Doc>Access to the sample's warping property.</Doc>
<Value>Live.Sample.Sample.warping_has_listener()<Description>Value</Description></Value>
<Doc>warping_has_listener( (Sample)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "warping". C++ signature :  bool warping_has_listener(TPyHandle&lt;AMultiSamplePart&gt;,boost::python::api::object)</Doc>
<Class>Live.Sample.SlicingBeatDivision<Description>Class</Description></Class>
<Built-In>Live.Sample.SlicingBeatDivision.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Sample.SlicingBeatDivision.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Sample.SlicingBeatDivision.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.Sample.SlicingBeatDivision.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.Sample.SlicingBeatDivision.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.Sample.SlicingBeatDivision.eighth<Description>Value</Description></Value>
<Value>Live.Sample.SlicingBeatDivision.eighth_triplett<Description>Value</Description></Value>
<Value>Live.Sample.SlicingBeatDivision.four_bars<Description>Value</Description></Value>
<Value>Live.Sample.SlicingBeatDivision.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Sample.SlicingBeatDivision.half<Description>Value</Description></Value>
<Value>Live.Sample.SlicingBeatDivision.half_triplett<Description>Value</Description></Value>
<Value>Live.Sample.SlicingBeatDivision.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.Sample.SlicingBeatDivision.name<Description>Value</Description></Value>
<Value>Live.Sample.SlicingBeatDivision.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.Sample.SlicingBeatDivision.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.Sample.SlicingBeatDivision.one_bar<Description>Value</Description></Value>
<Value>Live.Sample.SlicingBeatDivision.quarter<Description>Value</Description></Value>
<Value>Live.Sample.SlicingBeatDivision.quarter_triplett<Description>Value</Description></Value>
<Value>Live.Sample.SlicingBeatDivision.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.Sample.SlicingBeatDivision.sixteenth<Description>Value</Description></Value>
<Value>Live.Sample.SlicingBeatDivision.sixteenth_triplett<Description>Value</Description></Value>
<Value>Live.Sample.SlicingBeatDivision.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.Sample.SlicingBeatDivision.two_bars<Description>Value</Description></Value>
<Value>Live.Sample.SlicingBeatDivision.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.Sample.SlicingStyle<Description>Class</Description></Class>
<Built-In>Live.Sample.SlicingStyle.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Sample.SlicingStyle.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Sample.SlicingStyle.beat<Description>Value</Description></Value>
<Value>Live.Sample.SlicingStyle.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.Sample.SlicingStyle.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.Sample.SlicingStyle.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.Sample.SlicingStyle.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Sample.SlicingStyle.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.Sample.SlicingStyle.manual<Description>Value</Description></Value>
<Value>Live.Sample.SlicingStyle.name<Description>Value</Description></Value>
<Value>Live.Sample.SlicingStyle.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.Sample.SlicingStyle.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.Sample.SlicingStyle.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.Sample.SlicingStyle.region<Description>Value</Description></Value>
<Value>Live.Sample.SlicingStyle.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.Sample.SlicingStyle.transient<Description>Value</Description></Value>
<Value>Live.Sample.SlicingStyle.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.Sample.TransientLoopMode<Description>Class</Description></Class>
<Built-In>Live.Sample.TransientLoopMode.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Sample.TransientLoopMode.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Sample.TransientLoopMode.alternate<Description>Value</Description></Value>
<Value>Live.Sample.TransientLoopMode.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.Sample.TransientLoopMode.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.Sample.TransientLoopMode.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.Sample.TransientLoopMode.forward<Description>Value</Description></Value>
<Value>Live.Sample.TransientLoopMode.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Sample.TransientLoopMode.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.Sample.TransientLoopMode.name<Description>Value</Description></Value>
<Value>Live.Sample.TransientLoopMode.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.Sample.TransientLoopMode.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.Sample.TransientLoopMode.off<Description>Value</Description></Value>
<Value>Live.Sample.TransientLoopMode.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.Sample.TransientLoopMode.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.Sample.TransientLoopMode.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Module>Live.Scene<Description>Module</Description></Module>
<Class>Live.Scene.Scene<Description>Class</Description></Class>
<Doc>This class represents an series of ClipSlots in Lives Sessionview matrix.</Doc>
<Built-In>Live.Scene.Scene.add_clip_slots_listener()<Description>Built-In</Description></Built-In>
<Doc>add_clip_slots_listener( (Scene)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "clip_slots" has changed. C++ signature :  void add_clip_slots_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.add_color_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_color_index_listener( (Scene)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "color_index" has changed. C++ signature :  void add_color_index_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.add_color_listener()<Description>Built-In</Description></Built-In>
<Doc>add_color_listener( (Scene)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "color" has changed. C++ signature :  void add_color_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.add_is_triggered_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_triggered_listener( (Scene)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_triggered" has changed. C++ signature :  void add_is_triggered_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.add_name_listener()<Description>Built-In</Description></Built-In>
<Doc>add_name_listener( (Scene)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.add_tempo_enabled_listener()<Description>Built-In</Description></Built-In>
<Doc>add_tempo_enabled_listener( (Scene)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "tempo_enabled" has changed. C++ signature :  void add_tempo_enabled_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.add_tempo_listener()<Description>Built-In</Description></Built-In>
<Doc>add_tempo_listener( (Scene)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "tempo" has changed. C++ signature :  void add_tempo_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.add_time_signature_denominator_listener()<Description>Built-In</Description></Built-In>
<Doc>add_time_signature_denominator_listener( (Scene)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "time_signature_denominator" has changed. C++ signature :  void add_time_signature_denominator_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.add_time_signature_enabled_listener()<Description>Built-In</Description></Built-In>
<Doc>add_time_signature_enabled_listener( (Scene)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "time_signature_enabled" has changed. C++ signature :  void add_time_signature_enabled_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.add_time_signature_numerator_listener()<Description>Built-In</Description></Built-In>
<Doc>add_time_signature_numerator_listener( (Scene)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "time_signature_numerator" has changed. C++ signature :  void add_time_signature_numerator_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.clip_slots_has_listener()<Description>Built-In</Description></Built-In>
<Doc>clip_slots_has_listener( (Scene)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "clip_slots". C++ signature :  bool clip_slots_has_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.color_has_listener()<Description>Built-In</Description></Built-In>
<Doc>color_has_listener( (Scene)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "color". C++ signature :  bool color_has_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.color_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>color_index_has_listener( (Scene)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "color_index". C++ signature :  bool color_index_has_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.fire()<Description>Built-In</Description></Built-In>
<Doc>fire( (Scene)arg1 [, (bool)force_legato=False [, (bool)can_select_scene_on_launch=True]]) -&gt; None : Fire the scene directly. Will fire all clipslots that this scene owns and select the scene itself. C++ signature :  void fire(TPyHandle&lt;AScene&gt; [,bool=False [,bool=True]])</Doc>
<Built-In>Live.Scene.Scene.fire_as_selected()<Description>Built-In</Description></Built-In>
<Doc>fire_as_selected( (Scene)arg1 [, (bool)force_legato=False]) -&gt; None : Fire the selected scene. Will fire all clipslots that this scene owns and select the next scene if necessary. C++ signature :  void fire_as_selected(TPyHandle&lt;AScene&gt; [,bool=False])</Doc>
<Built-In>Live.Scene.Scene.is_triggered_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_triggered_has_listener( (Scene)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_triggered". C++ signature :  bool is_triggered_has_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.name_has_listener()<Description>Built-In</Description></Built-In>
<Doc>name_has_listener( (Scene)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.remove_clip_slots_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_clip_slots_listener( (Scene)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "clip_slots". C++ signature :  void remove_clip_slots_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.remove_color_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_color_index_listener( (Scene)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "color_index". C++ signature :  void remove_color_index_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.remove_color_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_color_listener( (Scene)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "color". C++ signature :  void remove_color_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.remove_is_triggered_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_triggered_listener( (Scene)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_triggered". C++ signature :  void remove_is_triggered_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.remove_name_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_name_listener( (Scene)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.remove_tempo_enabled_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_tempo_enabled_listener( (Scene)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "tempo_enabled". C++ signature :  void remove_tempo_enabled_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.remove_tempo_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_tempo_listener( (Scene)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "tempo". C++ signature :  void remove_tempo_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.remove_time_signature_denominator_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_time_signature_denominator_listener( (Scene)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "time_signature_denominator". C++ signature :  void remove_time_signature_denominator_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.remove_time_signature_enabled_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_time_signature_enabled_listener( (Scene)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "time_signature_enabled". C++ signature :  void remove_time_signature_enabled_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.remove_time_signature_numerator_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_time_signature_numerator_listener( (Scene)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "time_signature_numerator". C++ signature :  void remove_time_signature_numerator_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.set_fire_button_state()<Description>Built-In</Description></Built-In>
<Doc>set_fire_button_state( (Scene)arg1, (bool)arg2) -&gt; None : Set the scene's fire button state directly. Supports all launch modes. C++ signature :  void set_fire_button_state(TPyHandle&lt;AScene&gt;,bool)</Doc>
<Built-In>Live.Scene.Scene.tempo_enabled_has_listener()<Description>Built-In</Description></Built-In>
<Doc>tempo_enabled_has_listener( (Scene)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "tempo_enabled". C++ signature :  bool tempo_enabled_has_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.tempo_has_listener()<Description>Built-In</Description></Built-In>
<Doc>tempo_has_listener( (Scene)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "tempo". C++ signature :  bool tempo_has_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.time_signature_denominator_has_listener()<Description>Built-In</Description></Built-In>
<Doc>time_signature_denominator_has_listener( (Scene)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "time_signature_denominator". C++ signature :  bool time_signature_denominator_has_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.time_signature_enabled_has_listener()<Description>Built-In</Description></Built-In>
<Doc>time_signature_enabled_has_listener( (Scene)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "time_signature_enabled". C++ signature :  bool time_signature_enabled_has_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Scene.Scene.time_signature_numerator_has_listener()<Description>Built-In</Description></Built-In>
<Doc>time_signature_numerator_has_listener( (Scene)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "time_signature_numerator". C++ signature :  bool time_signature_numerator_has_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Scene.Scene._live_ptr<Description>Value</Description></Value>
<Value>Live.Scene.Scene.add_clip_slots_listener()<Description>Value</Description></Value>
<Doc>add_clip_slots_listener( (Scene)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "clip_slots" has changed. C++ signature :  void add_clip_slots_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.add_color_index_listener()<Description>Value</Description></Value>
<Doc>add_color_index_listener( (Scene)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "color_index" has changed. C++ signature :  void add_color_index_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.add_color_listener()<Description>Value</Description></Value>
<Doc>add_color_listener( (Scene)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "color" has changed. C++ signature :  void add_color_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.add_is_triggered_listener()<Description>Value</Description></Value>
<Doc>add_is_triggered_listener( (Scene)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_triggered" has changed. C++ signature :  void add_is_triggered_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.add_name_listener()<Description>Value</Description></Value>
<Doc>add_name_listener( (Scene)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.add_tempo_enabled_listener()<Description>Value</Description></Value>
<Doc>add_tempo_enabled_listener( (Scene)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "tempo_enabled" has changed. C++ signature :  void add_tempo_enabled_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.add_tempo_listener()<Description>Value</Description></Value>
<Doc>add_tempo_listener( (Scene)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "tempo" has changed. C++ signature :  void add_tempo_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.add_time_signature_denominator_listener()<Description>Value</Description></Value>
<Doc>add_time_signature_denominator_listener( (Scene)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "time_signature_denominator" has changed. C++ signature :  void add_time_signature_denominator_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.add_time_signature_enabled_listener()<Description>Value</Description></Value>
<Doc>add_time_signature_enabled_listener( (Scene)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "time_signature_enabled" has changed. C++ signature :  void add_time_signature_enabled_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.add_time_signature_numerator_listener()<Description>Value</Description></Value>
<Doc>add_time_signature_numerator_listener( (Scene)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "time_signature_numerator" has changed. C++ signature :  void add_time_signature_numerator_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the scene.</Doc>
<Value>Live.Scene.Scene.clip_slots<Description>Value</Description></Value>
<Doc>return a list of clipslots (see class AClipSlot) that this scene covers.</Doc>
<Value>Live.Scene.Scene.clip_slots_has_listener()<Description>Value</Description></Value>
<Doc>clip_slots_has_listener( (Scene)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "clip_slots". C++ signature :  bool clip_slots_has_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.color<Description>Value</Description></Value>
<Doc>Get/set access to the color of the scene (RGB).</Doc>
<Value>Live.Scene.Scene.color_has_listener()<Description>Value</Description></Value>
<Doc>color_has_listener( (Scene)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "color". C++ signature :  bool color_has_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.color_index<Description>Value</Description></Value>
<Doc>Get/set access to the color index of the scene. Can be None for no color.</Doc>
<Value>Live.Scene.Scene.color_index_has_listener()<Description>Value</Description></Value>
<Doc>color_index_has_listener( (Scene)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "color_index". C++ signature :  bool color_index_has_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.fire()<Description>Value</Description></Value>
<Doc>fire( (Scene)arg1 [, (bool)force_legato=False [, (bool)can_select_scene_on_launch=True]]) -&gt; None : Fire the scene directly. Will fire all clipslots that this scene owns and select the scene itself. C++ signature :  void fire(TPyHandle&lt;AScene&gt; [,bool=False [,bool=True]])</Doc>
<Value>Live.Scene.Scene.fire_as_selected()<Description>Value</Description></Value>
<Doc>fire_as_selected( (Scene)arg1 [, (bool)force_legato=False]) -&gt; None : Fire the selected scene. Will fire all clipslots that this scene owns and select the next scene if necessary. C++ signature :  void fire_as_selected(TPyHandle&lt;AScene&gt; [,bool=False])</Doc>
<Value>Live.Scene.Scene.is_empty<Description>Value</Description></Value>
<Doc>Returns True if all clip slots of this scene are empty.</Doc>
<Value>Live.Scene.Scene.is_triggered<Description>Value</Description></Value>
<Doc>Const access to the scene's trigger state.</Doc>
<Value>Live.Scene.Scene.is_triggered_has_listener()<Description>Value</Description></Value>
<Doc>is_triggered_has_listener( (Scene)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_triggered". C++ signature :  bool is_triggered_has_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.name<Description>Value</Description></Value>
<Doc>Get/Set the name of the scene.</Doc>
<Value>Live.Scene.Scene.name_has_listener()<Description>Value</Description></Value>
<Doc>name_has_listener( (Scene)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.remove_clip_slots_listener()<Description>Value</Description></Value>
<Doc>remove_clip_slots_listener( (Scene)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "clip_slots". C++ signature :  void remove_clip_slots_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.remove_color_index_listener()<Description>Value</Description></Value>
<Doc>remove_color_index_listener( (Scene)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "color_index". C++ signature :  void remove_color_index_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.remove_color_listener()<Description>Value</Description></Value>
<Doc>remove_color_listener( (Scene)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "color". C++ signature :  void remove_color_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.remove_is_triggered_listener()<Description>Value</Description></Value>
<Doc>remove_is_triggered_listener( (Scene)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_triggered". C++ signature :  void remove_is_triggered_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.remove_name_listener()<Description>Value</Description></Value>
<Doc>remove_name_listener( (Scene)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.remove_tempo_enabled_listener()<Description>Value</Description></Value>
<Doc>remove_tempo_enabled_listener( (Scene)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "tempo_enabled". C++ signature :  void remove_tempo_enabled_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.remove_tempo_listener()<Description>Value</Description></Value>
<Doc>remove_tempo_listener( (Scene)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "tempo". C++ signature :  void remove_tempo_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.remove_time_signature_denominator_listener()<Description>Value</Description></Value>
<Doc>remove_time_signature_denominator_listener( (Scene)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "time_signature_denominator". C++ signature :  void remove_time_signature_denominator_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.remove_time_signature_enabled_listener()<Description>Value</Description></Value>
<Doc>remove_time_signature_enabled_listener( (Scene)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "time_signature_enabled". C++ signature :  void remove_time_signature_enabled_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.remove_time_signature_numerator_listener()<Description>Value</Description></Value>
<Doc>remove_time_signature_numerator_listener( (Scene)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "time_signature_numerator". C++ signature :  void remove_time_signature_numerator_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.set_fire_button_state()<Description>Value</Description></Value>
<Doc>set_fire_button_state( (Scene)arg1, (bool)arg2) -&gt; None : Set the scene's fire button state directly. Supports all launch modes. C++ signature :  void set_fire_button_state(TPyHandle&lt;AScene&gt;,bool)</Doc>
<Value>Live.Scene.Scene.tempo<Description>Value</Description></Value>
<Doc>Get/Set the tempo value of the scene.The song will use the scene's tempo as soon as the scene is fired.Returns -1 if the scene has no tempo property.</Doc>
<Value>Live.Scene.Scene.tempo_enabled<Description>Value</Description></Value>
<Doc>Get/Set the active state of the scene tempo.When disabled, the scene will use the song's tempo,and the tempo value returned will be -1Returns a bool indicating the state of the scene's tempo</Doc>
<Value>Live.Scene.Scene.tempo_enabled_has_listener()<Description>Value</Description></Value>
<Doc>tempo_enabled_has_listener( (Scene)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "tempo_enabled". C++ signature :  bool tempo_enabled_has_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.tempo_has_listener()<Description>Value</Description></Value>
<Doc>tempo_has_listener( (Scene)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "tempo". C++ signature :  bool tempo_has_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.time_signature_denominator<Description>Value</Description></Value>
<Doc>Get/Set the scene's time signature denominator.The song will use the scene's time signature as soon as the scene is fired.Returns -1 if the scene has no time signature property.</Doc>
<Value>Live.Scene.Scene.time_signature_denominator_has_listener()<Description>Value</Description></Value>
<Doc>time_signature_denominator_has_listener( (Scene)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "time_signature_denominator". C++ signature :  bool time_signature_denominator_has_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.time_signature_enabled<Description>Value</Description></Value>
<Doc>Get the active state of the scene time signature.When disabled, the scene will use the song's time signature,and the time signature values returned will be -1Returns a bool indicating the state of the scene's time signature</Doc>
<Value>Live.Scene.Scene.time_signature_enabled_has_listener()<Description>Value</Description></Value>
<Doc>time_signature_enabled_has_listener( (Scene)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "time_signature_enabled". C++ signature :  bool time_signature_enabled_has_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Value>Live.Scene.Scene.time_signature_numerator<Description>Value</Description></Value>
<Doc>Get/Set the scene's time signature numerator.The song will use the scene's time signature as soon as the scene is fired.Returns -1 if the scene has no time signature property.</Doc>
<Value>Live.Scene.Scene.time_signature_numerator_has_listener()<Description>Value</Description></Value>
<Doc>time_signature_numerator_has_listener( (Scene)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "time_signature_numerator". C++ signature :  bool time_signature_numerator_has_listener(TPyHandle&lt;AScene&gt;,boost::python::api::object)</Doc>
<Module>Live.ShifterDevice<Description>Module</Description></Module>
<Class>Live.ShifterDevice.ShifterDevice<Description>Class</Description></Class>
<Doc>This class represents a Shifter device.</Doc>
<Built-In>Live.ShifterDevice.ShifterDevice.add_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ShifterDevice.ShifterDevice.add_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ShifterDevice.ShifterDevice.add_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ShifterDevice.ShifterDevice.add_name_listener()<Description>Built-In</Description></Built-In>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ShifterDevice.ShifterDevice.add_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ShifterDevice.ShifterDevice.add_pitch_bend_range_listener()<Description>Built-In</Description></Built-In>
<Doc>add_pitch_bend_range_listener( (ShifterDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "pitch_bend_range" has changed. C++ signature :  void add_pitch_bend_range_listener(TShifterDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.ShifterDevice.ShifterDevice.add_pitch_mode_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_pitch_mode_index_listener( (ShifterDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "pitch_mode_index" has changed. C++ signature :  void add_pitch_mode_index_listener(TShifterDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.ShifterDevice.ShifterDevice.is_active_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ShifterDevice.ShifterDevice.latency_in_ms_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ShifterDevice.ShifterDevice.latency_in_samples_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ShifterDevice.ShifterDevice.name_has_listener()<Description>Built-In</Description></Built-In>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ShifterDevice.ShifterDevice.parameters_has_listener()<Description>Built-In</Description></Built-In>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ShifterDevice.ShifterDevice.pitch_bend_range_has_listener()<Description>Built-In</Description></Built-In>
<Doc>pitch_bend_range_has_listener( (ShifterDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "pitch_bend_range". C++ signature :  bool pitch_bend_range_has_listener(TShifterDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.ShifterDevice.ShifterDevice.pitch_mode_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>pitch_mode_index_has_listener( (ShifterDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "pitch_mode_index". C++ signature :  bool pitch_mode_index_has_listener(TShifterDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.ShifterDevice.ShifterDevice.remove_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ShifterDevice.ShifterDevice.remove_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ShifterDevice.ShifterDevice.remove_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ShifterDevice.ShifterDevice.remove_name_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ShifterDevice.ShifterDevice.remove_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ShifterDevice.ShifterDevice.remove_pitch_bend_range_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_pitch_bend_range_listener( (ShifterDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "pitch_bend_range". C++ signature :  void remove_pitch_bend_range_listener(TShifterDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.ShifterDevice.ShifterDevice.remove_pitch_mode_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_pitch_mode_index_listener( (ShifterDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "pitch_mode_index". C++ signature :  void remove_pitch_mode_index_listener(TShifterDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.ShifterDevice.ShifterDevice.store_chosen_bank()<Description>Built-In</Description></Built-In>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Value>Live.ShifterDevice.ShifterDevice.View<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Value>Live.ShifterDevice.ShifterDevice.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.ShifterDevice.ShifterDevice._live_ptr<Description>Value</Description></Value>
<Value>Live.ShifterDevice.ShifterDevice.add_is_active_listener()<Description>Value</Description></Value>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.ShifterDevice.ShifterDevice.add_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.ShifterDevice.ShifterDevice.add_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.ShifterDevice.ShifterDevice.add_name_listener()<Description>Value</Description></Value>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.ShifterDevice.ShifterDevice.add_parameters_listener()<Description>Value</Description></Value>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.ShifterDevice.ShifterDevice.add_pitch_bend_range_listener()<Description>Value</Description></Value>
<Doc>add_pitch_bend_range_listener( (ShifterDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "pitch_bend_range" has changed. C++ signature :  void add_pitch_bend_range_listener(TShifterDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.ShifterDevice.ShifterDevice.add_pitch_mode_index_listener()<Description>Value</Description></Value>
<Doc>add_pitch_mode_index_listener( (ShifterDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "pitch_mode_index" has changed. C++ signature :  void add_pitch_mode_index_listener(TShifterDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.ShifterDevice.ShifterDevice.can_have_chains<Description>Value</Description></Value>
<Doc>Returns true if the device is a rack.</Doc>
<Value>Live.ShifterDevice.ShifterDevice.can_have_drum_pads<Description>Value</Description></Value>
<Doc>Returns true if the device is a drum rack.</Doc>
<Value>Live.ShifterDevice.ShifterDevice.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the Device.</Doc>
<Value>Live.ShifterDevice.ShifterDevice.class_display_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class name as displayed in Live's browser and device chain</Doc>
<Value>Live.ShifterDevice.ShifterDevice.class_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class.</Doc>
<Value>Live.ShifterDevice.ShifterDevice.is_active<Description>Value</Description></Value>
<Doc>Return const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off.</Doc>
<Value>Live.ShifterDevice.ShifterDevice.is_active_has_listener()<Description>Value</Description></Value>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.ShifterDevice.ShifterDevice.latency_in_ms<Description>Value</Description></Value>
<Doc>Returns the latency of the device in ms.</Doc>
<Value>Live.ShifterDevice.ShifterDevice.latency_in_ms_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.ShifterDevice.ShifterDevice.latency_in_samples<Description>Value</Description></Value>
<Doc>Returns the latency of the device in samples.</Doc>
<Value>Live.ShifterDevice.ShifterDevice.latency_in_samples_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.ShifterDevice.ShifterDevice.name<Description>Value</Description></Value>
<Doc>Return access to the name of the device.</Doc>
<Value>Live.ShifterDevice.ShifterDevice.name_has_listener()<Description>Value</Description></Value>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.ShifterDevice.ShifterDevice.parameters<Description>Value</Description></Value>
<Doc>Const access to the list of available automatable parameters for this device.</Doc>
<Value>Live.ShifterDevice.ShifterDevice.parameters_has_listener()<Description>Value</Description></Value>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.ShifterDevice.ShifterDevice.pitch_bend_range<Description>Value</Description></Value>
<Doc>Return the pitch bend range for MIDI pitch mode</Doc>
<Value>Live.ShifterDevice.ShifterDevice.pitch_bend_range_has_listener()<Description>Value</Description></Value>
<Doc>pitch_bend_range_has_listener( (ShifterDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "pitch_bend_range". C++ signature :  bool pitch_bend_range_has_listener(TShifterDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.ShifterDevice.ShifterDevice.pitch_mode_index<Description>Value</Description></Value>
<Doc>Return the current pitch mode index</Doc>
<Value>Live.ShifterDevice.ShifterDevice.pitch_mode_index_has_listener()<Description>Value</Description></Value>
<Doc>pitch_mode_index_has_listener( (ShifterDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "pitch_mode_index". C++ signature :  bool pitch_mode_index_has_listener(TShifterDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.ShifterDevice.ShifterDevice.pitch_mode_list<Description>Value</Description></Value>
<Doc>Return the current pitch mode list</Doc>
<Value>Live.ShifterDevice.ShifterDevice.remove_is_active_listener()<Description>Value</Description></Value>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.ShifterDevice.ShifterDevice.remove_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.ShifterDevice.ShifterDevice.remove_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.ShifterDevice.ShifterDevice.remove_name_listener()<Description>Value</Description></Value>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.ShifterDevice.ShifterDevice.remove_parameters_listener()<Description>Value</Description></Value>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.ShifterDevice.ShifterDevice.remove_pitch_bend_range_listener()<Description>Value</Description></Value>
<Doc>remove_pitch_bend_range_listener( (ShifterDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "pitch_bend_range". C++ signature :  void remove_pitch_bend_range_listener(TShifterDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.ShifterDevice.ShifterDevice.remove_pitch_mode_index_listener()<Description>Value</Description></Value>
<Doc>remove_pitch_mode_index_listener( (ShifterDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "pitch_mode_index". C++ signature :  void remove_pitch_mode_index_listener(TShifterDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.ShifterDevice.ShifterDevice.store_chosen_bank()<Description>Value</Description></Value>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Value>Live.ShifterDevice.ShifterDevice.type<Description>Value</Description></Value>
<Doc>Return the type of the device.</Doc>
<Value>Live.ShifterDevice.ShifterDevice.view<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Class>Live.ShifterDevice.ShifterDevice.View<Description>Class</Description></Class>
<Doc>Representing the view aspects of a device.</Doc>
<Built-In>Live.ShifterDevice.ShifterDevice.View.add_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ShifterDevice.ShifterDevice.View.is_collapsed_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.ShifterDevice.ShifterDevice.View.remove_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.ShifterDevice.ShifterDevice.View.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.ShifterDevice.ShifterDevice.View._live_ptr<Description>Value</Description></Value>
<Value>Live.ShifterDevice.ShifterDevice.View.add_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.ShifterDevice.ShifterDevice.View.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the View.</Doc>
<Value>Live.ShifterDevice.ShifterDevice.View.is_collapsed<Description>Value</Description></Value>
<Doc>Get/Set/Listen if the device is shown collapsed in the device chain.</Doc>
<Value>Live.ShifterDevice.ShifterDevice.View.is_collapsed_has_listener()<Description>Value</Description></Value>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.ShifterDevice.ShifterDevice.View.remove_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Module>Live.SimplerDevice<Description>Module</Description></Module>
<Built-In>Live.SimplerDevice.get_available_voice_numbers()<Description>Built-In</Description></Built-In>
<Doc>get_available_voice_numbers() -&gt; IntVector : Get a vector of valid Simpler voice numbers. C++ signature :  std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; get_available_voice_numbers()</Doc>
<Class>Live.SimplerDevice.PlaybackMode<Description>Class</Description></Class>
<Built-In>Live.SimplerDevice.PlaybackMode.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.SimplerDevice.PlaybackMode.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.SimplerDevice.PlaybackMode.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.SimplerDevice.PlaybackMode.classic<Description>Value</Description></Value>
<Value>Live.SimplerDevice.PlaybackMode.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.SimplerDevice.PlaybackMode.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.SimplerDevice.PlaybackMode.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.SimplerDevice.PlaybackMode.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.SimplerDevice.PlaybackMode.name<Description>Value</Description></Value>
<Value>Live.SimplerDevice.PlaybackMode.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.SimplerDevice.PlaybackMode.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.SimplerDevice.PlaybackMode.one_shot<Description>Value</Description></Value>
<Value>Live.SimplerDevice.PlaybackMode.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.SimplerDevice.PlaybackMode.slicing<Description>Value</Description></Value>
<Value>Live.SimplerDevice.PlaybackMode.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.SimplerDevice.PlaybackMode.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.SimplerDevice.SimplerDevice<Description>Class</Description></Class>
<Doc>This class represents a Simpler device.</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.add_can_warp_as_listener()<Description>Built-In</Description></Built-In>
<Doc>add_can_warp_as_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "can_warp_as" has changed. C++ signature :  void add_can_warp_as_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.add_can_warp_double_listener()<Description>Built-In</Description></Built-In>
<Doc>add_can_warp_double_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "can_warp_double" has changed. C++ signature :  void add_can_warp_double_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.add_can_warp_half_listener()<Description>Built-In</Description></Built-In>
<Doc>add_can_warp_half_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "can_warp_half" has changed. C++ signature :  void add_can_warp_half_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.add_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.add_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.add_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.add_multi_sample_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>add_multi_sample_mode_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "multi_sample_mode" has changed. C++ signature :  void add_multi_sample_mode_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.add_name_listener()<Description>Built-In</Description></Built-In>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.add_note_pitch_bend_range_listener()<Description>Built-In</Description></Built-In>
<Doc>add_note_pitch_bend_range_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "note_pitch_bend_range" has changed. C++ signature :  void add_note_pitch_bend_range_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.add_pad_slicing_listener()<Description>Built-In</Description></Built-In>
<Doc>add_pad_slicing_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "pad_slicing" has changed. C++ signature :  void add_pad_slicing_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.add_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.add_pitch_bend_range_listener()<Description>Built-In</Description></Built-In>
<Doc>add_pitch_bend_range_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "pitch_bend_range" has changed. C++ signature :  void add_pitch_bend_range_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.add_playback_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>add_playback_mode_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "playback_mode" has changed. C++ signature :  void add_playback_mode_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.add_playing_position_enabled_listener()<Description>Built-In</Description></Built-In>
<Doc>add_playing_position_enabled_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "playing_position_enabled" has changed. C++ signature :  void add_playing_position_enabled_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.add_playing_position_listener()<Description>Built-In</Description></Built-In>
<Doc>add_playing_position_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "playing_position" has changed. C++ signature :  void add_playing_position_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.add_retrigger_listener()<Description>Built-In</Description></Built-In>
<Doc>add_retrigger_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "retrigger" has changed. C++ signature :  void add_retrigger_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.add_sample_listener()<Description>Built-In</Description></Built-In>
<Doc>add_sample_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "sample" has changed. C++ signature :  void add_sample_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.add_slicing_playback_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>add_slicing_playback_mode_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "slicing_playback_mode" has changed. C++ signature :  void add_slicing_playback_mode_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.add_voices_listener()<Description>Built-In</Description></Built-In>
<Doc>add_voices_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "voices" has changed. C++ signature :  void add_voices_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.can_warp_as_has_listener()<Description>Built-In</Description></Built-In>
<Doc>can_warp_as_has_listener( (SimplerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "can_warp_as". C++ signature :  bool can_warp_as_has_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.can_warp_double_has_listener()<Description>Built-In</Description></Built-In>
<Doc>can_warp_double_has_listener( (SimplerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "can_warp_double". C++ signature :  bool can_warp_double_has_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.can_warp_half_has_listener()<Description>Built-In</Description></Built-In>
<Doc>can_warp_half_has_listener( (SimplerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "can_warp_half". C++ signature :  bool can_warp_half_has_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.crop()<Description>Built-In</Description></Built-In>
<Doc>crop( (SimplerDevice)self) -&gt; None : Crop the loaded sample to the active area between start- and end marker. Calling this method on an empty simpler raises an error. C++ signature :  void crop(TSimplerDevicePyHandle)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.guess_playback_length()<Description>Built-In</Description></Built-In>
<Doc>guess_playback_length( (SimplerDevice)self) -&gt; float : Return an estimated beat time for the playback length between start- and end-marker. Calling this method on an empty simpler raises an error. C++ signature :  double guess_playback_length(TSimplerDevicePyHandle)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.is_active_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.latency_in_ms_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.latency_in_samples_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.multi_sample_mode_has_listener()<Description>Built-In</Description></Built-In>
<Doc>multi_sample_mode_has_listener( (SimplerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "multi_sample_mode". C++ signature :  bool multi_sample_mode_has_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.name_has_listener()<Description>Built-In</Description></Built-In>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.note_pitch_bend_range_has_listener()<Description>Built-In</Description></Built-In>
<Doc>note_pitch_bend_range_has_listener( (SimplerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "note_pitch_bend_range". C++ signature :  bool note_pitch_bend_range_has_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.pad_slicing_has_listener()<Description>Built-In</Description></Built-In>
<Doc>pad_slicing_has_listener( (SimplerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "pad_slicing". C++ signature :  bool pad_slicing_has_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.parameters_has_listener()<Description>Built-In</Description></Built-In>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.pitch_bend_range_has_listener()<Description>Built-In</Description></Built-In>
<Doc>pitch_bend_range_has_listener( (SimplerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "pitch_bend_range". C++ signature :  bool pitch_bend_range_has_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.playback_mode_has_listener()<Description>Built-In</Description></Built-In>
<Doc>playback_mode_has_listener( (SimplerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "playback_mode". C++ signature :  bool playback_mode_has_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.playing_position_enabled_has_listener()<Description>Built-In</Description></Built-In>
<Doc>playing_position_enabled_has_listener( (SimplerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "playing_position_enabled". C++ signature :  bool playing_position_enabled_has_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.playing_position_has_listener()<Description>Built-In</Description></Built-In>
<Doc>playing_position_has_listener( (SimplerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "playing_position". C++ signature :  bool playing_position_has_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.remove_can_warp_as_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_can_warp_as_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "can_warp_as". C++ signature :  void remove_can_warp_as_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.remove_can_warp_double_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_can_warp_double_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "can_warp_double". C++ signature :  void remove_can_warp_double_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.remove_can_warp_half_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_can_warp_half_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "can_warp_half". C++ signature :  void remove_can_warp_half_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.remove_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.remove_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.remove_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.remove_multi_sample_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_multi_sample_mode_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "multi_sample_mode". C++ signature :  void remove_multi_sample_mode_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.remove_name_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.remove_note_pitch_bend_range_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_note_pitch_bend_range_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "note_pitch_bend_range". C++ signature :  void remove_note_pitch_bend_range_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.remove_pad_slicing_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_pad_slicing_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "pad_slicing". C++ signature :  void remove_pad_slicing_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.remove_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.remove_pitch_bend_range_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_pitch_bend_range_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "pitch_bend_range". C++ signature :  void remove_pitch_bend_range_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.remove_playback_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_playback_mode_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "playback_mode". C++ signature :  void remove_playback_mode_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.remove_playing_position_enabled_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_playing_position_enabled_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "playing_position_enabled". C++ signature :  void remove_playing_position_enabled_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.remove_playing_position_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_playing_position_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "playing_position". C++ signature :  void remove_playing_position_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.remove_retrigger_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_retrigger_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "retrigger". C++ signature :  void remove_retrigger_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.remove_sample_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_sample_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "sample". C++ signature :  void remove_sample_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.remove_slicing_playback_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_slicing_playback_mode_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "slicing_playback_mode". C++ signature :  void remove_slicing_playback_mode_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.remove_voices_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_voices_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "voices". C++ signature :  void remove_voices_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.retrigger_has_listener()<Description>Built-In</Description></Built-In>
<Doc>retrigger_has_listener( (SimplerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "retrigger". C++ signature :  bool retrigger_has_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.reverse()<Description>Built-In</Description></Built-In>
<Doc>reverse( (SimplerDevice)self) -&gt; None : Reverse the loaded sample. Calling this method on an empty simpler raises an error. C++ signature :  void reverse(TSimplerDevicePyHandle)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.sample_has_listener()<Description>Built-In</Description></Built-In>
<Doc>sample_has_listener( (SimplerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "sample". C++ signature :  bool sample_has_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.slicing_playback_mode_has_listener()<Description>Built-In</Description></Built-In>
<Doc>slicing_playback_mode_has_listener( (SimplerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "slicing_playback_mode". C++ signature :  bool slicing_playback_mode_has_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.store_chosen_bank()<Description>Built-In</Description></Built-In>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.voices_has_listener()<Description>Built-In</Description></Built-In>
<Doc>voices_has_listener( (SimplerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "voices". C++ signature :  bool voices_has_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.warp_as()<Description>Built-In</Description></Built-In>
<Doc>warp_as( (SimplerDevice)self, (float)beat_time) -&gt; None : Warp the playback region between start- and end-marker as the given length. Calling this method on an empty simpler raises an error. C++ signature :  void warp_as(TSimplerDevicePyHandle,double)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.warp_double()<Description>Built-In</Description></Built-In>
<Doc>warp_double( (SimplerDevice)self) -&gt; None : Doubles the tempo for region between start- and end-marker. C++ signature :  void warp_double(TSimplerDevicePyHandle)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.warp_half()<Description>Built-In</Description></Built-In>
<Doc>warp_half( (SimplerDevice)self) -&gt; None : Halves the tempo for region between start- and end-marker. C++ signature :  void warp_half(TSimplerDevicePyHandle)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View<Description>Value</Description></Value>
<Doc>Representing the view aspects of a simpler device.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.SimplerDevice.SimplerDevice._live_ptr<Description>Value</Description></Value>
<Value>Live.SimplerDevice.SimplerDevice.add_can_warp_as_listener()<Description>Value</Description></Value>
<Doc>add_can_warp_as_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "can_warp_as" has changed. C++ signature :  void add_can_warp_as_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.add_can_warp_double_listener()<Description>Value</Description></Value>
<Doc>add_can_warp_double_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "can_warp_double" has changed. C++ signature :  void add_can_warp_double_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.add_can_warp_half_listener()<Description>Value</Description></Value>
<Doc>add_can_warp_half_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "can_warp_half" has changed. C++ signature :  void add_can_warp_half_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.add_is_active_listener()<Description>Value</Description></Value>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.add_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.add_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.add_multi_sample_mode_listener()<Description>Value</Description></Value>
<Doc>add_multi_sample_mode_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "multi_sample_mode" has changed. C++ signature :  void add_multi_sample_mode_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.add_name_listener()<Description>Value</Description></Value>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.add_note_pitch_bend_range_listener()<Description>Value</Description></Value>
<Doc>add_note_pitch_bend_range_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "note_pitch_bend_range" has changed. C++ signature :  void add_note_pitch_bend_range_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.add_pad_slicing_listener()<Description>Value</Description></Value>
<Doc>add_pad_slicing_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "pad_slicing" has changed. C++ signature :  void add_pad_slicing_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.add_parameters_listener()<Description>Value</Description></Value>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.add_pitch_bend_range_listener()<Description>Value</Description></Value>
<Doc>add_pitch_bend_range_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "pitch_bend_range" has changed. C++ signature :  void add_pitch_bend_range_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.add_playback_mode_listener()<Description>Value</Description></Value>
<Doc>add_playback_mode_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "playback_mode" has changed. C++ signature :  void add_playback_mode_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.add_playing_position_enabled_listener()<Description>Value</Description></Value>
<Doc>add_playing_position_enabled_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "playing_position_enabled" has changed. C++ signature :  void add_playing_position_enabled_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.add_playing_position_listener()<Description>Value</Description></Value>
<Doc>add_playing_position_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "playing_position" has changed. C++ signature :  void add_playing_position_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.add_retrigger_listener()<Description>Value</Description></Value>
<Doc>add_retrigger_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "retrigger" has changed. C++ signature :  void add_retrigger_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.add_sample_listener()<Description>Value</Description></Value>
<Doc>add_sample_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "sample" has changed. C++ signature :  void add_sample_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.add_slicing_playback_mode_listener()<Description>Value</Description></Value>
<Doc>add_slicing_playback_mode_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "slicing_playback_mode" has changed. C++ signature :  void add_slicing_playback_mode_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.add_voices_listener()<Description>Value</Description></Value>
<Doc>add_voices_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "voices" has changed. C++ signature :  void add_voices_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.can_have_chains<Description>Value</Description></Value>
<Doc>Returns true if the device is a rack.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.can_have_drum_pads<Description>Value</Description></Value>
<Doc>Returns true if the device is a drum rack.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.can_warp_as<Description>Value</Description></Value>
<Doc>Returns true if warp_as is available.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.can_warp_as_has_listener()<Description>Value</Description></Value>
<Doc>can_warp_as_has_listener( (SimplerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "can_warp_as". C++ signature :  bool can_warp_as_has_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.can_warp_double<Description>Value</Description></Value>
<Doc>Returns true if warp_double is available.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.can_warp_double_has_listener()<Description>Value</Description></Value>
<Doc>can_warp_double_has_listener( (SimplerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "can_warp_double". C++ signature :  bool can_warp_double_has_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.can_warp_half<Description>Value</Description></Value>
<Doc>Returns true if warp_half is available.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.can_warp_half_has_listener()<Description>Value</Description></Value>
<Doc>can_warp_half_has_listener( (SimplerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "can_warp_half". C++ signature :  bool can_warp_half_has_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the Device.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.class_display_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class name as displayed in Live's browser and device chain</Doc>
<Value>Live.SimplerDevice.SimplerDevice.class_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.crop()<Description>Value</Description></Value>
<Doc>crop( (SimplerDevice)self) -&gt; None : Crop the loaded sample to the active area between start- and end marker. Calling this method on an empty simpler raises an error. C++ signature :  void crop(TSimplerDevicePyHandle)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.guess_playback_length()<Description>Value</Description></Value>
<Doc>guess_playback_length( (SimplerDevice)self) -&gt; float : Return an estimated beat time for the playback length between start- and end-marker. Calling this method on an empty simpler raises an error. C++ signature :  double guess_playback_length(TSimplerDevicePyHandle)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.is_active<Description>Value</Description></Value>
<Doc>Return const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.is_active_has_listener()<Description>Value</Description></Value>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.latency_in_ms<Description>Value</Description></Value>
<Doc>Returns the latency of the device in ms.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.latency_in_ms_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.latency_in_samples<Description>Value</Description></Value>
<Doc>Returns the latency of the device in samples.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.latency_in_samples_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.multi_sample_mode<Description>Value</Description></Value>
<Doc>Returns whether Simpler is in mulit-sample mode.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.multi_sample_mode_has_listener()<Description>Value</Description></Value>
<Doc>multi_sample_mode_has_listener( (SimplerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "multi_sample_mode". C++ signature :  bool multi_sample_mode_has_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.name<Description>Value</Description></Value>
<Doc>Return access to the name of the device.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.name_has_listener()<Description>Value</Description></Value>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.note_pitch_bend_range<Description>Value</Description></Value>
<Doc>Access to the Note Pitch Bend Range in Simpler.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.note_pitch_bend_range_has_listener()<Description>Value</Description></Value>
<Doc>note_pitch_bend_range_has_listener( (SimplerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "note_pitch_bend_range". C++ signature :  bool note_pitch_bend_range_has_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.pad_slicing<Description>Value</Description></Value>
<Doc>When set to true, slices can be added in slicing mode by playing notes .that are not assigned to slices, yet.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.pad_slicing_has_listener()<Description>Value</Description></Value>
<Doc>pad_slicing_has_listener( (SimplerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "pad_slicing". C++ signature :  bool pad_slicing_has_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.parameters<Description>Value</Description></Value>
<Doc>Const access to the list of available automatable parameters for this device.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.parameters_has_listener()<Description>Value</Description></Value>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.pitch_bend_range<Description>Value</Description></Value>
<Doc>Access to the Pitch Bend Range in Simpler.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.pitch_bend_range_has_listener()<Description>Value</Description></Value>
<Doc>pitch_bend_range_has_listener( (SimplerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "pitch_bend_range". C++ signature :  bool pitch_bend_range_has_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.playback_mode<Description>Value</Description></Value>
<Doc>Access to Simpler's playback mode.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.playback_mode_has_listener()<Description>Value</Description></Value>
<Doc>playback_mode_has_listener( (SimplerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "playback_mode". C++ signature :  bool playback_mode_has_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.playing_position<Description>Value</Description></Value>
<Doc>Constant access to the current playing position in the sample.The returned value is the normalized position between sample start and end.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.playing_position_enabled<Description>Value</Description></Value>
<Doc>Returns whether Simpler is showing the playing position.The returned value is True while the sample is played back</Doc>
<Value>Live.SimplerDevice.SimplerDevice.playing_position_enabled_has_listener()<Description>Value</Description></Value>
<Doc>playing_position_enabled_has_listener( (SimplerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "playing_position_enabled". C++ signature :  bool playing_position_enabled_has_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.playing_position_has_listener()<Description>Value</Description></Value>
<Doc>playing_position_has_listener( (SimplerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "playing_position". C++ signature :  bool playing_position_has_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.remove_can_warp_as_listener()<Description>Value</Description></Value>
<Doc>remove_can_warp_as_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "can_warp_as". C++ signature :  void remove_can_warp_as_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.remove_can_warp_double_listener()<Description>Value</Description></Value>
<Doc>remove_can_warp_double_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "can_warp_double". C++ signature :  void remove_can_warp_double_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.remove_can_warp_half_listener()<Description>Value</Description></Value>
<Doc>remove_can_warp_half_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "can_warp_half". C++ signature :  void remove_can_warp_half_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.remove_is_active_listener()<Description>Value</Description></Value>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.remove_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.remove_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.remove_multi_sample_mode_listener()<Description>Value</Description></Value>
<Doc>remove_multi_sample_mode_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "multi_sample_mode". C++ signature :  void remove_multi_sample_mode_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.remove_name_listener()<Description>Value</Description></Value>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.remove_note_pitch_bend_range_listener()<Description>Value</Description></Value>
<Doc>remove_note_pitch_bend_range_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "note_pitch_bend_range". C++ signature :  void remove_note_pitch_bend_range_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.remove_pad_slicing_listener()<Description>Value</Description></Value>
<Doc>remove_pad_slicing_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "pad_slicing". C++ signature :  void remove_pad_slicing_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.remove_parameters_listener()<Description>Value</Description></Value>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.remove_pitch_bend_range_listener()<Description>Value</Description></Value>
<Doc>remove_pitch_bend_range_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "pitch_bend_range". C++ signature :  void remove_pitch_bend_range_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.remove_playback_mode_listener()<Description>Value</Description></Value>
<Doc>remove_playback_mode_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "playback_mode". C++ signature :  void remove_playback_mode_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.remove_playing_position_enabled_listener()<Description>Value</Description></Value>
<Doc>remove_playing_position_enabled_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "playing_position_enabled". C++ signature :  void remove_playing_position_enabled_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.remove_playing_position_listener()<Description>Value</Description></Value>
<Doc>remove_playing_position_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "playing_position". C++ signature :  void remove_playing_position_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.remove_retrigger_listener()<Description>Value</Description></Value>
<Doc>remove_retrigger_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "retrigger". C++ signature :  void remove_retrigger_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.remove_sample_listener()<Description>Value</Description></Value>
<Doc>remove_sample_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "sample". C++ signature :  void remove_sample_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.remove_slicing_playback_mode_listener()<Description>Value</Description></Value>
<Doc>remove_slicing_playback_mode_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "slicing_playback_mode". C++ signature :  void remove_slicing_playback_mode_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.remove_voices_listener()<Description>Value</Description></Value>
<Doc>remove_voices_listener( (SimplerDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "voices". C++ signature :  void remove_voices_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.retrigger<Description>Value</Description></Value>
<Doc>Access to Simpler's retrigger mode.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.retrigger_has_listener()<Description>Value</Description></Value>
<Doc>retrigger_has_listener( (SimplerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "retrigger". C++ signature :  bool retrigger_has_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.reverse()<Description>Value</Description></Value>
<Doc>reverse( (SimplerDevice)self) -&gt; None : Reverse the loaded sample. Calling this method on an empty simpler raises an error. C++ signature :  void reverse(TSimplerDevicePyHandle)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.sample<Description>Value</Description></Value>
<Doc>Get the loaded Sample.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.sample_has_listener()<Description>Value</Description></Value>
<Doc>sample_has_listener( (SimplerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "sample". C++ signature :  bool sample_has_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.slicing_playback_mode<Description>Value</Description></Value>
<Doc>Access to Simpler's slicing playback mode.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.slicing_playback_mode_has_listener()<Description>Value</Description></Value>
<Doc>slicing_playback_mode_has_listener( (SimplerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "slicing_playback_mode". C++ signature :  bool slicing_playback_mode_has_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.store_chosen_bank()<Description>Value</Description></Value>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.type<Description>Value</Description></Value>
<Doc>Return the type of the device.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.view<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.voices<Description>Value</Description></Value>
<Doc>Access to the number of voices in Simpler.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.voices_has_listener()<Description>Value</Description></Value>
<Doc>voices_has_listener( (SimplerDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "voices". C++ signature :  bool voices_has_listener(TSimplerDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.warp_as()<Description>Value</Description></Value>
<Doc>warp_as( (SimplerDevice)self, (float)beat_time) -&gt; None : Warp the playback region between start- and end-marker as the given length. Calling this method on an empty simpler raises an error. C++ signature :  void warp_as(TSimplerDevicePyHandle,double)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.warp_double()<Description>Value</Description></Value>
<Doc>warp_double( (SimplerDevice)self) -&gt; None : Doubles the tempo for region between start- and end-marker. C++ signature :  void warp_double(TSimplerDevicePyHandle)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.warp_half()<Description>Value</Description></Value>
<Doc>warp_half( (SimplerDevice)self) -&gt; None : Halves the tempo for region between start- and end-marker. C++ signature :  void warp_half(TSimplerDevicePyHandle)</Doc>
<Class>Live.SimplerDevice.SimplerDevice.View<Description>Class</Description></Class>
<Doc>Representing the view aspects of a simpler device.</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.View.add_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.View.add_sample_end_listener()<Description>Built-In</Description></Built-In>
<Doc>add_sample_end_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "sample_end" has changed. C++ signature :  void add_sample_end_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.View.add_sample_env_fade_in_listener()<Description>Built-In</Description></Built-In>
<Doc>add_sample_env_fade_in_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "sample_env_fade_in" has changed. C++ signature :  void add_sample_env_fade_in_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.View.add_sample_env_fade_out_listener()<Description>Built-In</Description></Built-In>
<Doc>add_sample_env_fade_out_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "sample_env_fade_out" has changed. C++ signature :  void add_sample_env_fade_out_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.View.add_sample_loop_end_listener()<Description>Built-In</Description></Built-In>
<Doc>add_sample_loop_end_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "sample_loop_end" has changed. C++ signature :  void add_sample_loop_end_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.View.add_sample_loop_fade_listener()<Description>Built-In</Description></Built-In>
<Doc>add_sample_loop_fade_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "sample_loop_fade" has changed. C++ signature :  void add_sample_loop_fade_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.View.add_sample_loop_start_listener()<Description>Built-In</Description></Built-In>
<Doc>add_sample_loop_start_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "sample_loop_start" has changed. C++ signature :  void add_sample_loop_start_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.View.add_sample_start_listener()<Description>Built-In</Description></Built-In>
<Doc>add_sample_start_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "sample_start" has changed. C++ signature :  void add_sample_start_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.View.add_selected_slice_listener()<Description>Built-In</Description></Built-In>
<Doc>add_selected_slice_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "selected_slice" has changed. C++ signature :  void add_selected_slice_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.View.is_collapsed_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.View.remove_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.View.remove_sample_end_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_sample_end_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "sample_end". C++ signature :  void remove_sample_end_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.View.remove_sample_env_fade_in_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_sample_env_fade_in_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "sample_env_fade_in". C++ signature :  void remove_sample_env_fade_in_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.View.remove_sample_env_fade_out_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_sample_env_fade_out_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "sample_env_fade_out". C++ signature :  void remove_sample_env_fade_out_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.View.remove_sample_loop_end_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_sample_loop_end_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "sample_loop_end". C++ signature :  void remove_sample_loop_end_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.View.remove_sample_loop_fade_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_sample_loop_fade_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "sample_loop_fade". C++ signature :  void remove_sample_loop_fade_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.View.remove_sample_loop_start_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_sample_loop_start_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "sample_loop_start". C++ signature :  void remove_sample_loop_start_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.View.remove_sample_start_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_sample_start_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "sample_start". C++ signature :  void remove_sample_start_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.View.remove_selected_slice_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_selected_slice_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "selected_slice". C++ signature :  void remove_selected_slice_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.View.sample_end_has_listener()<Description>Built-In</Description></Built-In>
<Doc>sample_end_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "sample_end". C++ signature :  bool sample_end_has_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.View.sample_env_fade_in_has_listener()<Description>Built-In</Description></Built-In>
<Doc>sample_env_fade_in_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "sample_env_fade_in". C++ signature :  bool sample_env_fade_in_has_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.View.sample_env_fade_out_has_listener()<Description>Built-In</Description></Built-In>
<Doc>sample_env_fade_out_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "sample_env_fade_out". C++ signature :  bool sample_env_fade_out_has_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.View.sample_loop_end_has_listener()<Description>Built-In</Description></Built-In>
<Doc>sample_loop_end_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "sample_loop_end". C++ signature :  bool sample_loop_end_has_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.View.sample_loop_fade_has_listener()<Description>Built-In</Description></Built-In>
<Doc>sample_loop_fade_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "sample_loop_fade". C++ signature :  bool sample_loop_fade_has_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.View.sample_loop_start_has_listener()<Description>Built-In</Description></Built-In>
<Doc>sample_loop_start_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "sample_loop_start". C++ signature :  bool sample_loop_start_has_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.View.sample_start_has_listener()<Description>Built-In</Description></Built-In>
<Doc>sample_start_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "sample_start". C++ signature :  bool sample_start_has_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Built-In>Live.SimplerDevice.SimplerDevice.View.selected_slice_has_listener()<Description>Built-In</Description></Built-In>
<Doc>selected_slice_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "selected_slice". C++ signature :  bool selected_slice_has_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View._live_ptr<Description>Value</Description></Value>
<Value>Live.SimplerDevice.SimplerDevice.View.add_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.add_sample_end_listener()<Description>Value</Description></Value>
<Doc>add_sample_end_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "sample_end" has changed. C++ signature :  void add_sample_end_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.add_sample_env_fade_in_listener()<Description>Value</Description></Value>
<Doc>add_sample_env_fade_in_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "sample_env_fade_in" has changed. C++ signature :  void add_sample_env_fade_in_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.add_sample_env_fade_out_listener()<Description>Value</Description></Value>
<Doc>add_sample_env_fade_out_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "sample_env_fade_out" has changed. C++ signature :  void add_sample_env_fade_out_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.add_sample_loop_end_listener()<Description>Value</Description></Value>
<Doc>add_sample_loop_end_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "sample_loop_end" has changed. C++ signature :  void add_sample_loop_end_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.add_sample_loop_fade_listener()<Description>Value</Description></Value>
<Doc>add_sample_loop_fade_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "sample_loop_fade" has changed. C++ signature :  void add_sample_loop_fade_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.add_sample_loop_start_listener()<Description>Value</Description></Value>
<Doc>add_sample_loop_start_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "sample_loop_start" has changed. C++ signature :  void add_sample_loop_start_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.add_sample_start_listener()<Description>Value</Description></Value>
<Doc>add_sample_start_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "sample_start" has changed. C++ signature :  void add_sample_start_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.add_selected_slice_listener()<Description>Value</Description></Value>
<Doc>add_selected_slice_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "selected_slice" has changed. C++ signature :  void add_selected_slice_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the View.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.is_collapsed<Description>Value</Description></Value>
<Doc>Get/Set/Listen if the device is shown collapsed in the device chain.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.is_collapsed_has_listener()<Description>Value</Description></Value>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.remove_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.remove_sample_end_listener()<Description>Value</Description></Value>
<Doc>remove_sample_end_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "sample_end". C++ signature :  void remove_sample_end_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.remove_sample_env_fade_in_listener()<Description>Value</Description></Value>
<Doc>remove_sample_env_fade_in_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "sample_env_fade_in". C++ signature :  void remove_sample_env_fade_in_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.remove_sample_env_fade_out_listener()<Description>Value</Description></Value>
<Doc>remove_sample_env_fade_out_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "sample_env_fade_out". C++ signature :  void remove_sample_env_fade_out_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.remove_sample_loop_end_listener()<Description>Value</Description></Value>
<Doc>remove_sample_loop_end_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "sample_loop_end". C++ signature :  void remove_sample_loop_end_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.remove_sample_loop_fade_listener()<Description>Value</Description></Value>
<Doc>remove_sample_loop_fade_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "sample_loop_fade". C++ signature :  void remove_sample_loop_fade_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.remove_sample_loop_start_listener()<Description>Value</Description></Value>
<Doc>remove_sample_loop_start_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "sample_loop_start". C++ signature :  void remove_sample_loop_start_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.remove_sample_start_listener()<Description>Value</Description></Value>
<Doc>remove_sample_start_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "sample_start". C++ signature :  void remove_sample_start_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.remove_selected_slice_listener()<Description>Value</Description></Value>
<Doc>remove_selected_slice_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "selected_slice". C++ signature :  void remove_selected_slice_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.sample_end<Description>Value</Description></Value>
<Doc>Access to the modulated samples end position in samples. Returns -1 in case there is no sample loaded.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.sample_end_has_listener()<Description>Value</Description></Value>
<Doc>sample_end_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "sample_end". C++ signature :  bool sample_end_has_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.sample_env_fade_in<Description>Value</Description></Value>
<Doc>Access to the envelope fade-in time in samples. Returned value is only in use when Simpler is in one-shot mode. Returns -1 in case there is no sample loaded.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.sample_env_fade_in_has_listener()<Description>Value</Description></Value>
<Doc>sample_env_fade_in_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "sample_env_fade_in". C++ signature :  bool sample_env_fade_in_has_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.sample_env_fade_out<Description>Value</Description></Value>
<Doc>Access to the envelope fade-out time in samples. Returned value is only in use when Simpler is in one-shot mode. Returns -1 in case there is no sample loaded.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.sample_env_fade_out_has_listener()<Description>Value</Description></Value>
<Doc>sample_env_fade_out_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "sample_env_fade_out". C++ signature :  bool sample_env_fade_out_has_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.sample_loop_end<Description>Value</Description></Value>
<Doc>Access to the modulated samples loop end position in samples. Returns -1 in case there is no sample loaded.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.sample_loop_end_has_listener()<Description>Value</Description></Value>
<Doc>sample_loop_end_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "sample_loop_end". C++ signature :  bool sample_loop_end_has_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.sample_loop_fade<Description>Value</Description></Value>
<Doc>Access to the modulated samples loop fade position in samples. Returns -1 in case there is no sample loaded.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.sample_loop_fade_has_listener()<Description>Value</Description></Value>
<Doc>sample_loop_fade_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "sample_loop_fade". C++ signature :  bool sample_loop_fade_has_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.sample_loop_start<Description>Value</Description></Value>
<Doc>Access to the modulated samples loop start position in samples. Returns -1 in case there is no sample loaded.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.sample_loop_start_has_listener()<Description>Value</Description></Value>
<Doc>sample_loop_start_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "sample_loop_start". C++ signature :  bool sample_loop_start_has_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.sample_start<Description>Value</Description></Value>
<Doc>Access to the modulated samples start position in samples. Returns -1 in case there is no sample loaded.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.sample_start_has_listener()<Description>Value</Description></Value>
<Doc>sample_start_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "sample_start". C++ signature :  bool sample_start_has_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.selected_slice<Description>Value</Description></Value>
<Doc>Access to the selected slice.</Doc>
<Value>Live.SimplerDevice.SimplerDevice.View.selected_slice_has_listener()<Description>Value</Description></Value>
<Doc>selected_slice_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "selected_slice". C++ signature :  bool selected_slice_has_listener(TSimplerDevicePyViewData,boost::python::api::object)</Doc>
<Class>Live.SimplerDevice.SlicingPlaybackMode<Description>Class</Description></Class>
<Built-In>Live.SimplerDevice.SlicingPlaybackMode.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.SimplerDevice.SlicingPlaybackMode.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.SimplerDevice.SlicingPlaybackMode.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.SimplerDevice.SlicingPlaybackMode.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.SimplerDevice.SlicingPlaybackMode.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.SimplerDevice.SlicingPlaybackMode.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.SimplerDevice.SlicingPlaybackMode.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.SimplerDevice.SlicingPlaybackMode.mono<Description>Value</Description></Value>
<Value>Live.SimplerDevice.SlicingPlaybackMode.name<Description>Value</Description></Value>
<Value>Live.SimplerDevice.SlicingPlaybackMode.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.SimplerDevice.SlicingPlaybackMode.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.SimplerDevice.SlicingPlaybackMode.poly<Description>Value</Description></Value>
<Value>Live.SimplerDevice.SlicingPlaybackMode.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.SimplerDevice.SlicingPlaybackMode.thru<Description>Value</Description></Value>
<Value>Live.SimplerDevice.SlicingPlaybackMode.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.SimplerDevice.SlicingPlaybackMode.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Module>Live.Song<Description>Module</Description></Module>
<Built-In>Live.Song.get_all_scales_ordered()<Description>Built-In</Description></Built-In>
<Doc>get_all_scales_ordered() -&gt; tuple : Get an ordered tuple of tuples of all available scale names to intervals. C++ signature :  boost::python::tuple get_all_scales_ordered()</Doc>
<Class>Live.Song.BeatTime<Description>Class</Description></Class>
<Doc>Represents a Time, splitted into Bars, Beats, SubDivision and Ticks.</Doc>
<Value>Live.Song.BeatTime.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Song.BeatTime.bars<Description>Value</Description></Value>
<Value>Live.Song.BeatTime.beats<Description>Value</Description></Value>
<Value>Live.Song.BeatTime.sub_division<Description>Value</Description></Value>
<Value>Live.Song.BeatTime.ticks<Description>Value</Description></Value>
<Class>Live.Song.CaptureDestination<Description>Class</Description></Class>
<Doc>The destination for MIDI capture.</Doc>
<Built-In>Live.Song.CaptureDestination.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Song.CaptureDestination.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Song.CaptureDestination.arrangement<Description>Value</Description></Value>
<Doc>The destination for MIDI capture.</Doc>
<Value>Live.Song.CaptureDestination.auto<Description>Value</Description></Value>
<Doc>The destination for MIDI capture.</Doc>
<Value>Live.Song.CaptureDestination.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.Song.CaptureDestination.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.Song.CaptureDestination.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.Song.CaptureDestination.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Song.CaptureDestination.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.Song.CaptureDestination.name<Description>Value</Description></Value>
<Value>Live.Song.CaptureDestination.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.Song.CaptureDestination.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.Song.CaptureDestination.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.Song.CaptureDestination.session<Description>Value</Description></Value>
<Doc>The destination for MIDI capture.</Doc>
<Value>Live.Song.CaptureDestination.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.Song.CaptureDestination.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.Song.CaptureMode<Description>Class</Description></Class>
<Doc>The capture mode that is used for capture and insert scene.</Doc>
<Built-In>Live.Song.CaptureMode.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Song.CaptureMode.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Song.CaptureMode.all<Description>Value</Description></Value>
<Doc>The capture mode that is used for capture and insert scene.</Doc>
<Value>Live.Song.CaptureMode.all_except_selected<Description>Value</Description></Value>
<Doc>The capture mode that is used for capture and insert scene.</Doc>
<Value>Live.Song.CaptureMode.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.Song.CaptureMode.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.Song.CaptureMode.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.Song.CaptureMode.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Song.CaptureMode.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.Song.CaptureMode.name<Description>Value</Description></Value>
<Value>Live.Song.CaptureMode.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.Song.CaptureMode.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.Song.CaptureMode.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.Song.CaptureMode.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.Song.CaptureMode.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.Song.CuePoint<Description>Class</Description></Class>
<Doc>Represents a 'Marker' in the arrangement.</Doc>
<Built-In>Live.Song.CuePoint.add_name_listener()<Description>Built-In</Description></Built-In>
<Doc>add_name_listener( (CuePoint)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ACuePoint&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.CuePoint.add_time_listener()<Description>Built-In</Description></Built-In>
<Doc>add_time_listener( (CuePoint)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "time" has changed. C++ signature :  void add_time_listener(TPyHandle&lt;ACuePoint&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.CuePoint.jump()<Description>Built-In</Description></Built-In>
<Doc>jump( (CuePoint)arg1) -&gt; None : When the Song is playing, set the playing-position quantized to this Cuepoint's time. When not playing, simply move the start playing position. C++ signature :  void jump(TPyHandle&lt;ACuePoint&gt;)</Doc>
<Built-In>Live.Song.CuePoint.name_has_listener()<Description>Built-In</Description></Built-In>
<Doc>name_has_listener( (CuePoint)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ACuePoint&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.CuePoint.remove_name_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_name_listener( (CuePoint)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ACuePoint&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.CuePoint.remove_time_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_time_listener( (CuePoint)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "time". C++ signature :  void remove_time_listener(TPyHandle&lt;ACuePoint&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.CuePoint.time_has_listener()<Description>Built-In</Description></Built-In>
<Doc>time_has_listener( (CuePoint)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "time". C++ signature :  bool time_has_listener(TPyHandle&lt;ACuePoint&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.CuePoint.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Song.CuePoint._live_ptr<Description>Value</Description></Value>
<Value>Live.Song.CuePoint.add_name_listener()<Description>Value</Description></Value>
<Doc>add_name_listener( (CuePoint)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ACuePoint&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.CuePoint.add_time_listener()<Description>Value</Description></Value>
<Doc>add_time_listener( (CuePoint)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "time" has changed. C++ signature :  void add_time_listener(TPyHandle&lt;ACuePoint&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.CuePoint.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the cue point.</Doc>
<Value>Live.Song.CuePoint.jump()<Description>Value</Description></Value>
<Doc>jump( (CuePoint)arg1) -&gt; None : When the Song is playing, set the playing-position quantized to this Cuepoint's time. When not playing, simply move the start playing position. C++ signature :  void jump(TPyHandle&lt;ACuePoint&gt;)</Doc>
<Value>Live.Song.CuePoint.name<Description>Value</Description></Value>
<Doc>Get/Set/Listen to the name of this CuePoint, as visible in the arranger.</Doc>
<Value>Live.Song.CuePoint.name_has_listener()<Description>Value</Description></Value>
<Doc>name_has_listener( (CuePoint)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ACuePoint&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.CuePoint.remove_name_listener()<Description>Value</Description></Value>
<Doc>remove_name_listener( (CuePoint)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ACuePoint&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.CuePoint.remove_time_listener()<Description>Value</Description></Value>
<Doc>remove_time_listener( (CuePoint)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "time". C++ signature :  void remove_time_listener(TPyHandle&lt;ACuePoint&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.CuePoint.time<Description>Value</Description></Value>
<Doc>Get/Listen to the CuePoint's time in beats.</Doc>
<Value>Live.Song.CuePoint.time_has_listener()<Description>Value</Description></Value>
<Doc>time_has_listener( (CuePoint)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "time". C++ signature :  bool time_has_listener(TPyHandle&lt;ACuePoint&gt;,boost::python::api::object)</Doc>
<Class>Live.Song.Quantization<Description>Class</Description></Class>
<Built-In>Live.Song.Quantization.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Song.Quantization.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Song.Quantization.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.Song.Quantization.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.Song.Quantization.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.Song.Quantization.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Song.Quantization.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.Song.Quantization.name<Description>Value</Description></Value>
<Value>Live.Song.Quantization.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.Song.Quantization.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.Song.Quantization.q_2_bars<Description>Value</Description></Value>
<Value>Live.Song.Quantization.q_4_bars<Description>Value</Description></Value>
<Value>Live.Song.Quantization.q_8_bars<Description>Value</Description></Value>
<Value>Live.Song.Quantization.q_bar<Description>Value</Description></Value>
<Value>Live.Song.Quantization.q_eight<Description>Value</Description></Value>
<Value>Live.Song.Quantization.q_eight_triplet<Description>Value</Description></Value>
<Value>Live.Song.Quantization.q_half<Description>Value</Description></Value>
<Value>Live.Song.Quantization.q_half_triplet<Description>Value</Description></Value>
<Value>Live.Song.Quantization.q_no_q<Description>Value</Description></Value>
<Value>Live.Song.Quantization.q_quarter<Description>Value</Description></Value>
<Value>Live.Song.Quantization.q_quarter_triplet<Description>Value</Description></Value>
<Value>Live.Song.Quantization.q_sixtenth<Description>Value</Description></Value>
<Value>Live.Song.Quantization.q_sixtenth_triplet<Description>Value</Description></Value>
<Value>Live.Song.Quantization.q_thirtytwoth<Description>Value</Description></Value>
<Value>Live.Song.Quantization.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.Song.Quantization.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.Song.Quantization.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.Song.RecordingQuantization<Description>Class</Description></Class>
<Built-In>Live.Song.RecordingQuantization.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Song.RecordingQuantization.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Song.RecordingQuantization.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.Song.RecordingQuantization.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.Song.RecordingQuantization.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.Song.RecordingQuantization.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Song.RecordingQuantization.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.Song.RecordingQuantization.name<Description>Value</Description></Value>
<Value>Live.Song.RecordingQuantization.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.Song.RecordingQuantization.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.Song.RecordingQuantization.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.Song.RecordingQuantization.rec_q_eight<Description>Value</Description></Value>
<Value>Live.Song.RecordingQuantization.rec_q_eight_eight_triplet<Description>Value</Description></Value>
<Value>Live.Song.RecordingQuantization.rec_q_eight_triplet<Description>Value</Description></Value>
<Value>Live.Song.RecordingQuantization.rec_q_no_q<Description>Value</Description></Value>
<Value>Live.Song.RecordingQuantization.rec_q_quarter<Description>Value</Description></Value>
<Value>Live.Song.RecordingQuantization.rec_q_sixtenth<Description>Value</Description></Value>
<Value>Live.Song.RecordingQuantization.rec_q_sixtenth_sixtenth_triplet<Description>Value</Description></Value>
<Value>Live.Song.RecordingQuantization.rec_q_sixtenth_triplet<Description>Value</Description></Value>
<Value>Live.Song.RecordingQuantization.rec_q_thirtysecond<Description>Value</Description></Value>
<Value>Live.Song.RecordingQuantization.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.Song.RecordingQuantization.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.Song.SessionRecordStatus<Description>Class</Description></Class>
<Built-In>Live.Song.SessionRecordStatus.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Song.SessionRecordStatus.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Song.SessionRecordStatus.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.Song.SessionRecordStatus.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.Song.SessionRecordStatus.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.Song.SessionRecordStatus.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Song.SessionRecordStatus.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.Song.SessionRecordStatus.name<Description>Value</Description></Value>
<Value>Live.Song.SessionRecordStatus.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.Song.SessionRecordStatus.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.Song.SessionRecordStatus.off<Description>Value</Description></Value>
<Value>Live.Song.SessionRecordStatus.on<Description>Value</Description></Value>
<Value>Live.Song.SessionRecordStatus.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.Song.SessionRecordStatus.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.Song.SessionRecordStatus.transition<Description>Value</Description></Value>
<Value>Live.Song.SessionRecordStatus.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.Song.SmptTime<Description>Class</Description></Class>
<Doc>Represents a Time, split into Hours, Minutes, Seconds and Frames.The frame type must be specified when calling a function that returnsa SmptTime.</Doc>
<Value>Live.Song.SmptTime.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Song.SmptTime.frames<Description>Value</Description></Value>
<Value>Live.Song.SmptTime.hours<Description>Value</Description></Value>
<Value>Live.Song.SmptTime.minutes<Description>Value</Description></Value>
<Value>Live.Song.SmptTime.seconds<Description>Value</Description></Value>
<Class>Live.Song.Song<Description>Class</Description></Class>
<Doc>This class represents a Live set.</Doc>
<Built-In>Live.Song.Song.add_appointed_device_listener()<Description>Built-In</Description></Built-In>
<Doc>add_appointed_device_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "appointed_device" has changed. C++ signature :  void add_appointed_device_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_arrangement_overdub_listener()<Description>Built-In</Description></Built-In>
<Doc>add_arrangement_overdub_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "arrangement_overdub" has changed. C++ signature :  void add_arrangement_overdub_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_back_to_arranger_listener()<Description>Built-In</Description></Built-In>
<Doc>add_back_to_arranger_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "back_to_arranger" has changed. C++ signature :  void add_back_to_arranger_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_can_capture_midi_listener()<Description>Built-In</Description></Built-In>
<Doc>add_can_capture_midi_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "can_capture_midi" has changed. C++ signature :  void add_can_capture_midi_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_can_jump_to_next_cue_listener()<Description>Built-In</Description></Built-In>
<Doc>add_can_jump_to_next_cue_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "can_jump_to_next_cue" has changed. C++ signature :  void add_can_jump_to_next_cue_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_can_jump_to_prev_cue_listener()<Description>Built-In</Description></Built-In>
<Doc>add_can_jump_to_prev_cue_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "can_jump_to_prev_cue" has changed. C++ signature :  void add_can_jump_to_prev_cue_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_clip_trigger_quantization_listener()<Description>Built-In</Description></Built-In>
<Doc>add_clip_trigger_quantization_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "clip_trigger_quantization" has changed. C++ signature :  void add_clip_trigger_quantization_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_count_in_duration_listener()<Description>Built-In</Description></Built-In>
<Doc>add_count_in_duration_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "count_in_duration" has changed. C++ signature :  void add_count_in_duration_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_cue_points_listener()<Description>Built-In</Description></Built-In>
<Doc>add_cue_points_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "cue_points" has changed. C++ signature :  void add_cue_points_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_current_song_time_listener()<Description>Built-In</Description></Built-In>
<Doc>add_current_song_time_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "current_song_time" has changed. C++ signature :  void add_current_song_time_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_data_listener()<Description>Built-In</Description></Built-In>
<Doc>add_data_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "data" has changed. C++ signature :  void add_data_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_exclusive_arm_listener()<Description>Built-In</Description></Built-In>
<Doc>add_exclusive_arm_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "exclusive_arm" has changed. C++ signature :  void add_exclusive_arm_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_groove_amount_listener()<Description>Built-In</Description></Built-In>
<Doc>add_groove_amount_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "groove_amount" has changed. C++ signature :  void add_groove_amount_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_is_ableton_link_enabled_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_ableton_link_enabled_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_ableton_link_enabled" has changed. C++ signature :  void add_is_ableton_link_enabled_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_is_ableton_link_start_stop_sync_enabled_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_ableton_link_start_stop_sync_enabled_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_ableton_link_start_stop_sync_enabled" has changed. C++ signature :  void add_is_ableton_link_start_stop_sync_enabled_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_is_counting_in_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_counting_in_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_counting_in" has changed. C++ signature :  void add_is_counting_in_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_is_playing_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_playing_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_playing" has changed. C++ signature :  void add_is_playing_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_loop_length_listener()<Description>Built-In</Description></Built-In>
<Doc>add_loop_length_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "loop_length" has changed. C++ signature :  void add_loop_length_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_loop_listener()<Description>Built-In</Description></Built-In>
<Doc>add_loop_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "loop" has changed. C++ signature :  void add_loop_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_loop_start_listener()<Description>Built-In</Description></Built-In>
<Doc>add_loop_start_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "loop_start" has changed. C++ signature :  void add_loop_start_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_metronome_listener()<Description>Built-In</Description></Built-In>
<Doc>add_metronome_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "metronome" has changed. C++ signature :  void add_metronome_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_midi_recording_quantization_listener()<Description>Built-In</Description></Built-In>
<Doc>add_midi_recording_quantization_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "midi_recording_quantization" has changed. C++ signature :  void add_midi_recording_quantization_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_nudge_down_listener()<Description>Built-In</Description></Built-In>
<Doc>add_nudge_down_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "nudge_down" has changed. C++ signature :  void add_nudge_down_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_nudge_up_listener()<Description>Built-In</Description></Built-In>
<Doc>add_nudge_up_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "nudge_up" has changed. C++ signature :  void add_nudge_up_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_overdub_listener()<Description>Built-In</Description></Built-In>
<Doc>add_overdub_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "overdub" has changed. C++ signature :  void add_overdub_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_punch_in_listener()<Description>Built-In</Description></Built-In>
<Doc>add_punch_in_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "punch_in" has changed. C++ signature :  void add_punch_in_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_punch_out_listener()<Description>Built-In</Description></Built-In>
<Doc>add_punch_out_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "punch_out" has changed. C++ signature :  void add_punch_out_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_re_enable_automation_enabled_listener()<Description>Built-In</Description></Built-In>
<Doc>add_re_enable_automation_enabled_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "re_enable_automation_enabled" has changed. C++ signature :  void add_re_enable_automation_enabled_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_record_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>add_record_mode_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "record_mode" has changed. C++ signature :  void add_record_mode_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_return_tracks_listener()<Description>Built-In</Description></Built-In>
<Doc>add_return_tracks_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "return_tracks" has changed. C++ signature :  void add_return_tracks_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_root_note_listener()<Description>Built-In</Description></Built-In>
<Doc>add_root_note_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "root_note" has changed. C++ signature :  void add_root_note_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_scale_information_listener()<Description>Built-In</Description></Built-In>
<Doc>add_scale_information_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "scale_information" has changed. C++ signature :  void add_scale_information_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_scale_intervals_listener()<Description>Built-In</Description></Built-In>
<Doc>add_scale_intervals_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "scale_intervals" has changed. C++ signature :  void add_scale_intervals_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_scale_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>add_scale_mode_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "scale_mode" has changed. C++ signature :  void add_scale_mode_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_scale_name_listener()<Description>Built-In</Description></Built-In>
<Doc>add_scale_name_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "scale_name" has changed. C++ signature :  void add_scale_name_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_scenes_listener()<Description>Built-In</Description></Built-In>
<Doc>add_scenes_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "scenes" has changed. C++ signature :  void add_scenes_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_session_automation_record_listener()<Description>Built-In</Description></Built-In>
<Doc>add_session_automation_record_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "session_automation_record" has changed. C++ signature :  void add_session_automation_record_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_session_record_listener()<Description>Built-In</Description></Built-In>
<Doc>add_session_record_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "session_record" has changed. C++ signature :  void add_session_record_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_session_record_status_listener()<Description>Built-In</Description></Built-In>
<Doc>add_session_record_status_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "session_record_status" has changed. C++ signature :  void add_session_record_status_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_signature_denominator_listener()<Description>Built-In</Description></Built-In>
<Doc>add_signature_denominator_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "signature_denominator" has changed. C++ signature :  void add_signature_denominator_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_signature_numerator_listener()<Description>Built-In</Description></Built-In>
<Doc>add_signature_numerator_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "signature_numerator" has changed. C++ signature :  void add_signature_numerator_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_song_length_listener()<Description>Built-In</Description></Built-In>
<Doc>add_song_length_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "song_length" has changed. C++ signature :  void add_song_length_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_start_time_listener()<Description>Built-In</Description></Built-In>
<Doc>add_start_time_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "start_time" has changed. C++ signature :  void add_start_time_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_swing_amount_listener()<Description>Built-In</Description></Built-In>
<Doc>add_swing_amount_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "swing_amount" has changed. C++ signature :  void add_swing_amount_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_tempo_follower_enabled_listener()<Description>Built-In</Description></Built-In>
<Doc>add_tempo_follower_enabled_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "tempo_follower_enabled" has changed. C++ signature :  void add_tempo_follower_enabled_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_tempo_listener()<Description>Built-In</Description></Built-In>
<Doc>add_tempo_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "tempo" has changed. C++ signature :  void add_tempo_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_tracks_listener()<Description>Built-In</Description></Built-In>
<Doc>add_tracks_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "tracks" has changed. C++ signature :  void add_tracks_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_tuning_system_listener()<Description>Built-In</Description></Built-In>
<Doc>add_tuning_system_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "tuning_system" has changed. C++ signature :  void add_tuning_system_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.add_visible_tracks_listener()<Description>Built-In</Description></Built-In>
<Doc>add_visible_tracks_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "visible_tracks" has changed. C++ signature :  void add_visible_tracks_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.appointed_device_has_listener()<Description>Built-In</Description></Built-In>
<Doc>appointed_device_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "appointed_device". C++ signature :  bool appointed_device_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.arrangement_overdub_has_listener()<Description>Built-In</Description></Built-In>
<Doc>arrangement_overdub_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "arrangement_overdub". C++ signature :  bool arrangement_overdub_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.back_to_arranger_has_listener()<Description>Built-In</Description></Built-In>
<Doc>back_to_arranger_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "back_to_arranger". C++ signature :  bool back_to_arranger_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.begin_undo_step()<Description>Built-In</Description></Built-In>
<Doc>begin_undo_step( (Song)arg1) -&gt; None : C++ signature :  void begin_undo_step(TPyHandle&lt;ASong&gt;)</Doc>
<Built-In>Live.Song.Song.can_capture_midi_has_listener()<Description>Built-In</Description></Built-In>
<Doc>can_capture_midi_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "can_capture_midi". C++ signature :  bool can_capture_midi_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.can_jump_to_next_cue_has_listener()<Description>Built-In</Description></Built-In>
<Doc>can_jump_to_next_cue_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "can_jump_to_next_cue". C++ signature :  bool can_jump_to_next_cue_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.can_jump_to_prev_cue_has_listener()<Description>Built-In</Description></Built-In>
<Doc>can_jump_to_prev_cue_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "can_jump_to_prev_cue". C++ signature :  bool can_jump_to_prev_cue_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.capture_and_insert_scene()<Description>Built-In</Description></Built-In>
<Doc>capture_and_insert_scene( (Song)arg1 [, (int)CaptureMode=Song.CaptureMode.all]) -&gt; None : Capture currently playing clips and insert them as a new scene after the selected scene. Raises a runtime error if creating a new scene would exceed the limitations. C++ signature :  void capture_and_insert_scene(TPyHandle&lt;ASong&gt; [,int=Song.CaptureMode.all])</Doc>
<Built-In>Live.Song.Song.capture_midi()<Description>Built-In</Description></Built-In>
<Doc>capture_midi( (Song)arg1 [, (int)Destination=Song.CaptureDestination.auto]) -&gt; None : Capture recently played MIDI material from audible tracks. If no Destination is given or Destination is set to CaptureDestination.auto, the captured material is inserted into the Session or Arrangement depending on which is visible. If Destination is set to CaptureDestination.session or CaptureDestination.arrangement, inserts the material into Session or Arrangement, respectively. Raises a limitation error when capturing into the Session and a new scene would have to be created but can't because it would exceed the limitations. C++ signature :  void capture_midi(TPyHandle&lt;ASong&gt; [,int=Song.CaptureDestination.auto])</Doc>
<Built-In>Live.Song.Song.clip_trigger_quantization_has_listener()<Description>Built-In</Description></Built-In>
<Doc>clip_trigger_quantization_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "clip_trigger_quantization". C++ signature :  bool clip_trigger_quantization_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.continue_playing()<Description>Built-In</Description></Built-In>
<Doc>continue_playing( (Song)arg1) -&gt; None : Continue playing the song from the current position C++ signature :  void continue_playing(TPyHandle&lt;ASong&gt;)</Doc>
<Built-In>Live.Song.Song.count_in_duration_has_listener()<Description>Built-In</Description></Built-In>
<Doc>count_in_duration_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "count_in_duration". C++ signature :  bool count_in_duration_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.create_audio_track()<Description>Built-In</Description></Built-In>
<Doc>create_audio_track( (Song)arg1 [, (object)Index=None]) -&gt; Track : Create a new audio track at the optional given index and return it.If the index is -1, the new track is added at the end. It will create a default audio track if possible. If the index is invalid or the new track would exceed the limitations, a limitation error is raised.If the index is missing, the track is created after the last selected item C++ signature :  TWeakPtr&lt;TTrackPyHandle&gt; create_audio_track(TPyHandle&lt;ASong&gt; [,boost::python::api::object=None])</Doc>
<Built-In>Live.Song.Song.create_midi_track()<Description>Built-In</Description></Built-In>
<Doc>create_midi_track( (Song)arg1 [, (object)Index=None]) -&gt; Track : Create a new midi track at the optional given index and return it.If the index is -1,  the new track is added at the end.It will create a default midi track if possible. If the index is invalid or the new track would exceed the limitations, a limitation error is raised.If the index is missing, the track is created after the last selected item C++ signature :  TWeakPtr&lt;TTrackPyHandle&gt; create_midi_track(TPyHandle&lt;ASong&gt; [,boost::python::api::object=None])</Doc>
<Built-In>Live.Song.Song.create_return_track()<Description>Built-In</Description></Built-In>
<Doc>create_return_track( (Song)arg1) -&gt; Track : Create a new return track at the end and return it. If the new track would exceed  the limitations, a limitation error is raised.  If the maximum number of return tracks is exceeded, a RuntimeError is raised. C++ signature :  TWeakPtr&lt;TTrackPyHandle&gt; create_return_track(TPyHandle&lt;ASong&gt;)</Doc>
<Built-In>Live.Song.Song.create_scene()<Description>Built-In</Description></Built-In>
<Doc>create_scene( (Song)arg1, (int)arg2) -&gt; Scene : Create a new scene at the given index. If the index is -1, the new scene is added at the end. If the index is invalid or the new scene would exceed the limitations, a limitation error is raised. C++ signature :  TWeakPtr&lt;TPyHandle&lt;AScene&gt;&gt; create_scene(TPyHandle&lt;ASong&gt;,int)</Doc>
<Built-In>Live.Song.Song.cue_points_has_listener()<Description>Built-In</Description></Built-In>
<Doc>cue_points_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "cue_points". C++ signature :  bool cue_points_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.current_song_time_has_listener()<Description>Built-In</Description></Built-In>
<Doc>current_song_time_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "current_song_time". C++ signature :  bool current_song_time_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.data_has_listener()<Description>Built-In</Description></Built-In>
<Doc>data_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "data". C++ signature :  bool data_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.delete_return_track()<Description>Built-In</Description></Built-In>
<Doc>delete_return_track( (Song)arg1, (int)arg2) -&gt; None : Delete the return track with the given index. If no track with this index exists, an exception will be raised. C++ signature :  void delete_return_track(TPyHandle&lt;ASong&gt;,int)</Doc>
<Built-In>Live.Song.Song.delete_scene()<Description>Built-In</Description></Built-In>
<Doc>delete_scene( (Song)arg1, (int)arg2) -&gt; None : Delete the scene with the given index. If no scene with this index exists, an exception will be raised. C++ signature :  void delete_scene(TPyHandle&lt;ASong&gt;,int)</Doc>
<Built-In>Live.Song.Song.delete_track()<Description>Built-In</Description></Built-In>
<Doc>delete_track( (Song)arg1, (int)arg2) -&gt; None : Delete the track with the given index. If no track with this index exists, an exception will be raised. C++ signature :  void delete_track(TPyHandle&lt;ASong&gt;,int)</Doc>
<Built-In>Live.Song.Song.duplicate_scene()<Description>Built-In</Description></Built-In>
<Doc>duplicate_scene( (Song)arg1, (int)arg2) -&gt; None : Duplicates a scene and selects the new one. Raises a limitation error if creating a new scene would exceed the limitations. C++ signature :  void duplicate_scene(TPyHandle&lt;ASong&gt;,int)</Doc>
<Built-In>Live.Song.Song.duplicate_track()<Description>Built-In</Description></Built-In>
<Doc>duplicate_track( (Song)arg1, (int)arg2) -&gt; None : Duplicates a track and selects the new one. If the track is inside a folded group track, the group track is unfolded. Raises a limitation error if creating a new track would exceed the limitations. C++ signature :  void duplicate_track(TPyHandle&lt;ASong&gt;,int)</Doc>
<Built-In>Live.Song.Song.end_undo_step()<Description>Built-In</Description></Built-In>
<Doc>end_undo_step( (Song)arg1) -&gt; None : C++ signature :  void end_undo_step(TPyHandle&lt;ASong&gt;)</Doc>
<Built-In>Live.Song.Song.exclusive_arm_has_listener()<Description>Built-In</Description></Built-In>
<Doc>exclusive_arm_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "exclusive_arm". C++ signature :  bool exclusive_arm_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.find_device_position()<Description>Built-In</Description></Built-In>
<Doc>find_device_position( (Song)arg1, (Device)device, (LomObject)target, (int)target_position) -&gt; int : Returns the closest possible position to the given target, where the device can be inserted. If inserting is not possible at all (i.e. if the device type is wrong), -1 is returned. C++ signature :  int find_device_position(TPyHandle&lt;ASong&gt;,TPyHandle&lt;ADevice&gt;,TPyHandleBase,int)</Doc>
<Built-In>Live.Song.Song.force_link_beat_time()<Description>Built-In</Description></Built-In>
<Doc>force_link_beat_time( (Song)arg1) -&gt; None : Force the Link timeline to jump to Lives current beat time. Danger: This can cause beat time discontinuities in other connected apps. C++ signature :  void force_link_beat_time(TPyHandle&lt;ASong&gt;)</Doc>
<Built-In>Live.Song.Song.get_beats_loop_length()<Description>Built-In</Description></Built-In>
<Doc>get_beats_loop_length( (Song)arg1) -&gt; BeatTime : Get const access to the songs loop length, using a BeatTime class with the current global set signature. C++ signature :  NSongApi::TBeatTime get_beats_loop_length(TPyHandle&lt;ASong&gt;)</Doc>
<Built-In>Live.Song.Song.get_beats_loop_start()<Description>Built-In</Description></Built-In>
<Doc>get_beats_loop_start( (Song)arg1) -&gt; BeatTime : Get const access to the songs loop start, using a BeatTime class with the current global set signature. C++ signature :  NSongApi::TBeatTime get_beats_loop_start(TPyHandle&lt;ASong&gt;)</Doc>
<Built-In>Live.Song.Song.get_current_beats_song_time()<Description>Built-In</Description></Built-In>
<Doc>get_current_beats_song_time( (Song)arg1) -&gt; BeatTime : Get const access to the songs current playing position, using a BeatTime class with the current global set signature. C++ signature :  NSongApi::TBeatTime get_current_beats_song_time(TPyHandle&lt;ASong&gt;)</Doc>
<Built-In>Live.Song.Song.get_current_smpte_song_time()<Description>Built-In</Description></Built-In>
<Doc>get_current_smpte_song_time( (Song)arg1, (int)arg2) -&gt; SmptTime : Get const access to the songs current playing position, by specifying the SMPTE format in which you would like to receive the time. C++ signature :  NSongApi::TSmptTime get_current_smpte_song_time(TPyHandle&lt;ASong&gt;,int)</Doc>
<Built-In>Live.Song.Song.get_data()<Description>Built-In</Description></Built-In>
<Doc>get_data( (Song)arg1, (object)key, (object)default_value) -&gt; object : Get data for the given key, that was previously stored using set_data. C++ signature :  boost::python::api::object get_data(TPyHandle&lt;ASong&gt;,TString,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.groove_amount_has_listener()<Description>Built-In</Description></Built-In>
<Doc>groove_amount_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "groove_amount". C++ signature :  bool groove_amount_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.is_ableton_link_enabled_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_ableton_link_enabled_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_ableton_link_enabled". C++ signature :  bool is_ableton_link_enabled_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.is_ableton_link_start_stop_sync_enabled_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_ableton_link_start_stop_sync_enabled_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_ableton_link_start_stop_sync_enabled". C++ signature :  bool is_ableton_link_start_stop_sync_enabled_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.is_counting_in_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_counting_in_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_counting_in". C++ signature :  bool is_counting_in_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.is_cue_point_selected()<Description>Built-In</Description></Built-In>
<Doc>is_cue_point_selected( (Song)arg1) -&gt; bool : Return true if the global playing pos is currently on a cue point. C++ signature :  bool is_cue_point_selected(TPyHandle&lt;ASong&gt;)</Doc>
<Built-In>Live.Song.Song.is_playing_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_playing_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_playing". C++ signature :  bool is_playing_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.jump_by()<Description>Built-In</Description></Built-In>
<Doc>jump_by( (Song)arg1, (float)arg2) -&gt; None : Set a new playing pos, relative to the current one. C++ signature :  void jump_by(TPyHandle&lt;ASong&gt;,double)</Doc>
<Built-In>Live.Song.Song.jump_to_next_cue()<Description>Built-In</Description></Built-In>
<Doc>jump_to_next_cue( (Song)arg1) -&gt; None : Jump to the next cue (marker) if possible. C++ signature :  void jump_to_next_cue(TPyHandle&lt;ASong&gt;)</Doc>
<Built-In>Live.Song.Song.jump_to_prev_cue()<Description>Built-In</Description></Built-In>
<Doc>jump_to_prev_cue( (Song)arg1) -&gt; None : Jump to the prior cue (marker) if possible. C++ signature :  void jump_to_prev_cue(TPyHandle&lt;ASong&gt;)</Doc>
<Built-In>Live.Song.Song.loop_has_listener()<Description>Built-In</Description></Built-In>
<Doc>loop_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "loop". C++ signature :  bool loop_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.loop_length_has_listener()<Description>Built-In</Description></Built-In>
<Doc>loop_length_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "loop_length". C++ signature :  bool loop_length_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.loop_start_has_listener()<Description>Built-In</Description></Built-In>
<Doc>loop_start_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "loop_start". C++ signature :  bool loop_start_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.metronome_has_listener()<Description>Built-In</Description></Built-In>
<Doc>metronome_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "metronome". C++ signature :  bool metronome_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.midi_recording_quantization_has_listener()<Description>Built-In</Description></Built-In>
<Doc>midi_recording_quantization_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "midi_recording_quantization". C++ signature :  bool midi_recording_quantization_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.move_device()<Description>Built-In</Description></Built-In>
<Doc>move_device( (Song)arg1, (Device)device, (LomObject)target, (int)target_position) -&gt; int : Move a device into the target at the given position, where 0 moves it before the first device and len(devices) moves it to the end of the device chain.If the device cannot be moved to this position, the nearest possible position is chosen. If the device type is not valid, a runtime error is raised.Returns the index, where the device was moved to. C++ signature :  int move_device(TPyHandle&lt;ASong&gt;,TPyHandle&lt;ADevice&gt;,TPyHandleBase,int)</Doc>
<Built-In>Live.Song.Song.nudge_down_has_listener()<Description>Built-In</Description></Built-In>
<Doc>nudge_down_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "nudge_down". C++ signature :  bool nudge_down_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.nudge_up_has_listener()<Description>Built-In</Description></Built-In>
<Doc>nudge_up_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "nudge_up". C++ signature :  bool nudge_up_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.overdub_has_listener()<Description>Built-In</Description></Built-In>
<Doc>overdub_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "overdub". C++ signature :  bool overdub_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.play_selection()<Description>Built-In</Description></Built-In>
<Doc>play_selection( (Song)arg1) -&gt; None : Start playing the current set selection, or do nothing if no selection is set. C++ signature :  void play_selection(TPyHandle&lt;ASong&gt;)</Doc>
<Built-In>Live.Song.Song.punch_in_has_listener()<Description>Built-In</Description></Built-In>
<Doc>punch_in_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "punch_in". C++ signature :  bool punch_in_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.punch_out_has_listener()<Description>Built-In</Description></Built-In>
<Doc>punch_out_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "punch_out". C++ signature :  bool punch_out_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.re_enable_automation()<Description>Built-In</Description></Built-In>
<Doc>re_enable_automation( (Song)arg1) -&gt; None : Discards overrides of automated parameters. C++ signature :  void re_enable_automation(TPyHandle&lt;ASong&gt;)</Doc>
<Built-In>Live.Song.Song.re_enable_automation_enabled_has_listener()<Description>Built-In</Description></Built-In>
<Doc>re_enable_automation_enabled_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "re_enable_automation_enabled". C++ signature :  bool re_enable_automation_enabled_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.record_mode_has_listener()<Description>Built-In</Description></Built-In>
<Doc>record_mode_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "record_mode". C++ signature :  bool record_mode_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.redo()<Description>Built-In</Description></Built-In>
<Doc>redo( (Song)arg1) -&gt; str : Redo the last action that was undone. C++ signature :  TString redo(TPyHandle&lt;ASong&gt;)</Doc>
<Built-In>Live.Song.Song.remove_appointed_device_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_appointed_device_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "appointed_device". C++ signature :  void remove_appointed_device_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_arrangement_overdub_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_arrangement_overdub_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "arrangement_overdub". C++ signature :  void remove_arrangement_overdub_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_back_to_arranger_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_back_to_arranger_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "back_to_arranger". C++ signature :  void remove_back_to_arranger_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_can_capture_midi_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_can_capture_midi_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "can_capture_midi". C++ signature :  void remove_can_capture_midi_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_can_jump_to_next_cue_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_can_jump_to_next_cue_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "can_jump_to_next_cue". C++ signature :  void remove_can_jump_to_next_cue_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_can_jump_to_prev_cue_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_can_jump_to_prev_cue_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "can_jump_to_prev_cue". C++ signature :  void remove_can_jump_to_prev_cue_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_clip_trigger_quantization_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_clip_trigger_quantization_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "clip_trigger_quantization". C++ signature :  void remove_clip_trigger_quantization_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_count_in_duration_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_count_in_duration_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "count_in_duration". C++ signature :  void remove_count_in_duration_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_cue_points_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_cue_points_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "cue_points". C++ signature :  void remove_cue_points_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_current_song_time_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_current_song_time_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "current_song_time". C++ signature :  void remove_current_song_time_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_data_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_data_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "data". C++ signature :  void remove_data_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_exclusive_arm_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_exclusive_arm_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "exclusive_arm". C++ signature :  void remove_exclusive_arm_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_groove_amount_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_groove_amount_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "groove_amount". C++ signature :  void remove_groove_amount_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_is_ableton_link_enabled_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_ableton_link_enabled_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_ableton_link_enabled". C++ signature :  void remove_is_ableton_link_enabled_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_is_ableton_link_start_stop_sync_enabled_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_ableton_link_start_stop_sync_enabled_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_ableton_link_start_stop_sync_enabled". C++ signature :  void remove_is_ableton_link_start_stop_sync_enabled_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_is_counting_in_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_counting_in_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_counting_in". C++ signature :  void remove_is_counting_in_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_is_playing_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_playing_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_playing". C++ signature :  void remove_is_playing_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_loop_length_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_loop_length_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "loop_length". C++ signature :  void remove_loop_length_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_loop_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_loop_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "loop". C++ signature :  void remove_loop_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_loop_start_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_loop_start_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "loop_start". C++ signature :  void remove_loop_start_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_metronome_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_metronome_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "metronome". C++ signature :  void remove_metronome_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_midi_recording_quantization_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_midi_recording_quantization_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "midi_recording_quantization". C++ signature :  void remove_midi_recording_quantization_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_nudge_down_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_nudge_down_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "nudge_down". C++ signature :  void remove_nudge_down_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_nudge_up_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_nudge_up_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "nudge_up". C++ signature :  void remove_nudge_up_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_overdub_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_overdub_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "overdub". C++ signature :  void remove_overdub_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_punch_in_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_punch_in_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "punch_in". C++ signature :  void remove_punch_in_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_punch_out_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_punch_out_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "punch_out". C++ signature :  void remove_punch_out_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_re_enable_automation_enabled_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_re_enable_automation_enabled_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "re_enable_automation_enabled". C++ signature :  void remove_re_enable_automation_enabled_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_record_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_record_mode_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "record_mode". C++ signature :  void remove_record_mode_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_return_tracks_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_return_tracks_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "return_tracks". C++ signature :  void remove_return_tracks_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_root_note_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_root_note_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "root_note". C++ signature :  void remove_root_note_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_scale_information_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_scale_information_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "scale_information". C++ signature :  void remove_scale_information_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_scale_intervals_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_scale_intervals_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "scale_intervals". C++ signature :  void remove_scale_intervals_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_scale_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_scale_mode_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "scale_mode". C++ signature :  void remove_scale_mode_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_scale_name_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_scale_name_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "scale_name". C++ signature :  void remove_scale_name_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_scenes_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_scenes_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "scenes". C++ signature :  void remove_scenes_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_session_automation_record_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_session_automation_record_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "session_automation_record". C++ signature :  void remove_session_automation_record_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_session_record_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_session_record_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "session_record". C++ signature :  void remove_session_record_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_session_record_status_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_session_record_status_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "session_record_status". C++ signature :  void remove_session_record_status_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_signature_denominator_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_signature_denominator_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "signature_denominator". C++ signature :  void remove_signature_denominator_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_signature_numerator_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_signature_numerator_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "signature_numerator". C++ signature :  void remove_signature_numerator_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_song_length_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_song_length_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "song_length". C++ signature :  void remove_song_length_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_start_time_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_start_time_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "start_time". C++ signature :  void remove_start_time_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_swing_amount_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_swing_amount_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "swing_amount". C++ signature :  void remove_swing_amount_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_tempo_follower_enabled_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_tempo_follower_enabled_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "tempo_follower_enabled". C++ signature :  void remove_tempo_follower_enabled_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_tempo_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_tempo_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "tempo". C++ signature :  void remove_tempo_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_tracks_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_tracks_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "tracks". C++ signature :  void remove_tracks_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_tuning_system_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_tuning_system_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "tuning_system". C++ signature :  void remove_tuning_system_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.remove_visible_tracks_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_visible_tracks_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "visible_tracks". C++ signature :  void remove_visible_tracks_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.return_tracks_has_listener()<Description>Built-In</Description></Built-In>
<Doc>return_tracks_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "return_tracks". C++ signature :  bool return_tracks_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.root_note_has_listener()<Description>Built-In</Description></Built-In>
<Doc>root_note_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "root_note". C++ signature :  bool root_note_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.scale_information_has_listener()<Description>Built-In</Description></Built-In>
<Doc>scale_information_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "scale_information". C++ signature :  bool scale_information_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.scale_intervals_has_listener()<Description>Built-In</Description></Built-In>
<Doc>scale_intervals_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "scale_intervals". C++ signature :  bool scale_intervals_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.scale_mode_has_listener()<Description>Built-In</Description></Built-In>
<Doc>scale_mode_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "scale_mode". C++ signature :  bool scale_mode_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.scale_name_has_listener()<Description>Built-In</Description></Built-In>
<Doc>scale_name_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "scale_name". C++ signature :  bool scale_name_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.scenes_has_listener()<Description>Built-In</Description></Built-In>
<Doc>scenes_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "scenes". C++ signature :  bool scenes_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.scrub_by()<Description>Built-In</Description></Built-In>
<Doc>scrub_by( (Song)arg1, (float)arg2) -&gt; None : Same as jump_by, but does not stop playback. C++ signature :  void scrub_by(TPyHandle&lt;ASong&gt;,double)</Doc>
<Built-In>Live.Song.Song.session_automation_record_has_listener()<Description>Built-In</Description></Built-In>
<Doc>session_automation_record_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "session_automation_record". C++ signature :  bool session_automation_record_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.session_record_has_listener()<Description>Built-In</Description></Built-In>
<Doc>session_record_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "session_record". C++ signature :  bool session_record_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.session_record_status_has_listener()<Description>Built-In</Description></Built-In>
<Doc>session_record_status_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "session_record_status". C++ signature :  bool session_record_status_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.set_data()<Description>Built-In</Description></Built-In>
<Doc>set_data( (Song)arg1, (object)key, (object)value) -&gt; None : Store data for the given key in this object. The data is persistent and will be restored when loading the Live Set. C++ signature :  void set_data(TPyHandle&lt;ASong&gt;,TString,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.set_or_delete_cue()<Description>Built-In</Description></Built-In>
<Doc>set_or_delete_cue( (Song)arg1) -&gt; None : When a cue is selected, it gets deleted. If no cue is selected, a new cue is created at the current global songtime. C++ signature :  void set_or_delete_cue(TPyHandle&lt;ASong&gt;)</Doc>
<Built-In>Live.Song.Song.signature_denominator_has_listener()<Description>Built-In</Description></Built-In>
<Doc>signature_denominator_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "signature_denominator". C++ signature :  bool signature_denominator_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.signature_numerator_has_listener()<Description>Built-In</Description></Built-In>
<Doc>signature_numerator_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "signature_numerator". C++ signature :  bool signature_numerator_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.song_length_has_listener()<Description>Built-In</Description></Built-In>
<Doc>song_length_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "song_length". C++ signature :  bool song_length_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.start_playing()<Description>Built-In</Description></Built-In>
<Doc>start_playing( (Song)arg1) -&gt; None : Start playing from the startmarker C++ signature :  void start_playing(TPyHandle&lt;ASong&gt;)</Doc>
<Built-In>Live.Song.Song.start_time_has_listener()<Description>Built-In</Description></Built-In>
<Doc>start_time_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "start_time". C++ signature :  bool start_time_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.stop_all_clips()<Description>Built-In</Description></Built-In>
<Doc>stop_all_clips( (Song)arg1 [, (bool)Quantized=True]) -&gt; None : Stop all playing Clips (if any) but continue playing the Song. C++ signature :  void stop_all_clips(TPyHandle&lt;ASong&gt; [,bool=True])</Doc>
<Built-In>Live.Song.Song.stop_playing()<Description>Built-In</Description></Built-In>
<Doc>stop_playing( (Song)arg1) -&gt; None : Stop playing the Song. C++ signature :  void stop_playing(TPyHandle&lt;ASong&gt;)</Doc>
<Built-In>Live.Song.Song.swing_amount_has_listener()<Description>Built-In</Description></Built-In>
<Doc>swing_amount_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "swing_amount". C++ signature :  bool swing_amount_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.tap_tempo()<Description>Built-In</Description></Built-In>
<Doc>tap_tempo( (Song)arg1) -&gt; None : Trigger the tap tempo function. C++ signature :  void tap_tempo(TPyHandle&lt;ASong&gt;)</Doc>
<Built-In>Live.Song.Song.tempo_follower_enabled_has_listener()<Description>Built-In</Description></Built-In>
<Doc>tempo_follower_enabled_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "tempo_follower_enabled". C++ signature :  bool tempo_follower_enabled_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.tempo_has_listener()<Description>Built-In</Description></Built-In>
<Doc>tempo_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "tempo". C++ signature :  bool tempo_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.tracks_has_listener()<Description>Built-In</Description></Built-In>
<Doc>tracks_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "tracks". C++ signature :  bool tracks_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.trigger_session_record()<Description>Built-In</Description></Built-In>
<Doc>trigger_session_record( (Song)self [, (float)record_length=1.7976931348623157e+308]) -&gt; None : Triggers a new session recording. C++ signature :  void trigger_session_record(TPyHandle&lt;ASong&gt; [,double=1.7976931348623157e+308])</Doc>
<Built-In>Live.Song.Song.tuning_system_has_listener()<Description>Built-In</Description></Built-In>
<Doc>tuning_system_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "tuning_system". C++ signature :  bool tuning_system_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.undo()<Description>Built-In</Description></Built-In>
<Doc>undo( (Song)arg1) -&gt; str : Undo the last action that was made. C++ signature :  TString undo(TPyHandle&lt;ASong&gt;)</Doc>
<Built-In>Live.Song.Song.visible_tracks_has_listener()<Description>Built-In</Description></Built-In>
<Doc>visible_tracks_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "visible_tracks". C++ signature :  bool visible_tracks_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.View<Description>Value</Description></Value>
<Doc>Representing the view aspects of a Live document: The Session and Arrangerview.</Doc>
<Value>Live.Song.Song.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Song.Song._live_ptr<Description>Value</Description></Value>
<Value>Live.Song.Song.add_appointed_device_listener()<Description>Value</Description></Value>
<Doc>add_appointed_device_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "appointed_device" has changed. C++ signature :  void add_appointed_device_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_arrangement_overdub_listener()<Description>Value</Description></Value>
<Doc>add_arrangement_overdub_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "arrangement_overdub" has changed. C++ signature :  void add_arrangement_overdub_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_back_to_arranger_listener()<Description>Value</Description></Value>
<Doc>add_back_to_arranger_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "back_to_arranger" has changed. C++ signature :  void add_back_to_arranger_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_can_capture_midi_listener()<Description>Value</Description></Value>
<Doc>add_can_capture_midi_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "can_capture_midi" has changed. C++ signature :  void add_can_capture_midi_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_can_jump_to_next_cue_listener()<Description>Value</Description></Value>
<Doc>add_can_jump_to_next_cue_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "can_jump_to_next_cue" has changed. C++ signature :  void add_can_jump_to_next_cue_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_can_jump_to_prev_cue_listener()<Description>Value</Description></Value>
<Doc>add_can_jump_to_prev_cue_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "can_jump_to_prev_cue" has changed. C++ signature :  void add_can_jump_to_prev_cue_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_clip_trigger_quantization_listener()<Description>Value</Description></Value>
<Doc>add_clip_trigger_quantization_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "clip_trigger_quantization" has changed. C++ signature :  void add_clip_trigger_quantization_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_count_in_duration_listener()<Description>Value</Description></Value>
<Doc>add_count_in_duration_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "count_in_duration" has changed. C++ signature :  void add_count_in_duration_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_cue_points_listener()<Description>Value</Description></Value>
<Doc>add_cue_points_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "cue_points" has changed. C++ signature :  void add_cue_points_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_current_song_time_listener()<Description>Value</Description></Value>
<Doc>add_current_song_time_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "current_song_time" has changed. C++ signature :  void add_current_song_time_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_data_listener()<Description>Value</Description></Value>
<Doc>add_data_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "data" has changed. C++ signature :  void add_data_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_exclusive_arm_listener()<Description>Value</Description></Value>
<Doc>add_exclusive_arm_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "exclusive_arm" has changed. C++ signature :  void add_exclusive_arm_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_groove_amount_listener()<Description>Value</Description></Value>
<Doc>add_groove_amount_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "groove_amount" has changed. C++ signature :  void add_groove_amount_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_is_ableton_link_enabled_listener()<Description>Value</Description></Value>
<Doc>add_is_ableton_link_enabled_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_ableton_link_enabled" has changed. C++ signature :  void add_is_ableton_link_enabled_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_is_ableton_link_start_stop_sync_enabled_listener()<Description>Value</Description></Value>
<Doc>add_is_ableton_link_start_stop_sync_enabled_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_ableton_link_start_stop_sync_enabled" has changed. C++ signature :  void add_is_ableton_link_start_stop_sync_enabled_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_is_counting_in_listener()<Description>Value</Description></Value>
<Doc>add_is_counting_in_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_counting_in" has changed. C++ signature :  void add_is_counting_in_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_is_playing_listener()<Description>Value</Description></Value>
<Doc>add_is_playing_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_playing" has changed. C++ signature :  void add_is_playing_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_loop_length_listener()<Description>Value</Description></Value>
<Doc>add_loop_length_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "loop_length" has changed. C++ signature :  void add_loop_length_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_loop_listener()<Description>Value</Description></Value>
<Doc>add_loop_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "loop" has changed. C++ signature :  void add_loop_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_loop_start_listener()<Description>Value</Description></Value>
<Doc>add_loop_start_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "loop_start" has changed. C++ signature :  void add_loop_start_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_metronome_listener()<Description>Value</Description></Value>
<Doc>add_metronome_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "metronome" has changed. C++ signature :  void add_metronome_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_midi_recording_quantization_listener()<Description>Value</Description></Value>
<Doc>add_midi_recording_quantization_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "midi_recording_quantization" has changed. C++ signature :  void add_midi_recording_quantization_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_nudge_down_listener()<Description>Value</Description></Value>
<Doc>add_nudge_down_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "nudge_down" has changed. C++ signature :  void add_nudge_down_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_nudge_up_listener()<Description>Value</Description></Value>
<Doc>add_nudge_up_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "nudge_up" has changed. C++ signature :  void add_nudge_up_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_overdub_listener()<Description>Value</Description></Value>
<Doc>add_overdub_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "overdub" has changed. C++ signature :  void add_overdub_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_punch_in_listener()<Description>Value</Description></Value>
<Doc>add_punch_in_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "punch_in" has changed. C++ signature :  void add_punch_in_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_punch_out_listener()<Description>Value</Description></Value>
<Doc>add_punch_out_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "punch_out" has changed. C++ signature :  void add_punch_out_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_re_enable_automation_enabled_listener()<Description>Value</Description></Value>
<Doc>add_re_enable_automation_enabled_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "re_enable_automation_enabled" has changed. C++ signature :  void add_re_enable_automation_enabled_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_record_mode_listener()<Description>Value</Description></Value>
<Doc>add_record_mode_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "record_mode" has changed. C++ signature :  void add_record_mode_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_return_tracks_listener()<Description>Value</Description></Value>
<Doc>add_return_tracks_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "return_tracks" has changed. C++ signature :  void add_return_tracks_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_root_note_listener()<Description>Value</Description></Value>
<Doc>add_root_note_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "root_note" has changed. C++ signature :  void add_root_note_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_scale_information_listener()<Description>Value</Description></Value>
<Doc>add_scale_information_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "scale_information" has changed. C++ signature :  void add_scale_information_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_scale_intervals_listener()<Description>Value</Description></Value>
<Doc>add_scale_intervals_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "scale_intervals" has changed. C++ signature :  void add_scale_intervals_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_scale_mode_listener()<Description>Value</Description></Value>
<Doc>add_scale_mode_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "scale_mode" has changed. C++ signature :  void add_scale_mode_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_scale_name_listener()<Description>Value</Description></Value>
<Doc>add_scale_name_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "scale_name" has changed. C++ signature :  void add_scale_name_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_scenes_listener()<Description>Value</Description></Value>
<Doc>add_scenes_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "scenes" has changed. C++ signature :  void add_scenes_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_session_automation_record_listener()<Description>Value</Description></Value>
<Doc>add_session_automation_record_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "session_automation_record" has changed. C++ signature :  void add_session_automation_record_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_session_record_listener()<Description>Value</Description></Value>
<Doc>add_session_record_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "session_record" has changed. C++ signature :  void add_session_record_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_session_record_status_listener()<Description>Value</Description></Value>
<Doc>add_session_record_status_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "session_record_status" has changed. C++ signature :  void add_session_record_status_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_signature_denominator_listener()<Description>Value</Description></Value>
<Doc>add_signature_denominator_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "signature_denominator" has changed. C++ signature :  void add_signature_denominator_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_signature_numerator_listener()<Description>Value</Description></Value>
<Doc>add_signature_numerator_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "signature_numerator" has changed. C++ signature :  void add_signature_numerator_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_song_length_listener()<Description>Value</Description></Value>
<Doc>add_song_length_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "song_length" has changed. C++ signature :  void add_song_length_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_start_time_listener()<Description>Value</Description></Value>
<Doc>add_start_time_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "start_time" has changed. C++ signature :  void add_start_time_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_swing_amount_listener()<Description>Value</Description></Value>
<Doc>add_swing_amount_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "swing_amount" has changed. C++ signature :  void add_swing_amount_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_tempo_follower_enabled_listener()<Description>Value</Description></Value>
<Doc>add_tempo_follower_enabled_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "tempo_follower_enabled" has changed. C++ signature :  void add_tempo_follower_enabled_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_tempo_listener()<Description>Value</Description></Value>
<Doc>add_tempo_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "tempo" has changed. C++ signature :  void add_tempo_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_tracks_listener()<Description>Value</Description></Value>
<Doc>add_tracks_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "tracks" has changed. C++ signature :  void add_tracks_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_tuning_system_listener()<Description>Value</Description></Value>
<Doc>add_tuning_system_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "tuning_system" has changed. C++ signature :  void add_tuning_system_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.add_visible_tracks_listener()<Description>Value</Description></Value>
<Doc>add_visible_tracks_listener( (Song)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "visible_tracks" has changed. C++ signature :  void add_visible_tracks_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.appointed_device<Description>Value</Description></Value>
<Doc>Read, write, and listen access to the appointed Device</Doc>
<Value>Live.Song.Song.appointed_device_has_listener()<Description>Value</Description></Value>
<Doc>appointed_device_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "appointed_device". C++ signature :  bool appointed_device_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.arrangement_overdub<Description>Value</Description></Value>
<Doc>Get/Set the global arrangement overdub state.</Doc>
<Value>Live.Song.Song.arrangement_overdub_has_listener()<Description>Value</Description></Value>
<Doc>arrangement_overdub_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "arrangement_overdub". C++ signature :  bool arrangement_overdub_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.back_to_arranger<Description>Value</Description></Value>
<Doc>Get/Set if triggering a Clip in the Session, disabled the playback ofClips in the Arranger.</Doc>
<Value>Live.Song.Song.back_to_arranger_has_listener()<Description>Value</Description></Value>
<Doc>back_to_arranger_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "back_to_arranger". C++ signature :  bool back_to_arranger_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.begin_undo_step()<Description>Value</Description></Value>
<Doc>begin_undo_step( (Song)arg1) -&gt; None : C++ signature :  void begin_undo_step(TPyHandle&lt;ASong&gt;)</Doc>
<Value>Live.Song.Song.can_capture_midi<Description>Value</Description></Value>
<Doc>Get whether there currently is material to be captured on any tracks.</Doc>
<Value>Live.Song.Song.can_capture_midi_has_listener()<Description>Value</Description></Value>
<Doc>can_capture_midi_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "can_capture_midi". C++ signature :  bool can_capture_midi_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.can_jump_to_next_cue<Description>Value</Description></Value>
<Doc>Returns true when there is a cue marker right to the playing pos thatwe could jump to.</Doc>
<Value>Live.Song.Song.can_jump_to_next_cue_has_listener()<Description>Value</Description></Value>
<Doc>can_jump_to_next_cue_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "can_jump_to_next_cue". C++ signature :  bool can_jump_to_next_cue_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.can_jump_to_prev_cue<Description>Value</Description></Value>
<Doc>Returns true when there is a cue marker left to the playing pos thatwe could jump to.</Doc>
<Value>Live.Song.Song.can_jump_to_prev_cue_has_listener()<Description>Value</Description></Value>
<Doc>can_jump_to_prev_cue_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "can_jump_to_prev_cue". C++ signature :  bool can_jump_to_prev_cue_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.can_redo<Description>Value</Description></Value>
<Doc>Returns true if there is an undone action that we can redo.</Doc>
<Value>Live.Song.Song.can_undo<Description>Value</Description></Value>
<Doc>Returns true if there is an action that we can restore.</Doc>
<Value>Live.Song.Song.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the song.</Doc>
<Value>Live.Song.Song.capture_and_insert_scene()<Description>Value</Description></Value>
<Doc>capture_and_insert_scene( (Song)arg1 [, (int)CaptureMode=Song.CaptureMode.all]) -&gt; None : Capture currently playing clips and insert them as a new scene after the selected scene. Raises a runtime error if creating a new scene would exceed the limitations. C++ signature :  void capture_and_insert_scene(TPyHandle&lt;ASong&gt; [,int=Song.CaptureMode.all])</Doc>
<Value>Live.Song.Song.capture_midi()<Description>Value</Description></Value>
<Doc>capture_midi( (Song)arg1 [, (int)Destination=Song.CaptureDestination.auto]) -&gt; None : Capture recently played MIDI material from audible tracks. If no Destination is given or Destination is set to CaptureDestination.auto, the captured material is inserted into the Session or Arrangement depending on which is visible. If Destination is set to CaptureDestination.session or CaptureDestination.arrangement, inserts the material into Session or Arrangement, respectively. Raises a limitation error when capturing into the Session and a new scene would have to be created but can't because it would exceed the limitations. C++ signature :  void capture_midi(TPyHandle&lt;ASong&gt; [,int=Song.CaptureDestination.auto])</Doc>
<Value>Live.Song.Song.clip_trigger_quantization<Description>Value</Description></Value>
<Doc>Get/Set access to the quantization settings that are used to fireClips in the Session.</Doc>
<Value>Live.Song.Song.clip_trigger_quantization_has_listener()<Description>Value</Description></Value>
<Doc>clip_trigger_quantization_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "clip_trigger_quantization". C++ signature :  bool clip_trigger_quantization_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.continue_playing()<Description>Value</Description></Value>
<Doc>continue_playing( (Song)arg1) -&gt; None : Continue playing the song from the current position C++ signature :  void continue_playing(TPyHandle&lt;ASong&gt;)</Doc>
<Value>Live.Song.Song.count_in_duration<Description>Value</Description></Value>
<Doc>Get the count in duration. Returns an index, mapped as follows: 0 - None, 1 - 1 Bar, 2 - 2 Bars, 3 - 4 Bars.</Doc>
<Value>Live.Song.Song.count_in_duration_has_listener()<Description>Value</Description></Value>
<Doc>count_in_duration_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "count_in_duration". C++ signature :  bool count_in_duration_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.create_audio_track()<Description>Value</Description></Value>
<Doc>create_audio_track( (Song)arg1 [, (object)Index=None]) -&gt; Track : Create a new audio track at the optional given index and return it.If the index is -1, the new track is added at the end. It will create a default audio track if possible. If the index is invalid or the new track would exceed the limitations, a limitation error is raised.If the index is missing, the track is created after the last selected item C++ signature :  TWeakPtr&lt;TTrackPyHandle&gt; create_audio_track(TPyHandle&lt;ASong&gt; [,boost::python::api::object=None])</Doc>
<Value>Live.Song.Song.create_midi_track()<Description>Value</Description></Value>
<Doc>create_midi_track( (Song)arg1 [, (object)Index=None]) -&gt; Track : Create a new midi track at the optional given index and return it.If the index is -1,  the new track is added at the end.It will create a default midi track if possible. If the index is invalid or the new track would exceed the limitations, a limitation error is raised.If the index is missing, the track is created after the last selected item C++ signature :  TWeakPtr&lt;TTrackPyHandle&gt; create_midi_track(TPyHandle&lt;ASong&gt; [,boost::python::api::object=None])</Doc>
<Value>Live.Song.Song.create_return_track()<Description>Value</Description></Value>
<Doc>create_return_track( (Song)arg1) -&gt; Track : Create a new return track at the end and return it. If the new track would exceed  the limitations, a limitation error is raised.  If the maximum number of return tracks is exceeded, a RuntimeError is raised. C++ signature :  TWeakPtr&lt;TTrackPyHandle&gt; create_return_track(TPyHandle&lt;ASong&gt;)</Doc>
<Value>Live.Song.Song.create_scene()<Description>Value</Description></Value>
<Doc>create_scene( (Song)arg1, (int)arg2) -&gt; Scene : Create a new scene at the given index. If the index is -1, the new scene is added at the end. If the index is invalid or the new scene would exceed the limitations, a limitation error is raised. C++ signature :  TWeakPtr&lt;TPyHandle&lt;AScene&gt;&gt; create_scene(TPyHandle&lt;ASong&gt;,int)</Doc>
<Value>Live.Song.Song.cue_points<Description>Value</Description></Value>
<Doc>Const access to a list of all cue points of the Live Song.</Doc>
<Value>Live.Song.Song.cue_points_has_listener()<Description>Value</Description></Value>
<Doc>cue_points_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "cue_points". C++ signature :  bool cue_points_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.current_song_time<Description>Value</Description></Value>
<Doc>Get/Set access to the songs current playing position in beats.</Doc>
<Value>Live.Song.Song.current_song_time_has_listener()<Description>Value</Description></Value>
<Doc>current_song_time_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "current_song_time". C++ signature :  bool current_song_time_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.data_has_listener()<Description>Value</Description></Value>
<Doc>data_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "data". C++ signature :  bool data_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.delete_return_track()<Description>Value</Description></Value>
<Doc>delete_return_track( (Song)arg1, (int)arg2) -&gt; None : Delete the return track with the given index. If no track with this index exists, an exception will be raised. C++ signature :  void delete_return_track(TPyHandle&lt;ASong&gt;,int)</Doc>
<Value>Live.Song.Song.delete_scene()<Description>Value</Description></Value>
<Doc>delete_scene( (Song)arg1, (int)arg2) -&gt; None : Delete the scene with the given index. If no scene with this index exists, an exception will be raised. C++ signature :  void delete_scene(TPyHandle&lt;ASong&gt;,int)</Doc>
<Value>Live.Song.Song.delete_track()<Description>Value</Description></Value>
<Doc>delete_track( (Song)arg1, (int)arg2) -&gt; None : Delete the track with the given index. If no track with this index exists, an exception will be raised. C++ signature :  void delete_track(TPyHandle&lt;ASong&gt;,int)</Doc>
<Value>Live.Song.Song.duplicate_scene()<Description>Value</Description></Value>
<Doc>duplicate_scene( (Song)arg1, (int)arg2) -&gt; None : Duplicates a scene and selects the new one. Raises a limitation error if creating a new scene would exceed the limitations. C++ signature :  void duplicate_scene(TPyHandle&lt;ASong&gt;,int)</Doc>
<Value>Live.Song.Song.duplicate_track()<Description>Value</Description></Value>
<Doc>duplicate_track( (Song)arg1, (int)arg2) -&gt; None : Duplicates a track and selects the new one. If the track is inside a folded group track, the group track is unfolded. Raises a limitation error if creating a new track would exceed the limitations. C++ signature :  void duplicate_track(TPyHandle&lt;ASong&gt;,int)</Doc>
<Value>Live.Song.Song.end_undo_step()<Description>Value</Description></Value>
<Doc>end_undo_step( (Song)arg1) -&gt; None : C++ signature :  void end_undo_step(TPyHandle&lt;ASong&gt;)</Doc>
<Value>Live.Song.Song.exclusive_arm<Description>Value</Description></Value>
<Doc>Get if Tracks should be armed exclusively by default.</Doc>
<Value>Live.Song.Song.exclusive_arm_has_listener()<Description>Value</Description></Value>
<Doc>exclusive_arm_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "exclusive_arm". C++ signature :  bool exclusive_arm_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.exclusive_solo<Description>Value</Description></Value>
<Doc>Get if Tracks should be soloed exclusively by default.</Doc>
<Value>Live.Song.Song.file_path<Description>Value</Description></Value>
<Doc>Get the current Live Set's path on disk.</Doc>
<Value>Live.Song.Song.find_device_position()<Description>Value</Description></Value>
<Doc>find_device_position( (Song)arg1, (Device)device, (LomObject)target, (int)target_position) -&gt; int : Returns the closest possible position to the given target, where the device can be inserted. If inserting is not possible at all (i.e. if the device type is wrong), -1 is returned. C++ signature :  int find_device_position(TPyHandle&lt;ASong&gt;,TPyHandle&lt;ADevice&gt;,TPyHandleBase,int)</Doc>
<Value>Live.Song.Song.force_link_beat_time()<Description>Value</Description></Value>
<Doc>force_link_beat_time( (Song)arg1) -&gt; None : Force the Link timeline to jump to Lives current beat time. Danger: This can cause beat time discontinuities in other connected apps. C++ signature :  void force_link_beat_time(TPyHandle&lt;ASong&gt;)</Doc>
<Value>Live.Song.Song.get_beats_loop_length()<Description>Value</Description></Value>
<Doc>get_beats_loop_length( (Song)arg1) -&gt; BeatTime : Get const access to the songs loop length, using a BeatTime class with the current global set signature. C++ signature :  NSongApi::TBeatTime get_beats_loop_length(TPyHandle&lt;ASong&gt;)</Doc>
<Value>Live.Song.Song.get_beats_loop_start()<Description>Value</Description></Value>
<Doc>get_beats_loop_start( (Song)arg1) -&gt; BeatTime : Get const access to the songs loop start, using a BeatTime class with the current global set signature. C++ signature :  NSongApi::TBeatTime get_beats_loop_start(TPyHandle&lt;ASong&gt;)</Doc>
<Value>Live.Song.Song.get_current_beats_song_time()<Description>Value</Description></Value>
<Doc>get_current_beats_song_time( (Song)arg1) -&gt; BeatTime : Get const access to the songs current playing position, using a BeatTime class with the current global set signature. C++ signature :  NSongApi::TBeatTime get_current_beats_song_time(TPyHandle&lt;ASong&gt;)</Doc>
<Value>Live.Song.Song.get_current_smpte_song_time()<Description>Value</Description></Value>
<Doc>get_current_smpte_song_time( (Song)arg1, (int)arg2) -&gt; SmptTime : Get const access to the songs current playing position, by specifying the SMPTE format in which you would like to receive the time. C++ signature :  NSongApi::TSmptTime get_current_smpte_song_time(TPyHandle&lt;ASong&gt;,int)</Doc>
<Value>Live.Song.Song.get_data()<Description>Value</Description></Value>
<Doc>get_data( (Song)arg1, (object)key, (object)default_value) -&gt; object : Get data for the given key, that was previously stored using set_data. C++ signature :  boost::python::api::object get_data(TPyHandle&lt;ASong&gt;,TString,boost::python::api::object)</Doc>
<Value>Live.Song.Song.groove_amount<Description>Value</Description></Value>
<Doc>Get/Set the global groove amount, that adjust all setup groovesin all clips.</Doc>
<Value>Live.Song.Song.groove_amount_has_listener()<Description>Value</Description></Value>
<Doc>groove_amount_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "groove_amount". C++ signature :  bool groove_amount_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.groove_pool<Description>Value</Description></Value>
<Doc>Get the groove pool.</Doc>
<Value>Live.Song.Song.is_ableton_link_enabled<Description>Value</Description></Value>
<Doc>Enable/disable Ableton Link.</Doc>
<Value>Live.Song.Song.is_ableton_link_enabled_has_listener()<Description>Value</Description></Value>
<Doc>is_ableton_link_enabled_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_ableton_link_enabled". C++ signature :  bool is_ableton_link_enabled_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.is_ableton_link_start_stop_sync_enabled<Description>Value</Description></Value>
<Doc>Enable/disable Ableton Link Start Stop Sync.</Doc>
<Value>Live.Song.Song.is_ableton_link_start_stop_sync_enabled_has_listener()<Description>Value</Description></Value>
<Doc>is_ableton_link_start_stop_sync_enabled_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_ableton_link_start_stop_sync_enabled". C++ signature :  bool is_ableton_link_start_stop_sync_enabled_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.is_counting_in<Description>Value</Description></Value>
<Doc>Get whether currently counting in.</Doc>
<Value>Live.Song.Song.is_counting_in_has_listener()<Description>Value</Description></Value>
<Doc>is_counting_in_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_counting_in". C++ signature :  bool is_counting_in_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.is_cue_point_selected()<Description>Value</Description></Value>
<Doc>is_cue_point_selected( (Song)arg1) -&gt; bool : Return true if the global playing pos is currently on a cue point. C++ signature :  bool is_cue_point_selected(TPyHandle&lt;ASong&gt;)</Doc>
<Value>Live.Song.Song.is_playing<Description>Value</Description></Value>
<Doc>Returns true if the Song is currently playing.</Doc>
<Value>Live.Song.Song.is_playing_has_listener()<Description>Value</Description></Value>
<Doc>is_playing_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_playing". C++ signature :  bool is_playing_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.jump_by()<Description>Value</Description></Value>
<Doc>jump_by( (Song)arg1, (float)arg2) -&gt; None : Set a new playing pos, relative to the current one. C++ signature :  void jump_by(TPyHandle&lt;ASong&gt;,double)</Doc>
<Value>Live.Song.Song.jump_to_next_cue()<Description>Value</Description></Value>
<Doc>jump_to_next_cue( (Song)arg1) -&gt; None : Jump to the next cue (marker) if possible. C++ signature :  void jump_to_next_cue(TPyHandle&lt;ASong&gt;)</Doc>
<Value>Live.Song.Song.jump_to_prev_cue()<Description>Value</Description></Value>
<Doc>jump_to_prev_cue( (Song)arg1) -&gt; None : Jump to the prior cue (marker) if possible. C++ signature :  void jump_to_prev_cue(TPyHandle&lt;ASong&gt;)</Doc>
<Value>Live.Song.Song.last_event_time<Description>Value</Description></Value>
<Doc>Return the time of the last set event in the song. In contrary tosong_length, this will not add some extra beats that are mostly neededfor Display purposes in the Arrangerview.</Doc>
<Value>Live.Song.Song.loop<Description>Value</Description></Value>
<Doc>Get/Set the looping flag that en/disables the usage of the globalloop markers in the song.</Doc>
<Value>Live.Song.Song.loop_has_listener()<Description>Value</Description></Value>
<Doc>loop_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "loop". C++ signature :  bool loop_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.loop_length<Description>Value</Description></Value>
<Doc>Get/Set the length of the global loop marker position in beats.</Doc>
<Value>Live.Song.Song.loop_length_has_listener()<Description>Value</Description></Value>
<Doc>loop_length_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "loop_length". C++ signature :  bool loop_length_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.loop_start<Description>Value</Description></Value>
<Doc>Get/Set the start of the global loop marker position in beats.</Doc>
<Value>Live.Song.Song.loop_start_has_listener()<Description>Value</Description></Value>
<Doc>loop_start_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "loop_start". C++ signature :  bool loop_start_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.master_track<Description>Value</Description></Value>
<Doc>Access to the Main Track (always available)</Doc>
<Value>Live.Song.Song.metronome<Description>Value</Description></Value>
<Doc>Get/Set if the metronom is audible.</Doc>
<Value>Live.Song.Song.metronome_has_listener()<Description>Value</Description></Value>
<Doc>metronome_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "metronome". C++ signature :  bool metronome_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.midi_recording_quantization<Description>Value</Description></Value>
<Doc>Get/Set access to the settings that are used to quantizeMIDI recordings.</Doc>
<Value>Live.Song.Song.midi_recording_quantization_has_listener()<Description>Value</Description></Value>
<Doc>midi_recording_quantization_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "midi_recording_quantization". C++ signature :  bool midi_recording_quantization_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.move_device()<Description>Value</Description></Value>
<Doc>move_device( (Song)arg1, (Device)device, (LomObject)target, (int)target_position) -&gt; int : Move a device into the target at the given position, where 0 moves it before the first device and len(devices) moves it to the end of the device chain.If the device cannot be moved to this position, the nearest possible position is chosen. If the device type is not valid, a runtime error is raised.Returns the index, where the device was moved to. C++ signature :  int move_device(TPyHandle&lt;ASong&gt;,TPyHandle&lt;ADevice&gt;,TPyHandleBase,int)</Doc>
<Value>Live.Song.Song.name<Description>Value</Description></Value>
<Doc>Get the current Live Set's name.</Doc>
<Value>Live.Song.Song.nudge_down<Description>Value</Description></Value>
<Doc>Get/Set the status of the nudge down button.</Doc>
<Value>Live.Song.Song.nudge_down_has_listener()<Description>Value</Description></Value>
<Doc>nudge_down_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "nudge_down". C++ signature :  bool nudge_down_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.nudge_up<Description>Value</Description></Value>
<Doc>Get/Set the status of the nudge up button.</Doc>
<Value>Live.Song.Song.nudge_up_has_listener()<Description>Value</Description></Value>
<Doc>nudge_up_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "nudge_up". C++ signature :  bool nudge_up_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.overdub<Description>Value</Description></Value>
<Doc>Legacy hook for Live 8 overdub state. Now hooks tosession record, but never starts playback.</Doc>
<Value>Live.Song.Song.overdub_has_listener()<Description>Value</Description></Value>
<Doc>overdub_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "overdub". C++ signature :  bool overdub_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.play_selection()<Description>Value</Description></Value>
<Doc>play_selection( (Song)arg1) -&gt; None : Start playing the current set selection, or do nothing if no selection is set. C++ signature :  void play_selection(TPyHandle&lt;ASong&gt;)</Doc>
<Value>Live.Song.Song.punch_in<Description>Value</Description></Value>
<Doc>Get/Set the flag that will enable recording as soon as the Song playsand hits the global loop start region.</Doc>
<Value>Live.Song.Song.punch_in_has_listener()<Description>Value</Description></Value>
<Doc>punch_in_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "punch_in". C++ signature :  bool punch_in_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.punch_out<Description>Value</Description></Value>
<Doc>Get/Set the flag that will disable recording as soon as the Song playsand hits the global loop end region.</Doc>
<Value>Live.Song.Song.punch_out_has_listener()<Description>Value</Description></Value>
<Doc>punch_out_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "punch_out". C++ signature :  bool punch_out_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.re_enable_automation()<Description>Value</Description></Value>
<Doc>re_enable_automation( (Song)arg1) -&gt; None : Discards overrides of automated parameters. C++ signature :  void re_enable_automation(TPyHandle&lt;ASong&gt;)</Doc>
<Value>Live.Song.Song.re_enable_automation_enabled<Description>Value</Description></Value>
<Doc>Returns true if some automated parameter has been overriden</Doc>
<Value>Live.Song.Song.re_enable_automation_enabled_has_listener()<Description>Value</Description></Value>
<Doc>re_enable_automation_enabled_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "re_enable_automation_enabled". C++ signature :  bool re_enable_automation_enabled_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.record_mode<Description>Value</Description></Value>
<Doc>Get/Set the state of the global recording flag.</Doc>
<Value>Live.Song.Song.record_mode_has_listener()<Description>Value</Description></Value>
<Doc>record_mode_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "record_mode". C++ signature :  bool record_mode_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.redo()<Description>Value</Description></Value>
<Doc>redo( (Song)arg1) -&gt; str : Redo the last action that was undone. C++ signature :  TString redo(TPyHandle&lt;ASong&gt;)</Doc>
<Value>Live.Song.Song.remove_appointed_device_listener()<Description>Value</Description></Value>
<Doc>remove_appointed_device_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "appointed_device". C++ signature :  void remove_appointed_device_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_arrangement_overdub_listener()<Description>Value</Description></Value>
<Doc>remove_arrangement_overdub_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "arrangement_overdub". C++ signature :  void remove_arrangement_overdub_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_back_to_arranger_listener()<Description>Value</Description></Value>
<Doc>remove_back_to_arranger_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "back_to_arranger". C++ signature :  void remove_back_to_arranger_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_can_capture_midi_listener()<Description>Value</Description></Value>
<Doc>remove_can_capture_midi_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "can_capture_midi". C++ signature :  void remove_can_capture_midi_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_can_jump_to_next_cue_listener()<Description>Value</Description></Value>
<Doc>remove_can_jump_to_next_cue_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "can_jump_to_next_cue". C++ signature :  void remove_can_jump_to_next_cue_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_can_jump_to_prev_cue_listener()<Description>Value</Description></Value>
<Doc>remove_can_jump_to_prev_cue_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "can_jump_to_prev_cue". C++ signature :  void remove_can_jump_to_prev_cue_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_clip_trigger_quantization_listener()<Description>Value</Description></Value>
<Doc>remove_clip_trigger_quantization_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "clip_trigger_quantization". C++ signature :  void remove_clip_trigger_quantization_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_count_in_duration_listener()<Description>Value</Description></Value>
<Doc>remove_count_in_duration_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "count_in_duration". C++ signature :  void remove_count_in_duration_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_cue_points_listener()<Description>Value</Description></Value>
<Doc>remove_cue_points_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "cue_points". C++ signature :  void remove_cue_points_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_current_song_time_listener()<Description>Value</Description></Value>
<Doc>remove_current_song_time_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "current_song_time". C++ signature :  void remove_current_song_time_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_data_listener()<Description>Value</Description></Value>
<Doc>remove_data_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "data". C++ signature :  void remove_data_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_exclusive_arm_listener()<Description>Value</Description></Value>
<Doc>remove_exclusive_arm_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "exclusive_arm". C++ signature :  void remove_exclusive_arm_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_groove_amount_listener()<Description>Value</Description></Value>
<Doc>remove_groove_amount_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "groove_amount". C++ signature :  void remove_groove_amount_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_is_ableton_link_enabled_listener()<Description>Value</Description></Value>
<Doc>remove_is_ableton_link_enabled_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_ableton_link_enabled". C++ signature :  void remove_is_ableton_link_enabled_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_is_ableton_link_start_stop_sync_enabled_listener()<Description>Value</Description></Value>
<Doc>remove_is_ableton_link_start_stop_sync_enabled_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_ableton_link_start_stop_sync_enabled". C++ signature :  void remove_is_ableton_link_start_stop_sync_enabled_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_is_counting_in_listener()<Description>Value</Description></Value>
<Doc>remove_is_counting_in_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_counting_in". C++ signature :  void remove_is_counting_in_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_is_playing_listener()<Description>Value</Description></Value>
<Doc>remove_is_playing_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_playing". C++ signature :  void remove_is_playing_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_loop_length_listener()<Description>Value</Description></Value>
<Doc>remove_loop_length_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "loop_length". C++ signature :  void remove_loop_length_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_loop_listener()<Description>Value</Description></Value>
<Doc>remove_loop_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "loop". C++ signature :  void remove_loop_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_loop_start_listener()<Description>Value</Description></Value>
<Doc>remove_loop_start_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "loop_start". C++ signature :  void remove_loop_start_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_metronome_listener()<Description>Value</Description></Value>
<Doc>remove_metronome_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "metronome". C++ signature :  void remove_metronome_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_midi_recording_quantization_listener()<Description>Value</Description></Value>
<Doc>remove_midi_recording_quantization_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "midi_recording_quantization". C++ signature :  void remove_midi_recording_quantization_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_nudge_down_listener()<Description>Value</Description></Value>
<Doc>remove_nudge_down_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "nudge_down". C++ signature :  void remove_nudge_down_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_nudge_up_listener()<Description>Value</Description></Value>
<Doc>remove_nudge_up_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "nudge_up". C++ signature :  void remove_nudge_up_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_overdub_listener()<Description>Value</Description></Value>
<Doc>remove_overdub_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "overdub". C++ signature :  void remove_overdub_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_punch_in_listener()<Description>Value</Description></Value>
<Doc>remove_punch_in_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "punch_in". C++ signature :  void remove_punch_in_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_punch_out_listener()<Description>Value</Description></Value>
<Doc>remove_punch_out_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "punch_out". C++ signature :  void remove_punch_out_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_re_enable_automation_enabled_listener()<Description>Value</Description></Value>
<Doc>remove_re_enable_automation_enabled_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "re_enable_automation_enabled". C++ signature :  void remove_re_enable_automation_enabled_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_record_mode_listener()<Description>Value</Description></Value>
<Doc>remove_record_mode_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "record_mode". C++ signature :  void remove_record_mode_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_return_tracks_listener()<Description>Value</Description></Value>
<Doc>remove_return_tracks_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "return_tracks". C++ signature :  void remove_return_tracks_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_root_note_listener()<Description>Value</Description></Value>
<Doc>remove_root_note_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "root_note". C++ signature :  void remove_root_note_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_scale_information_listener()<Description>Value</Description></Value>
<Doc>remove_scale_information_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "scale_information". C++ signature :  void remove_scale_information_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_scale_intervals_listener()<Description>Value</Description></Value>
<Doc>remove_scale_intervals_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "scale_intervals". C++ signature :  void remove_scale_intervals_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_scale_mode_listener()<Description>Value</Description></Value>
<Doc>remove_scale_mode_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "scale_mode". C++ signature :  void remove_scale_mode_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_scale_name_listener()<Description>Value</Description></Value>
<Doc>remove_scale_name_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "scale_name". C++ signature :  void remove_scale_name_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_scenes_listener()<Description>Value</Description></Value>
<Doc>remove_scenes_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "scenes". C++ signature :  void remove_scenes_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_session_automation_record_listener()<Description>Value</Description></Value>
<Doc>remove_session_automation_record_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "session_automation_record". C++ signature :  void remove_session_automation_record_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_session_record_listener()<Description>Value</Description></Value>
<Doc>remove_session_record_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "session_record". C++ signature :  void remove_session_record_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_session_record_status_listener()<Description>Value</Description></Value>
<Doc>remove_session_record_status_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "session_record_status". C++ signature :  void remove_session_record_status_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_signature_denominator_listener()<Description>Value</Description></Value>
<Doc>remove_signature_denominator_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "signature_denominator". C++ signature :  void remove_signature_denominator_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_signature_numerator_listener()<Description>Value</Description></Value>
<Doc>remove_signature_numerator_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "signature_numerator". C++ signature :  void remove_signature_numerator_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_song_length_listener()<Description>Value</Description></Value>
<Doc>remove_song_length_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "song_length". C++ signature :  void remove_song_length_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_start_time_listener()<Description>Value</Description></Value>
<Doc>remove_start_time_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "start_time". C++ signature :  void remove_start_time_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_swing_amount_listener()<Description>Value</Description></Value>
<Doc>remove_swing_amount_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "swing_amount". C++ signature :  void remove_swing_amount_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_tempo_follower_enabled_listener()<Description>Value</Description></Value>
<Doc>remove_tempo_follower_enabled_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "tempo_follower_enabled". C++ signature :  void remove_tempo_follower_enabled_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_tempo_listener()<Description>Value</Description></Value>
<Doc>remove_tempo_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "tempo". C++ signature :  void remove_tempo_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_tracks_listener()<Description>Value</Description></Value>
<Doc>remove_tracks_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "tracks". C++ signature :  void remove_tracks_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_tuning_system_listener()<Description>Value</Description></Value>
<Doc>remove_tuning_system_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "tuning_system". C++ signature :  void remove_tuning_system_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.remove_visible_tracks_listener()<Description>Value</Description></Value>
<Doc>remove_visible_tracks_listener( (Song)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "visible_tracks". C++ signature :  void remove_visible_tracks_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.return_tracks<Description>Value</Description></Value>
<Doc>Const access to the list of available Return Tracks.</Doc>
<Value>Live.Song.Song.return_tracks_has_listener()<Description>Value</Description></Value>
<Doc>return_tracks_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "return_tracks". C++ signature :  bool return_tracks_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.root_note<Description>Value</Description></Value>
<Doc>Set and access the root (i.e. key) of the song. The root can be a number between 0 and 11, with 0 corresponding to C and 11 corresponding to B.</Doc>
<Value>Live.Song.Song.root_note_has_listener()<Description>Value</Description></Value>
<Doc>root_note_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "root_note". C++ signature :  bool root_note_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.scale_information_has_listener()<Description>Value</Description></Value>
<Doc>scale_information_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "scale_information". C++ signature :  bool scale_information_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.scale_intervals<Description>Value</Description></Value>
<Doc>Reports the current scale's intervals as a list of integers, starting with the root and representing the number of halfsteps (e.g. Major -&gt; 0, 2, 4, 5, 7, 9, 11)</Doc>
<Value>Live.Song.Song.scale_intervals_has_listener()<Description>Value</Description></Value>
<Doc>scale_intervals_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "scale_intervals". C++ signature :  bool scale_intervals_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.scale_mode<Description>Value</Description></Value>
<Doc>Access to the Scale Mode setting in Live. When on, key tracks that belong to the currently selected scale are highlighted in Live's MIDI Note Editor, and pitch-based parameters in MIDI Tools and Devices can be edited in scale degrees rather than semitones.</Doc>
<Value>Live.Song.Song.scale_mode_has_listener()<Description>Value</Description></Value>
<Doc>scale_mode_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "scale_mode". C++ signature :  bool scale_mode_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.scale_name<Description>Value</Description></Value>
<Doc>Set and access the currently selected scale by name. The default scale names that can be saved with a set and recalled are'Major', 'Minor', 'Dorian', 'Mixolydian' ,'Lydian' ,'Phrygian' ,'Locrian', 'Whole Tone', 'Half-whole Dim.', 'Whole-half Dim.', 'Minor Blues', 'Minor Pentatonic', 'Major Pentatonic', 'Harmonic Minor', 'Harmonic Major', 'Dorian #4', 'Phrygian Dominant', 'Melodic Minor', 'Lydian Augmented', 'Lydian Dominant', 'Super Locrian', 'Bhairav', 'Hungarian Minor', '8-Tone Spanish', 'Hirajoshi', 'In-Sen', 'Iwato', 'Kumoi', 'Pelog Selisir', 'Pelog Tembung', 'Messiaen 3', 'Messiaen 4', 'Messiaen 5', 'Messiaen 6', 'Messiaen 7'</Doc>
<Value>Live.Song.Song.scale_name_has_listener()<Description>Value</Description></Value>
<Doc>scale_name_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "scale_name". C++ signature :  bool scale_name_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.scenes<Description>Value</Description></Value>
<Doc>Const access to a list of all Scenes in the Live Song.</Doc>
<Value>Live.Song.Song.scenes_has_listener()<Description>Value</Description></Value>
<Doc>scenes_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "scenes". C++ signature :  bool scenes_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.scrub_by()<Description>Value</Description></Value>
<Doc>scrub_by( (Song)arg1, (float)arg2) -&gt; None : Same as jump_by, but does not stop playback. C++ signature :  void scrub_by(TPyHandle&lt;ASong&gt;,double)</Doc>
<Value>Live.Song.Song.select_on_launch<Description>Value</Description></Value>
<Doc>Get if Scenes and Clips should be selected when fired.</Doc>
<Value>Live.Song.Song.session_automation_record<Description>Value</Description></Value>
<Doc>Returns true if automation recording is enabled.</Doc>
<Value>Live.Song.Song.session_automation_record_has_listener()<Description>Value</Description></Value>
<Doc>session_automation_record_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "session_automation_record". C++ signature :  bool session_automation_record_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.session_record<Description>Value</Description></Value>
<Doc>Get/Set the session record state.</Doc>
<Value>Live.Song.Song.session_record_has_listener()<Description>Value</Description></Value>
<Doc>session_record_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "session_record". C++ signature :  bool session_record_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.session_record_status<Description>Value</Description></Value>
<Doc>Get the session slot-recording state.</Doc>
<Value>Live.Song.Song.session_record_status_has_listener()<Description>Value</Description></Value>
<Doc>session_record_status_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "session_record_status". C++ signature :  bool session_record_status_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.set_data()<Description>Value</Description></Value>
<Doc>set_data( (Song)arg1, (object)key, (object)value) -&gt; None : Store data for the given key in this object. The data is persistent and will be restored when loading the Live Set. C++ signature :  void set_data(TPyHandle&lt;ASong&gt;,TString,boost::python::api::object)</Doc>
<Value>Live.Song.Song.set_or_delete_cue()<Description>Value</Description></Value>
<Doc>set_or_delete_cue( (Song)arg1) -&gt; None : When a cue is selected, it gets deleted. If no cue is selected, a new cue is created at the current global songtime. C++ signature :  void set_or_delete_cue(TPyHandle&lt;ASong&gt;)</Doc>
<Value>Live.Song.Song.signature_denominator<Description>Value</Description></Value>
<Doc>Get/Set access to the global signature denominator of the Song.</Doc>
<Value>Live.Song.Song.signature_denominator_has_listener()<Description>Value</Description></Value>
<Doc>signature_denominator_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "signature_denominator". C++ signature :  bool signature_denominator_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.signature_numerator<Description>Value</Description></Value>
<Doc>Get/Set access to the global signature numerator of the Song.</Doc>
<Value>Live.Song.Song.signature_numerator_has_listener()<Description>Value</Description></Value>
<Doc>signature_numerator_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "signature_numerator". C++ signature :  bool signature_numerator_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.song_length<Description>Value</Description></Value>
<Doc>Return the time of the last set event in the song, plus som extra beatsthat are usually added for better navigation in the arrangerview.</Doc>
<Value>Live.Song.Song.song_length_has_listener()<Description>Value</Description></Value>
<Doc>song_length_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "song_length". C++ signature :  bool song_length_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.start_playing()<Description>Value</Description></Value>
<Doc>start_playing( (Song)arg1) -&gt; None : Start playing from the startmarker C++ signature :  void start_playing(TPyHandle&lt;ASong&gt;)</Doc>
<Value>Live.Song.Song.start_time<Description>Value</Description></Value>
<Doc>Get/Set access to the songs current start time in beats. The set timemay be overridden by the current loop/locator start time.</Doc>
<Value>Live.Song.Song.start_time_has_listener()<Description>Value</Description></Value>
<Doc>start_time_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "start_time". C++ signature :  bool start_time_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.stop_all_clips()<Description>Value</Description></Value>
<Doc>stop_all_clips( (Song)arg1 [, (bool)Quantized=True]) -&gt; None : Stop all playing Clips (if any) but continue playing the Song. C++ signature :  void stop_all_clips(TPyHandle&lt;ASong&gt; [,bool=True])</Doc>
<Value>Live.Song.Song.stop_playing()<Description>Value</Description></Value>
<Doc>stop_playing( (Song)arg1) -&gt; None : Stop playing the Song. C++ signature :  void stop_playing(TPyHandle&lt;ASong&gt;)</Doc>
<Value>Live.Song.Song.swing_amount<Description>Value</Description></Value>
<Doc>Get/Set access to the amount of swing that is applied when adding or quantizing notes to MIDI clips</Doc>
<Value>Live.Song.Song.swing_amount_has_listener()<Description>Value</Description></Value>
<Doc>swing_amount_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "swing_amount". C++ signature :  bool swing_amount_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.tap_tempo()<Description>Value</Description></Value>
<Doc>tap_tempo( (Song)arg1) -&gt; None : Trigger the tap tempo function. C++ signature :  void tap_tempo(TPyHandle&lt;ASong&gt;)</Doc>
<Value>Live.Song.Song.tempo<Description>Value</Description></Value>
<Doc>Get/Set the global project tempo.</Doc>
<Value>Live.Song.Song.tempo_follower_enabled<Description>Value</Description></Value>
<Doc>Get/Set whether the Tempo Follower is controlling the tempo. The Tempo Follower Toggle must be made visible in the preferences for this property to be effective.</Doc>
<Value>Live.Song.Song.tempo_follower_enabled_has_listener()<Description>Value</Description></Value>
<Doc>tempo_follower_enabled_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "tempo_follower_enabled". C++ signature :  bool tempo_follower_enabled_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.tempo_has_listener()<Description>Value</Description></Value>
<Doc>tempo_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "tempo". C++ signature :  bool tempo_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.tracks<Description>Value</Description></Value>
<Doc>Const access to a list of all Player Tracks in the Live Song, excludingthe return and Main Track (see also Song.send_tracks and Song.master_track).At least one MIDI or Audio Track is always available.</Doc>
<Value>Live.Song.Song.tracks_has_listener()<Description>Value</Description></Value>
<Doc>tracks_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "tracks". C++ signature :  bool tracks_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.trigger_session_record()<Description>Value</Description></Value>
<Doc>trigger_session_record( (Song)self [, (float)record_length=1.7976931348623157e+308]) -&gt; None : Triggers a new session recording. C++ signature :  void trigger_session_record(TPyHandle&lt;ASong&gt; [,double=1.7976931348623157e+308])</Doc>
<Value>Live.Song.Song.tuning_system<Description>Value</Description></Value>
<Doc>Access the currently active tuning system.</Doc>
<Value>Live.Song.Song.tuning_system_has_listener()<Description>Value</Description></Value>
<Doc>tuning_system_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "tuning_system". C++ signature :  bool tuning_system_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.undo()<Description>Value</Description></Value>
<Doc>undo( (Song)arg1) -&gt; str : Undo the last action that was made. C++ signature :  TString undo(TPyHandle&lt;ASong&gt;)</Doc>
<Value>Live.Song.Song.view<Description>Value</Description></Value>
<Doc>Representing the view aspects of a Live document: The Session and Arrangerview.</Doc>
<Value>Live.Song.Song.visible_tracks<Description>Value</Description></Value>
<Doc>Const access to a list of all visible Player Tracks in the Live Song, excludingthe return and Main Track (see also Song.send_tracks and Song.master_track).At least one MIDI or Audio Track is always available.</Doc>
<Value>Live.Song.Song.visible_tracks_has_listener()<Description>Value</Description></Value>
<Doc>visible_tracks_has_listener( (Song)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "visible_tracks". C++ signature :  bool visible_tracks_has_listener(TPyHandle&lt;ASong&gt;,boost::python::api::object)</Doc>
<Class>Live.Song.Song.View<Description>Class</Description></Class>
<Doc>Representing the view aspects of a Live document: The Session and Arrangerview.</Doc>
<Built-In>Live.Song.Song.View.add_detail_clip_listener()<Description>Built-In</Description></Built-In>
<Doc>add_detail_clip_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "detail_clip" has changed. C++ signature :  void add_detail_clip_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.View.add_draw_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>add_draw_mode_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "draw_mode" has changed. C++ signature :  void add_draw_mode_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.View.add_follow_song_listener()<Description>Built-In</Description></Built-In>
<Doc>add_follow_song_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "follow_song" has changed. C++ signature :  void add_follow_song_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.View.add_selected_chain_listener()<Description>Built-In</Description></Built-In>
<Doc>add_selected_chain_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "selected_chain" has changed. C++ signature :  void add_selected_chain_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.View.add_selected_parameter_listener()<Description>Built-In</Description></Built-In>
<Doc>add_selected_parameter_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "selected_parameter" has changed. C++ signature :  void add_selected_parameter_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.View.add_selected_scene_listener()<Description>Built-In</Description></Built-In>
<Doc>add_selected_scene_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "selected_scene" has changed. C++ signature :  void add_selected_scene_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.View.add_selected_track_listener()<Description>Built-In</Description></Built-In>
<Doc>add_selected_track_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "selected_track" has changed. C++ signature :  void add_selected_track_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.View.detail_clip_has_listener()<Description>Built-In</Description></Built-In>
<Doc>detail_clip_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "detail_clip". C++ signature :  bool detail_clip_has_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.View.draw_mode_has_listener()<Description>Built-In</Description></Built-In>
<Doc>draw_mode_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "draw_mode". C++ signature :  bool draw_mode_has_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.View.follow_song_has_listener()<Description>Built-In</Description></Built-In>
<Doc>follow_song_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "follow_song". C++ signature :  bool follow_song_has_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.View.remove_detail_clip_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_detail_clip_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "detail_clip". C++ signature :  void remove_detail_clip_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.View.remove_draw_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_draw_mode_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "draw_mode". C++ signature :  void remove_draw_mode_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.View.remove_follow_song_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_follow_song_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "follow_song". C++ signature :  void remove_follow_song_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.View.remove_selected_chain_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_selected_chain_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "selected_chain". C++ signature :  void remove_selected_chain_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.View.remove_selected_parameter_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_selected_parameter_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "selected_parameter". C++ signature :  void remove_selected_parameter_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.View.remove_selected_scene_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_selected_scene_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "selected_scene". C++ signature :  void remove_selected_scene_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.View.remove_selected_track_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_selected_track_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "selected_track". C++ signature :  void remove_selected_track_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.View.select_device()<Description>Built-In</Description></Built-In>
<Doc>select_device( (View)arg1, (Device)arg2 [, (bool)ShouldAppointDevice=True]) -&gt; None : Select the given device. C++ signature :  void select_device(TPyViewData&lt;ASong&gt;,TPyHandle&lt;ADevice&gt; [,bool=True])</Doc>
<Built-In>Live.Song.Song.View.selected_chain_has_listener()<Description>Built-In</Description></Built-In>
<Doc>selected_chain_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "selected_chain". C++ signature :  bool selected_chain_has_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.View.selected_parameter_has_listener()<Description>Built-In</Description></Built-In>
<Doc>selected_parameter_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "selected_parameter". C++ signature :  bool selected_parameter_has_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.View.selected_scene_has_listener()<Description>Built-In</Description></Built-In>
<Doc>selected_scene_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "selected_scene". C++ signature :  bool selected_scene_has_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Song.Song.View.selected_track_has_listener()<Description>Built-In</Description></Built-In>
<Doc>selected_track_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "selected_track". C++ signature :  bool selected_track_has_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.View.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Song.Song.View._live_ptr<Description>Value</Description></Value>
<Value>Live.Song.Song.View.add_detail_clip_listener()<Description>Value</Description></Value>
<Doc>add_detail_clip_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "detail_clip" has changed. C++ signature :  void add_detail_clip_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.View.add_draw_mode_listener()<Description>Value</Description></Value>
<Doc>add_draw_mode_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "draw_mode" has changed. C++ signature :  void add_draw_mode_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.View.add_follow_song_listener()<Description>Value</Description></Value>
<Doc>add_follow_song_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "follow_song" has changed. C++ signature :  void add_follow_song_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.View.add_selected_chain_listener()<Description>Value</Description></Value>
<Doc>add_selected_chain_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "selected_chain" has changed. C++ signature :  void add_selected_chain_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.View.add_selected_parameter_listener()<Description>Value</Description></Value>
<Doc>add_selected_parameter_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "selected_parameter" has changed. C++ signature :  void add_selected_parameter_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.View.add_selected_scene_listener()<Description>Value</Description></Value>
<Doc>add_selected_scene_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "selected_scene" has changed. C++ signature :  void add_selected_scene_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.View.add_selected_track_listener()<Description>Value</Description></Value>
<Doc>add_selected_track_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "selected_track" has changed. C++ signature :  void add_selected_track_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.View.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the song view.</Doc>
<Value>Live.Song.Song.View.detail_clip<Description>Value</Description></Value>
<Doc>Get/Set the Clip that is currently visible in Lives Detailview.</Doc>
<Value>Live.Song.Song.View.detail_clip_has_listener()<Description>Value</Description></Value>
<Doc>detail_clip_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "detail_clip". C++ signature :  bool detail_clip_has_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.View.draw_mode<Description>Value</Description></Value>
<Doc>Get/Set if the Envelope/Note draw mode is enabled.</Doc>
<Value>Live.Song.Song.View.draw_mode_has_listener()<Description>Value</Description></Value>
<Doc>draw_mode_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "draw_mode". C++ signature :  bool draw_mode_has_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.View.follow_song<Description>Value</Description></Value>
<Doc>Get/Set if the Arrangerview should scroll to show the playmarker.</Doc>
<Value>Live.Song.Song.View.follow_song_has_listener()<Description>Value</Description></Value>
<Doc>follow_song_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "follow_song". C++ signature :  bool follow_song_has_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.View.highlighted_clip_slot<Description>Value</Description></Value>
<Doc>Get/Set the clip slot, defined via the selected track and scene in the Session.Will be None for Main- and Sendtracks.</Doc>
<Value>Live.Song.Song.View.remove_detail_clip_listener()<Description>Value</Description></Value>
<Doc>remove_detail_clip_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "detail_clip". C++ signature :  void remove_detail_clip_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.View.remove_draw_mode_listener()<Description>Value</Description></Value>
<Doc>remove_draw_mode_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "draw_mode". C++ signature :  void remove_draw_mode_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.View.remove_follow_song_listener()<Description>Value</Description></Value>
<Doc>remove_follow_song_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "follow_song". C++ signature :  void remove_follow_song_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.View.remove_selected_chain_listener()<Description>Value</Description></Value>
<Doc>remove_selected_chain_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "selected_chain". C++ signature :  void remove_selected_chain_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.View.remove_selected_parameter_listener()<Description>Value</Description></Value>
<Doc>remove_selected_parameter_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "selected_parameter". C++ signature :  void remove_selected_parameter_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.View.remove_selected_scene_listener()<Description>Value</Description></Value>
<Doc>remove_selected_scene_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "selected_scene". C++ signature :  void remove_selected_scene_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.View.remove_selected_track_listener()<Description>Value</Description></Value>
<Doc>remove_selected_track_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "selected_track". C++ signature :  void remove_selected_track_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.View.select_device()<Description>Value</Description></Value>
<Doc>select_device( (View)arg1, (Device)arg2 [, (bool)ShouldAppointDevice=True]) -&gt; None : Select the given device. C++ signature :  void select_device(TPyViewData&lt;ASong&gt;,TPyHandle&lt;ADevice&gt; [,bool=True])</Doc>
<Value>Live.Song.Song.View.selected_chain<Description>Value</Description></Value>
<Doc>Get the highlighted chain if available.</Doc>
<Value>Live.Song.Song.View.selected_chain_has_listener()<Description>Value</Description></Value>
<Doc>selected_chain_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "selected_chain". C++ signature :  bool selected_chain_has_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.View.selected_parameter<Description>Value</Description></Value>
<Doc>Get the currently selected device parameter.</Doc>
<Value>Live.Song.Song.View.selected_parameter_has_listener()<Description>Value</Description></Value>
<Doc>selected_parameter_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "selected_parameter". C++ signature :  bool selected_parameter_has_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.View.selected_scene<Description>Value</Description></Value>
<Doc>Get/Set the current selected scene in Lives Sessionview.</Doc>
<Value>Live.Song.Song.View.selected_scene_has_listener()<Description>Value</Description></Value>
<Doc>selected_scene_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "selected_scene". C++ signature :  bool selected_scene_has_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Value>Live.Song.Song.View.selected_track<Description>Value</Description></Value>
<Doc>Get/Set the current selected Track in Lives Session or Arrangerview.</Doc>
<Value>Live.Song.Song.View.selected_track_has_listener()<Description>Value</Description></Value>
<Doc>selected_track_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "selected_track". C++ signature :  bool selected_track_has_listener(TPyViewData&lt;ASong&gt;,boost::python::api::object)</Doc>
<Class>Live.Song.TimeFormat<Description>Class</Description></Class>
<Built-In>Live.Song.TimeFormat.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Song.TimeFormat.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Song.TimeFormat.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.Song.TimeFormat.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.Song.TimeFormat.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.Song.TimeFormat.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Song.TimeFormat.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.Song.TimeFormat.ms_time<Description>Value</Description></Value>
<Value>Live.Song.TimeFormat.name<Description>Value</Description></Value>
<Value>Live.Song.TimeFormat.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.Song.TimeFormat.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.Song.TimeFormat.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.Song.TimeFormat.smpte_24<Description>Value</Description></Value>
<Value>Live.Song.TimeFormat.smpte_25<Description>Value</Description></Value>
<Value>Live.Song.TimeFormat.smpte_29<Description>Value</Description></Value>
<Value>Live.Song.TimeFormat.smpte_30<Description>Value</Description></Value>
<Value>Live.Song.TimeFormat.smpte_30_drop<Description>Value</Description></Value>
<Value>Live.Song.TimeFormat.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.Song.TimeFormat.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Module>Live.SpectralResonatorDevice<Description>Module</Description></Module>
<Class>Live.SpectralResonatorDevice.SpectralResonatorDevice<Description>Class</Description></Class>
<Doc>This class represents a Spectral Resonator device.</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_frequency_dial_mode_list_listener()<Description>Built-In</Description></Built-In>
<Doc>add_frequency_dial_mode_list_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "frequency_dial_mode_list" has changed. C++ signature :  void add_frequency_dial_mode_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_frequency_dial_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>add_frequency_dial_mode_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "frequency_dial_mode" has changed. C++ signature :  void add_frequency_dial_mode_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_midi_gate_list_listener()<Description>Built-In</Description></Built-In>
<Doc>add_midi_gate_list_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "midi_gate_list" has changed. C++ signature :  void add_midi_gate_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_midi_gate_listener()<Description>Built-In</Description></Built-In>
<Doc>add_midi_gate_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "midi_gate" has changed. C++ signature :  void add_midi_gate_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_mod_mode_list_listener()<Description>Built-In</Description></Built-In>
<Doc>add_mod_mode_list_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mod_mode_list" has changed. C++ signature :  void add_mod_mode_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_mod_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>add_mod_mode_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mod_mode" has changed. C++ signature :  void add_mod_mode_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_mono_poly_list_listener()<Description>Built-In</Description></Built-In>
<Doc>add_mono_poly_list_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mono_poly_list" has changed. C++ signature :  void add_mono_poly_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_mono_poly_listener()<Description>Built-In</Description></Built-In>
<Doc>add_mono_poly_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mono_poly" has changed. C++ signature :  void add_mono_poly_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_name_listener()<Description>Built-In</Description></Built-In>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_pitch_bend_range_listener()<Description>Built-In</Description></Built-In>
<Doc>add_pitch_bend_range_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "pitch_bend_range" has changed. C++ signature :  void add_pitch_bend_range_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_pitch_mode_list_listener()<Description>Built-In</Description></Built-In>
<Doc>add_pitch_mode_list_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "pitch_mode_list" has changed. C++ signature :  void add_pitch_mode_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_pitch_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>add_pitch_mode_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "pitch_mode" has changed. C++ signature :  void add_pitch_mode_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_polyphony_listener()<Description>Built-In</Description></Built-In>
<Doc>add_polyphony_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "polyphony" has changed. C++ signature :  void add_polyphony_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.frequency_dial_mode_has_listener()<Description>Built-In</Description></Built-In>
<Doc>frequency_dial_mode_has_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "frequency_dial_mode". C++ signature :  bool frequency_dial_mode_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.frequency_dial_mode_list_has_listener()<Description>Built-In</Description></Built-In>
<Doc>frequency_dial_mode_list_has_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "frequency_dial_mode_list". C++ signature :  bool frequency_dial_mode_list_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.is_active_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.latency_in_ms_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.latency_in_samples_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.midi_gate_has_listener()<Description>Built-In</Description></Built-In>
<Doc>midi_gate_has_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "midi_gate". C++ signature :  bool midi_gate_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.midi_gate_list_has_listener()<Description>Built-In</Description></Built-In>
<Doc>midi_gate_list_has_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "midi_gate_list". C++ signature :  bool midi_gate_list_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.mod_mode_has_listener()<Description>Built-In</Description></Built-In>
<Doc>mod_mode_has_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mod_mode". C++ signature :  bool mod_mode_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.mod_mode_list_has_listener()<Description>Built-In</Description></Built-In>
<Doc>mod_mode_list_has_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mod_mode_list". C++ signature :  bool mod_mode_list_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.mono_poly_has_listener()<Description>Built-In</Description></Built-In>
<Doc>mono_poly_has_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mono_poly". C++ signature :  bool mono_poly_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.mono_poly_list_has_listener()<Description>Built-In</Description></Built-In>
<Doc>mono_poly_list_has_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mono_poly_list". C++ signature :  bool mono_poly_list_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.name_has_listener()<Description>Built-In</Description></Built-In>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.parameters_has_listener()<Description>Built-In</Description></Built-In>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.pitch_bend_range_has_listener()<Description>Built-In</Description></Built-In>
<Doc>pitch_bend_range_has_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "pitch_bend_range". C++ signature :  bool pitch_bend_range_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.pitch_mode_has_listener()<Description>Built-In</Description></Built-In>
<Doc>pitch_mode_has_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "pitch_mode". C++ signature :  bool pitch_mode_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.pitch_mode_list_has_listener()<Description>Built-In</Description></Built-In>
<Doc>pitch_mode_list_has_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "pitch_mode_list". C++ signature :  bool pitch_mode_list_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.polyphony_has_listener()<Description>Built-In</Description></Built-In>
<Doc>polyphony_has_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "polyphony". C++ signature :  bool polyphony_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_frequency_dial_mode_list_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_frequency_dial_mode_list_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "frequency_dial_mode_list". C++ signature :  void remove_frequency_dial_mode_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_frequency_dial_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_frequency_dial_mode_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "frequency_dial_mode". C++ signature :  void remove_frequency_dial_mode_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_midi_gate_list_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_midi_gate_list_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "midi_gate_list". C++ signature :  void remove_midi_gate_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_midi_gate_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_midi_gate_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "midi_gate". C++ signature :  void remove_midi_gate_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_mod_mode_list_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_mod_mode_list_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mod_mode_list". C++ signature :  void remove_mod_mode_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_mod_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_mod_mode_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mod_mode". C++ signature :  void remove_mod_mode_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_mono_poly_list_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_mono_poly_list_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mono_poly_list". C++ signature :  void remove_mono_poly_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_mono_poly_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_mono_poly_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mono_poly". C++ signature :  void remove_mono_poly_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_name_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_pitch_bend_range_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_pitch_bend_range_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "pitch_bend_range". C++ signature :  void remove_pitch_bend_range_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_pitch_mode_list_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_pitch_mode_list_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "pitch_mode_list". C++ signature :  void remove_pitch_mode_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_pitch_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_pitch_mode_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "pitch_mode". C++ signature :  void remove_pitch_mode_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_polyphony_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_polyphony_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "polyphony". C++ signature :  void remove_polyphony_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.store_chosen_bank()<Description>Built-In</Description></Built-In>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.View<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice._live_ptr<Description>Value</Description></Value>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_frequency_dial_mode_list_listener()<Description>Value</Description></Value>
<Doc>add_frequency_dial_mode_list_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "frequency_dial_mode_list" has changed. C++ signature :  void add_frequency_dial_mode_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_frequency_dial_mode_listener()<Description>Value</Description></Value>
<Doc>add_frequency_dial_mode_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "frequency_dial_mode" has changed. C++ signature :  void add_frequency_dial_mode_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_is_active_listener()<Description>Value</Description></Value>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_midi_gate_list_listener()<Description>Value</Description></Value>
<Doc>add_midi_gate_list_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "midi_gate_list" has changed. C++ signature :  void add_midi_gate_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_midi_gate_listener()<Description>Value</Description></Value>
<Doc>add_midi_gate_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "midi_gate" has changed. C++ signature :  void add_midi_gate_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_mod_mode_list_listener()<Description>Value</Description></Value>
<Doc>add_mod_mode_list_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mod_mode_list" has changed. C++ signature :  void add_mod_mode_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_mod_mode_listener()<Description>Value</Description></Value>
<Doc>add_mod_mode_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mod_mode" has changed. C++ signature :  void add_mod_mode_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_mono_poly_list_listener()<Description>Value</Description></Value>
<Doc>add_mono_poly_list_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mono_poly_list" has changed. C++ signature :  void add_mono_poly_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_mono_poly_listener()<Description>Value</Description></Value>
<Doc>add_mono_poly_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mono_poly" has changed. C++ signature :  void add_mono_poly_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_name_listener()<Description>Value</Description></Value>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_parameters_listener()<Description>Value</Description></Value>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_pitch_bend_range_listener()<Description>Value</Description></Value>
<Doc>add_pitch_bend_range_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "pitch_bend_range" has changed. C++ signature :  void add_pitch_bend_range_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_pitch_mode_list_listener()<Description>Value</Description></Value>
<Doc>add_pitch_mode_list_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "pitch_mode_list" has changed. C++ signature :  void add_pitch_mode_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_pitch_mode_listener()<Description>Value</Description></Value>
<Doc>add_pitch_mode_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "pitch_mode" has changed. C++ signature :  void add_pitch_mode_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.add_polyphony_listener()<Description>Value</Description></Value>
<Doc>add_polyphony_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "polyphony" has changed. C++ signature :  void add_polyphony_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.can_have_chains<Description>Value</Description></Value>
<Doc>Returns true if the device is a rack.</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.can_have_drum_pads<Description>Value</Description></Value>
<Doc>Returns true if the device is a drum rack.</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the Device.</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.class_display_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class name as displayed in Live's browser and device chain</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.class_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class.</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.frequency_dial_mode<Description>Value</Description></Value>
<Doc>Return the current frequency dial mode index</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.frequency_dial_mode_has_listener()<Description>Value</Description></Value>
<Doc>frequency_dial_mode_has_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "frequency_dial_mode". C++ signature :  bool frequency_dial_mode_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.frequency_dial_mode_list<Description>Value</Description></Value>
<Doc>Return the current frequency dial mode list</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.frequency_dial_mode_list_has_listener()<Description>Value</Description></Value>
<Doc>frequency_dial_mode_list_has_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "frequency_dial_mode_list". C++ signature :  bool frequency_dial_mode_list_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.is_active<Description>Value</Description></Value>
<Doc>Return const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off.</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.is_active_has_listener()<Description>Value</Description></Value>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.latency_in_ms<Description>Value</Description></Value>
<Doc>Returns the latency of the device in ms.</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.latency_in_ms_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.latency_in_samples<Description>Value</Description></Value>
<Doc>Returns the latency of the device in samples.</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.latency_in_samples_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.midi_gate<Description>Value</Description></Value>
<Doc>Return the current midi gate index</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.midi_gate_has_listener()<Description>Value</Description></Value>
<Doc>midi_gate_has_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "midi_gate". C++ signature :  bool midi_gate_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.midi_gate_list<Description>Value</Description></Value>
<Doc>Return the current midi gate list</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.midi_gate_list_has_listener()<Description>Value</Description></Value>
<Doc>midi_gate_list_has_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "midi_gate_list". C++ signature :  bool midi_gate_list_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.mod_mode<Description>Value</Description></Value>
<Doc>Return the current mod mode index</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.mod_mode_has_listener()<Description>Value</Description></Value>
<Doc>mod_mode_has_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mod_mode". C++ signature :  bool mod_mode_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.mod_mode_list<Description>Value</Description></Value>
<Doc>Return the current mod mode list</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.mod_mode_list_has_listener()<Description>Value</Description></Value>
<Doc>mod_mode_list_has_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mod_mode_list". C++ signature :  bool mod_mode_list_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.mono_poly<Description>Value</Description></Value>
<Doc>Return the current mono poly mode index</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.mono_poly_has_listener()<Description>Value</Description></Value>
<Doc>mono_poly_has_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mono_poly". C++ signature :  bool mono_poly_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.mono_poly_list<Description>Value</Description></Value>
<Doc>Return the current mono poly mode list</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.mono_poly_list_has_listener()<Description>Value</Description></Value>
<Doc>mono_poly_list_has_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mono_poly_list". C++ signature :  bool mono_poly_list_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.name<Description>Value</Description></Value>
<Doc>Return access to the name of the device.</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.name_has_listener()<Description>Value</Description></Value>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.parameters<Description>Value</Description></Value>
<Doc>Const access to the list of available automatable parameters for this device.</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.parameters_has_listener()<Description>Value</Description></Value>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.pitch_bend_range<Description>Value</Description></Value>
<Doc>Return the current pitch bend range</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.pitch_bend_range_has_listener()<Description>Value</Description></Value>
<Doc>pitch_bend_range_has_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "pitch_bend_range". C++ signature :  bool pitch_bend_range_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.pitch_mode<Description>Value</Description></Value>
<Doc>Return the current pitch mode index</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.pitch_mode_has_listener()<Description>Value</Description></Value>
<Doc>pitch_mode_has_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "pitch_mode". C++ signature :  bool pitch_mode_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.pitch_mode_list<Description>Value</Description></Value>
<Doc>Return the current pitch mode list</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.pitch_mode_list_has_listener()<Description>Value</Description></Value>
<Doc>pitch_mode_list_has_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "pitch_mode_list". C++ signature :  bool pitch_mode_list_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.polyphony<Description>Value</Description></Value>
<Doc>Return the current polyphony</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.polyphony_has_listener()<Description>Value</Description></Value>
<Doc>polyphony_has_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "polyphony". C++ signature :  bool polyphony_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_frequency_dial_mode_list_listener()<Description>Value</Description></Value>
<Doc>remove_frequency_dial_mode_list_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "frequency_dial_mode_list". C++ signature :  void remove_frequency_dial_mode_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_frequency_dial_mode_listener()<Description>Value</Description></Value>
<Doc>remove_frequency_dial_mode_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "frequency_dial_mode". C++ signature :  void remove_frequency_dial_mode_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_is_active_listener()<Description>Value</Description></Value>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_midi_gate_list_listener()<Description>Value</Description></Value>
<Doc>remove_midi_gate_list_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "midi_gate_list". C++ signature :  void remove_midi_gate_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_midi_gate_listener()<Description>Value</Description></Value>
<Doc>remove_midi_gate_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "midi_gate". C++ signature :  void remove_midi_gate_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_mod_mode_list_listener()<Description>Value</Description></Value>
<Doc>remove_mod_mode_list_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mod_mode_list". C++ signature :  void remove_mod_mode_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_mod_mode_listener()<Description>Value</Description></Value>
<Doc>remove_mod_mode_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mod_mode". C++ signature :  void remove_mod_mode_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_mono_poly_list_listener()<Description>Value</Description></Value>
<Doc>remove_mono_poly_list_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mono_poly_list". C++ signature :  void remove_mono_poly_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_mono_poly_listener()<Description>Value</Description></Value>
<Doc>remove_mono_poly_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mono_poly". C++ signature :  void remove_mono_poly_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_name_listener()<Description>Value</Description></Value>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_parameters_listener()<Description>Value</Description></Value>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_pitch_bend_range_listener()<Description>Value</Description></Value>
<Doc>remove_pitch_bend_range_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "pitch_bend_range". C++ signature :  void remove_pitch_bend_range_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_pitch_mode_list_listener()<Description>Value</Description></Value>
<Doc>remove_pitch_mode_list_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "pitch_mode_list". C++ signature :  void remove_pitch_mode_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_pitch_mode_listener()<Description>Value</Description></Value>
<Doc>remove_pitch_mode_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "pitch_mode". C++ signature :  void remove_pitch_mode_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.remove_polyphony_listener()<Description>Value</Description></Value>
<Doc>remove_polyphony_listener( (SpectralResonatorDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "polyphony". C++ signature :  void remove_polyphony_listener(TTransmuteDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.store_chosen_bank()<Description>Value</Description></Value>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.type<Description>Value</Description></Value>
<Doc>Return the type of the device.</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.view<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Class>Live.SpectralResonatorDevice.SpectralResonatorDevice.View<Description>Class</Description></Class>
<Doc>Representing the view aspects of a device.</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.View.add_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.View.is_collapsed_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.SpectralResonatorDevice.SpectralResonatorDevice.View.remove_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.View.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.View._live_ptr<Description>Value</Description></Value>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.View.add_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.View.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the View.</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.View.is_collapsed<Description>Value</Description></Value>
<Doc>Get/Set/Listen if the device is shown collapsed in the device chain.</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.View.is_collapsed_has_listener()<Description>Value</Description></Value>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.SpectralResonatorDevice.SpectralResonatorDevice.View.remove_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Module>Live.Track<Description>Module</Description></Module>
<Class>Live.Track.DeviceContainer<Description>Class</Description></Class>
<Doc>This class is a common super class of Track and Chain</Doc>
<Value>Live.Track.DeviceContainer.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Track.DeviceContainer._live_ptr<Description>Value</Description></Value>
<Class>Live.Track.DeviceInsertMode<Description>Class</Description></Class>
<Built-In>Live.Track.DeviceInsertMode.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Track.DeviceInsertMode.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Track.DeviceInsertMode.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.Track.DeviceInsertMode.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.Track.DeviceInsertMode.count<Description>Value</Description></Value>
<Value>Live.Track.DeviceInsertMode.default<Description>Value</Description></Value>
<Value>Live.Track.DeviceInsertMode.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.Track.DeviceInsertMode.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Track.DeviceInsertMode.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.Track.DeviceInsertMode.name<Description>Value</Description></Value>
<Value>Live.Track.DeviceInsertMode.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.Track.DeviceInsertMode.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.Track.DeviceInsertMode.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.Track.DeviceInsertMode.selected_left<Description>Value</Description></Value>
<Value>Live.Track.DeviceInsertMode.selected_right<Description>Value</Description></Value>
<Value>Live.Track.DeviceInsertMode.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.Track.DeviceInsertMode.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.Track.RoutingChannel<Description>Class</Description></Class>
<Doc>This class represents a routing channel.</Doc>
<Value>Live.Track.RoutingChannel.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Track.RoutingChannel.display_name<Description>Value</Description></Value>
<Doc>Display name of routing channel.</Doc>
<Value>Live.Track.RoutingChannel.layout<Description>Value</Description></Value>
<Doc>The routing channel's Layout, e.g., mono or stereo.</Doc>
<Class>Live.Track.RoutingChannelLayout<Description>Class</Description></Class>
<Built-In>Live.Track.RoutingChannelLayout.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Track.RoutingChannelLayout.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Track.RoutingChannelLayout.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.Track.RoutingChannelLayout.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.Track.RoutingChannelLayout.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.Track.RoutingChannelLayout.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Track.RoutingChannelLayout.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.Track.RoutingChannelLayout.midi<Description>Value</Description></Value>
<Value>Live.Track.RoutingChannelLayout.mono<Description>Value</Description></Value>
<Value>Live.Track.RoutingChannelLayout.name<Description>Value</Description></Value>
<Value>Live.Track.RoutingChannelLayout.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.Track.RoutingChannelLayout.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.Track.RoutingChannelLayout.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.Track.RoutingChannelLayout.stereo<Description>Value</Description></Value>
<Value>Live.Track.RoutingChannelLayout.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.Track.RoutingChannelLayout.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.Track.RoutingChannelVector<Description>Class</Description></Class>
<Doc>A container for returning routing channels from Live.</Doc>
<Built-In>Live.Track.RoutingChannelVector.append()<Description>Built-In</Description></Built-In>
<Doc>append( (RoutingChannelVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;NRoutingApi::TRoutingChannel, std::__1::allocator&lt;NRoutingApi::TRoutingChannel&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Built-In>Live.Track.RoutingChannelVector.extend()<Description>Built-In</Description></Built-In>
<Doc>extend( (RoutingChannelVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;NRoutingApi::TRoutingChannel, std::__1::allocator&lt;NRoutingApi::TRoutingChannel&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Track.RoutingChannelVector.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Track.RoutingChannelVector.append()<Description>Value</Description></Value>
<Doc>append( (RoutingChannelVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;NRoutingApi::TRoutingChannel, std::__1::allocator&lt;NRoutingApi::TRoutingChannel&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Track.RoutingChannelVector.extend()<Description>Value</Description></Value>
<Doc>extend( (RoutingChannelVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;NRoutingApi::TRoutingChannel, std::__1::allocator&lt;NRoutingApi::TRoutingChannel&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Class>Live.Track.RoutingType<Description>Class</Description></Class>
<Doc>This class represents a routing type.</Doc>
<Value>Live.Track.RoutingType.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Track.RoutingType.attached_object<Description>Value</Description></Value>
<Doc>Live object associated with the routing type.</Doc>
<Value>Live.Track.RoutingType.category<Description>Value</Description></Value>
<Doc>Category of the routing type.</Doc>
<Value>Live.Track.RoutingType.display_name<Description>Value</Description></Value>
<Doc>Display name of routing type.</Doc>
<Class>Live.Track.RoutingTypeCategory<Description>Class</Description></Class>
<Built-In>Live.Track.RoutingTypeCategory.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Track.RoutingTypeCategory.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Track.RoutingTypeCategory.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.Track.RoutingTypeCategory.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.Track.RoutingTypeCategory.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.Track.RoutingTypeCategory.external<Description>Value</Description></Value>
<Value>Live.Track.RoutingTypeCategory.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Track.RoutingTypeCategory.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.Track.RoutingTypeCategory.invalid<Description>Value</Description></Value>
<Value>Live.Track.RoutingTypeCategory.master<Description>Value</Description></Value>
<Value>Live.Track.RoutingTypeCategory.name<Description>Value</Description></Value>
<Value>Live.Track.RoutingTypeCategory.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.Track.RoutingTypeCategory.none<Description>Value</Description></Value>
<Value>Live.Track.RoutingTypeCategory.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.Track.RoutingTypeCategory.parent_group_track<Description>Value</Description></Value>
<Value>Live.Track.RoutingTypeCategory.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.Track.RoutingTypeCategory.resampling<Description>Value</Description></Value>
<Value>Live.Track.RoutingTypeCategory.rewire<Description>Value</Description></Value>
<Value>Live.Track.RoutingTypeCategory.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.Track.RoutingTypeCategory.track<Description>Value</Description></Value>
<Value>Live.Track.RoutingTypeCategory.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.Track.RoutingTypeVector<Description>Class</Description></Class>
<Doc>A container for returning routing types from Live.</Doc>
<Built-In>Live.Track.RoutingTypeVector.append()<Description>Built-In</Description></Built-In>
<Doc>append( (RoutingTypeVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;NRoutingApi::TRoutingType, std::__1::allocator&lt;NRoutingApi::TRoutingType&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Built-In>Live.Track.RoutingTypeVector.extend()<Description>Built-In</Description></Built-In>
<Doc>extend( (RoutingTypeVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;NRoutingApi::TRoutingType, std::__1::allocator&lt;NRoutingApi::TRoutingType&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Track.RoutingTypeVector.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Track.RoutingTypeVector.append()<Description>Value</Description></Value>
<Doc>append( (RoutingTypeVector)arg1, (object)arg2) -&gt; None : C++ signature :  void append(std::__1::vector&lt;NRoutingApi::TRoutingType, std::__1::allocator&lt;NRoutingApi::TRoutingType&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Value>Live.Track.RoutingTypeVector.extend()<Description>Value</Description></Value>
<Doc>extend( (RoutingTypeVector)arg1, (object)arg2) -&gt; None : C++ signature :  void extend(std::__1::vector&lt;NRoutingApi::TRoutingType, std::__1::allocator&lt;NRoutingApi::TRoutingType&gt;&gt; {lvalue},boost::python::api::object)</Doc>
<Class>Live.Track.Track<Description>Class</Description></Class>
<Doc>This class represents a track in Live. It can be either an Audio track, a MIDI Track, a Return Track or the Main track. The Main Track and at least one Audio or MIDI track will be always present.Return Tracks are optional.</Doc>
<Built-In>Live.Track.Track.add_arm_listener()<Description>Built-In</Description></Built-In>
<Doc>add_arm_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "arm" has changed. C++ signature :  void add_arm_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_arrangement_clips_listener()<Description>Built-In</Description></Built-In>
<Doc>add_arrangement_clips_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "arrangement_clips" has changed. C++ signature :  void add_arrangement_clips_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_available_input_routing_channels_listener()<Description>Built-In</Description></Built-In>
<Doc>add_available_input_routing_channels_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "available_input_routing_channels" has changed. C++ signature :  void add_available_input_routing_channels_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_available_input_routing_types_listener()<Description>Built-In</Description></Built-In>
<Doc>add_available_input_routing_types_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "available_input_routing_types" has changed. C++ signature :  void add_available_input_routing_types_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_available_output_routing_channels_listener()<Description>Built-In</Description></Built-In>
<Doc>add_available_output_routing_channels_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "available_output_routing_channels" has changed. C++ signature :  void add_available_output_routing_channels_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_available_output_routing_types_listener()<Description>Built-In</Description></Built-In>
<Doc>add_available_output_routing_types_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "available_output_routing_types" has changed. C++ signature :  void add_available_output_routing_types_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_back_to_arranger_listener()<Description>Built-In</Description></Built-In>
<Doc>add_back_to_arranger_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "back_to_arranger" has changed. C++ signature :  void add_back_to_arranger_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_clip_slots_listener()<Description>Built-In</Description></Built-In>
<Doc>add_clip_slots_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "clip_slots" has changed. C++ signature :  void add_clip_slots_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_color_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_color_index_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "color_index" has changed. C++ signature :  void add_color_index_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_color_listener()<Description>Built-In</Description></Built-In>
<Doc>add_color_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "color" has changed. C++ signature :  void add_color_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_current_input_routing_listener()<Description>Built-In</Description></Built-In>
<Doc>add_current_input_routing_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "current_input_routing" has changed. C++ signature :  void add_current_input_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_current_input_sub_routing_listener()<Description>Built-In</Description></Built-In>
<Doc>add_current_input_sub_routing_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "current_input_sub_routing" has changed. C++ signature :  void add_current_input_sub_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_current_monitoring_state_listener()<Description>Built-In</Description></Built-In>
<Doc>add_current_monitoring_state_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "current_monitoring_state" has changed. C++ signature :  void add_current_monitoring_state_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_current_output_routing_listener()<Description>Built-In</Description></Built-In>
<Doc>add_current_output_routing_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "current_output_routing" has changed. C++ signature :  void add_current_output_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_current_output_sub_routing_listener()<Description>Built-In</Description></Built-In>
<Doc>add_current_output_sub_routing_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "current_output_sub_routing" has changed. C++ signature :  void add_current_output_sub_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_data_listener()<Description>Built-In</Description></Built-In>
<Doc>add_data_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "data" has changed. C++ signature :  void add_data_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_devices_listener()<Description>Built-In</Description></Built-In>
<Doc>add_devices_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "devices" has changed. C++ signature :  void add_devices_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_fired_slot_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_fired_slot_index_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "fired_slot_index" has changed. C++ signature :  void add_fired_slot_index_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_has_audio_input_listener()<Description>Built-In</Description></Built-In>
<Doc>add_has_audio_input_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "has_audio_input" has changed. C++ signature :  void add_has_audio_input_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_has_audio_output_listener()<Description>Built-In</Description></Built-In>
<Doc>add_has_audio_output_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "has_audio_output" has changed. C++ signature :  void add_has_audio_output_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_has_midi_input_listener()<Description>Built-In</Description></Built-In>
<Doc>add_has_midi_input_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "has_midi_input" has changed. C++ signature :  void add_has_midi_input_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_has_midi_output_listener()<Description>Built-In</Description></Built-In>
<Doc>add_has_midi_output_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "has_midi_output" has changed. C++ signature :  void add_has_midi_output_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_implicit_arm_listener()<Description>Built-In</Description></Built-In>
<Doc>add_implicit_arm_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "implicit_arm" has changed. C++ signature :  void add_implicit_arm_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_input_meter_left_listener()<Description>Built-In</Description></Built-In>
<Doc>add_input_meter_left_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "input_meter_left" has changed. C++ signature :  void add_input_meter_left_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_input_meter_level_listener()<Description>Built-In</Description></Built-In>
<Doc>add_input_meter_level_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "input_meter_level" has changed. C++ signature :  void add_input_meter_level_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_input_meter_right_listener()<Description>Built-In</Description></Built-In>
<Doc>add_input_meter_right_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "input_meter_right" has changed. C++ signature :  void add_input_meter_right_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_input_routing_channel_listener()<Description>Built-In</Description></Built-In>
<Doc>add_input_routing_channel_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "input_routing_channel" has changed. C++ signature :  void add_input_routing_channel_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_input_routing_type_listener()<Description>Built-In</Description></Built-In>
<Doc>add_input_routing_type_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "input_routing_type" has changed. C++ signature :  void add_input_routing_type_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_input_routings_listener()<Description>Built-In</Description></Built-In>
<Doc>add_input_routings_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "input_routings" has changed. C++ signature :  void add_input_routings_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_input_sub_routings_listener()<Description>Built-In</Description></Built-In>
<Doc>add_input_sub_routings_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "input_sub_routings" has changed. C++ signature :  void add_input_sub_routings_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_is_frozen_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_frozen_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_frozen" has changed. C++ signature :  void add_is_frozen_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_is_showing_chains_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_showing_chains_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_showing_chains" has changed. C++ signature :  void add_is_showing_chains_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_mute_listener()<Description>Built-In</Description></Built-In>
<Doc>add_mute_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mute" has changed. C++ signature :  void add_mute_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_muted_via_solo_listener()<Description>Built-In</Description></Built-In>
<Doc>add_muted_via_solo_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "muted_via_solo" has changed. C++ signature :  void add_muted_via_solo_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_name_listener()<Description>Built-In</Description></Built-In>
<Doc>add_name_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_output_meter_left_listener()<Description>Built-In</Description></Built-In>
<Doc>add_output_meter_left_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "output_meter_left" has changed. C++ signature :  void add_output_meter_left_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_output_meter_level_listener()<Description>Built-In</Description></Built-In>
<Doc>add_output_meter_level_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "output_meter_level" has changed. C++ signature :  void add_output_meter_level_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_output_meter_right_listener()<Description>Built-In</Description></Built-In>
<Doc>add_output_meter_right_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "output_meter_right" has changed. C++ signature :  void add_output_meter_right_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_output_routing_channel_listener()<Description>Built-In</Description></Built-In>
<Doc>add_output_routing_channel_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "output_routing_channel" has changed. C++ signature :  void add_output_routing_channel_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_output_routing_type_listener()<Description>Built-In</Description></Built-In>
<Doc>add_output_routing_type_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "output_routing_type" has changed. C++ signature :  void add_output_routing_type_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_output_routings_listener()<Description>Built-In</Description></Built-In>
<Doc>add_output_routings_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "output_routings" has changed. C++ signature :  void add_output_routings_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_output_sub_routings_listener()<Description>Built-In</Description></Built-In>
<Doc>add_output_sub_routings_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "output_sub_routings" has changed. C++ signature :  void add_output_sub_routings_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_performance_impact_listener()<Description>Built-In</Description></Built-In>
<Doc>add_performance_impact_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "performance_impact" has changed. C++ signature :  void add_performance_impact_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_playing_slot_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_playing_slot_index_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "playing_slot_index" has changed. C++ signature :  void add_playing_slot_index_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.add_solo_listener()<Description>Built-In</Description></Built-In>
<Doc>add_solo_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "solo" has changed. C++ signature :  void add_solo_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.arm_has_listener()<Description>Built-In</Description></Built-In>
<Doc>arm_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "arm". C++ signature :  bool arm_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.arrangement_clips_has_listener()<Description>Built-In</Description></Built-In>
<Doc>arrangement_clips_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "arrangement_clips". C++ signature :  bool arrangement_clips_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.available_input_routing_channels_has_listener()<Description>Built-In</Description></Built-In>
<Doc>available_input_routing_channels_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "available_input_routing_channels". C++ signature :  bool available_input_routing_channels_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.available_input_routing_types_has_listener()<Description>Built-In</Description></Built-In>
<Doc>available_input_routing_types_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "available_input_routing_types". C++ signature :  bool available_input_routing_types_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.available_output_routing_channels_has_listener()<Description>Built-In</Description></Built-In>
<Doc>available_output_routing_channels_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "available_output_routing_channels". C++ signature :  bool available_output_routing_channels_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.available_output_routing_types_has_listener()<Description>Built-In</Description></Built-In>
<Doc>available_output_routing_types_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "available_output_routing_types". C++ signature :  bool available_output_routing_types_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.back_to_arranger_has_listener()<Description>Built-In</Description></Built-In>
<Doc>back_to_arranger_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "back_to_arranger". C++ signature :  bool back_to_arranger_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.clip_slots_has_listener()<Description>Built-In</Description></Built-In>
<Doc>clip_slots_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "clip_slots". C++ signature :  bool clip_slots_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.color_has_listener()<Description>Built-In</Description></Built-In>
<Doc>color_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "color". C++ signature :  bool color_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.color_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>color_index_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "color_index". C++ signature :  bool color_index_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.create_audio_clip()<Description>Built-In</Description></Built-In>
<Doc>create_audio_clip( (Track)arg1, (object)arg2, (float)arg3) -&gt; None : Creates an audio clip referencing the file at the given path and inserts it into the arrangement at the specified time. Throws an error when called on a non-audio or a frozen track, when the specified time is outside the [0., 1576800.] range, when the track is currently being recorded into, or when the path doesn't point to a valid audio file. C++ signature :  void create_audio_clip(TTrackPyHandle,TString,double)</Doc>
<Built-In>Live.Track.Track.current_input_routing_has_listener()<Description>Built-In</Description></Built-In>
<Doc>current_input_routing_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "current_input_routing". C++ signature :  bool current_input_routing_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.current_input_sub_routing_has_listener()<Description>Built-In</Description></Built-In>
<Doc>current_input_sub_routing_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "current_input_sub_routing". C++ signature :  bool current_input_sub_routing_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.current_monitoring_state_has_listener()<Description>Built-In</Description></Built-In>
<Doc>current_monitoring_state_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "current_monitoring_state". C++ signature :  bool current_monitoring_state_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.current_output_routing_has_listener()<Description>Built-In</Description></Built-In>
<Doc>current_output_routing_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "current_output_routing". C++ signature :  bool current_output_routing_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.current_output_sub_routing_has_listener()<Description>Built-In</Description></Built-In>
<Doc>current_output_sub_routing_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "current_output_sub_routing". C++ signature :  bool current_output_sub_routing_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.data_has_listener()<Description>Built-In</Description></Built-In>
<Doc>data_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "data". C++ signature :  bool data_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.delete_clip()<Description>Built-In</Description></Built-In>
<Doc>delete_clip( (Track)arg1, (Clip)arg2) -&gt; None : Delete the given clip. Raises a runtime error when the clip belongs to another track. C++ signature :  void delete_clip(TTrackPyHandle,TPyHandle&lt;AClip&gt;)</Doc>
<Built-In>Live.Track.Track.delete_device()<Description>Built-In</Description></Built-In>
<Doc>delete_device( (Track)arg1, (int)arg2) -&gt; None : Delete a device identified by the index in the 'devices' list. C++ signature :  void delete_device(TTrackPyHandle,int)</Doc>
<Built-In>Live.Track.Track.devices_has_listener()<Description>Built-In</Description></Built-In>
<Doc>devices_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "devices". C++ signature :  bool devices_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.duplicate_clip_slot()<Description>Built-In</Description></Built-In>
<Doc>duplicate_clip_slot( (Track)arg1, (int)arg2) -&gt; int : Duplicate a clip and put it into the next free slot and return the index of the destination slot. A new scene is created if no free slot is available. If creating the new scene would exceed the limitations, a runtime error is raised. C++ signature :  int duplicate_clip_slot(TTrackPyHandle,int)</Doc>
<Built-In>Live.Track.Track.duplicate_clip_to_arrangement()<Description>Built-In</Description></Built-In>
<Doc>duplicate_clip_to_arrangement( (Track)self, (Clip)clip, (float)destination_time) -&gt; Clip : Duplicate the given clip into the arrangement of this track at the provided destination time and return it. When the type of the clip and the type of the track are incompatible, a runtime error is raised. C++ signature :  TWeakPtr&lt;TPyHandle&lt;AClip&gt;&gt; duplicate_clip_to_arrangement(TTrackPyHandle,TPyHandle&lt;AClip&gt;,double)</Doc>
<Built-In>Live.Track.Track.fired_slot_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>fired_slot_index_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "fired_slot_index". C++ signature :  bool fired_slot_index_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.get_data()<Description>Built-In</Description></Built-In>
<Doc>get_data( (Track)arg1, (object)key, (object)default_value) -&gt; object : Get data for the given key, that was previously stored using set_data. C++ signature :  boost::python::api::object get_data(TTrackPyHandle,TString,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.has_audio_input_has_listener()<Description>Built-In</Description></Built-In>
<Doc>has_audio_input_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "has_audio_input". C++ signature :  bool has_audio_input_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.has_audio_output_has_listener()<Description>Built-In</Description></Built-In>
<Doc>has_audio_output_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "has_audio_output". C++ signature :  bool has_audio_output_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.has_midi_input_has_listener()<Description>Built-In</Description></Built-In>
<Doc>has_midi_input_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "has_midi_input". C++ signature :  bool has_midi_input_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.has_midi_output_has_listener()<Description>Built-In</Description></Built-In>
<Doc>has_midi_output_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "has_midi_output". C++ signature :  bool has_midi_output_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.implicit_arm_has_listener()<Description>Built-In</Description></Built-In>
<Doc>implicit_arm_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "implicit_arm". C++ signature :  bool implicit_arm_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.input_meter_left_has_listener()<Description>Built-In</Description></Built-In>
<Doc>input_meter_left_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "input_meter_left". C++ signature :  bool input_meter_left_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.input_meter_level_has_listener()<Description>Built-In</Description></Built-In>
<Doc>input_meter_level_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "input_meter_level". C++ signature :  bool input_meter_level_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.input_meter_right_has_listener()<Description>Built-In</Description></Built-In>
<Doc>input_meter_right_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "input_meter_right". C++ signature :  bool input_meter_right_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.input_routing_channel_has_listener()<Description>Built-In</Description></Built-In>
<Doc>input_routing_channel_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "input_routing_channel". C++ signature :  bool input_routing_channel_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.input_routing_type_has_listener()<Description>Built-In</Description></Built-In>
<Doc>input_routing_type_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "input_routing_type". C++ signature :  bool input_routing_type_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.input_routings_has_listener()<Description>Built-In</Description></Built-In>
<Doc>input_routings_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "input_routings". C++ signature :  bool input_routings_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.input_sub_routings_has_listener()<Description>Built-In</Description></Built-In>
<Doc>input_sub_routings_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "input_sub_routings". C++ signature :  bool input_sub_routings_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.is_frozen_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_frozen_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_frozen". C++ signature :  bool is_frozen_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.is_showing_chains_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_showing_chains_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_showing_chains". C++ signature :  bool is_showing_chains_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.jump_in_running_session_clip()<Description>Built-In</Description></Built-In>
<Doc>jump_in_running_session_clip( (Track)arg1, (float)arg2) -&gt; None : Jump forward or backward in the currently running Sessionclip (if any) by the specified relative amount in beats. Does nothing if no Session Clip is currently running. C++ signature :  void jump_in_running_session_clip(TTrackPyHandle,double)</Doc>
<Built-In>Live.Track.Track.mute_has_listener()<Description>Built-In</Description></Built-In>
<Doc>mute_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mute". C++ signature :  bool mute_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.muted_via_solo_has_listener()<Description>Built-In</Description></Built-In>
<Doc>muted_via_solo_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "muted_via_solo". C++ signature :  bool muted_via_solo_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.name_has_listener()<Description>Built-In</Description></Built-In>
<Doc>name_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.output_meter_left_has_listener()<Description>Built-In</Description></Built-In>
<Doc>output_meter_left_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "output_meter_left". C++ signature :  bool output_meter_left_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.output_meter_level_has_listener()<Description>Built-In</Description></Built-In>
<Doc>output_meter_level_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "output_meter_level". C++ signature :  bool output_meter_level_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.output_meter_right_has_listener()<Description>Built-In</Description></Built-In>
<Doc>output_meter_right_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "output_meter_right". C++ signature :  bool output_meter_right_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.output_routing_channel_has_listener()<Description>Built-In</Description></Built-In>
<Doc>output_routing_channel_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "output_routing_channel". C++ signature :  bool output_routing_channel_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.output_routing_type_has_listener()<Description>Built-In</Description></Built-In>
<Doc>output_routing_type_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "output_routing_type". C++ signature :  bool output_routing_type_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.output_routings_has_listener()<Description>Built-In</Description></Built-In>
<Doc>output_routings_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "output_routings". C++ signature :  bool output_routings_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.output_sub_routings_has_listener()<Description>Built-In</Description></Built-In>
<Doc>output_sub_routings_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "output_sub_routings". C++ signature :  bool output_sub_routings_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.performance_impact_has_listener()<Description>Built-In</Description></Built-In>
<Doc>performance_impact_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "performance_impact". C++ signature :  bool performance_impact_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.playing_slot_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>playing_slot_index_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "playing_slot_index". C++ signature :  bool playing_slot_index_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_arm_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_arm_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "arm". C++ signature :  void remove_arm_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_arrangement_clips_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_arrangement_clips_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "arrangement_clips". C++ signature :  void remove_arrangement_clips_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_available_input_routing_channels_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_available_input_routing_channels_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "available_input_routing_channels". C++ signature :  void remove_available_input_routing_channels_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_available_input_routing_types_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_available_input_routing_types_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "available_input_routing_types". C++ signature :  void remove_available_input_routing_types_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_available_output_routing_channels_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_available_output_routing_channels_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "available_output_routing_channels". C++ signature :  void remove_available_output_routing_channels_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_available_output_routing_types_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_available_output_routing_types_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "available_output_routing_types". C++ signature :  void remove_available_output_routing_types_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_back_to_arranger_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_back_to_arranger_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "back_to_arranger". C++ signature :  void remove_back_to_arranger_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_clip_slots_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_clip_slots_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "clip_slots". C++ signature :  void remove_clip_slots_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_color_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_color_index_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "color_index". C++ signature :  void remove_color_index_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_color_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_color_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "color". C++ signature :  void remove_color_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_current_input_routing_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_current_input_routing_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "current_input_routing". C++ signature :  void remove_current_input_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_current_input_sub_routing_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_current_input_sub_routing_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "current_input_sub_routing". C++ signature :  void remove_current_input_sub_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_current_monitoring_state_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_current_monitoring_state_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "current_monitoring_state". C++ signature :  void remove_current_monitoring_state_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_current_output_routing_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_current_output_routing_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "current_output_routing". C++ signature :  void remove_current_output_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_current_output_sub_routing_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_current_output_sub_routing_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "current_output_sub_routing". C++ signature :  void remove_current_output_sub_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_data_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_data_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "data". C++ signature :  void remove_data_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_devices_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_devices_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "devices". C++ signature :  void remove_devices_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_fired_slot_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_fired_slot_index_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "fired_slot_index". C++ signature :  void remove_fired_slot_index_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_has_audio_input_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_has_audio_input_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "has_audio_input". C++ signature :  void remove_has_audio_input_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_has_audio_output_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_has_audio_output_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "has_audio_output". C++ signature :  void remove_has_audio_output_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_has_midi_input_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_has_midi_input_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "has_midi_input". C++ signature :  void remove_has_midi_input_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_has_midi_output_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_has_midi_output_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "has_midi_output". C++ signature :  void remove_has_midi_output_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_implicit_arm_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_implicit_arm_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "implicit_arm". C++ signature :  void remove_implicit_arm_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_input_meter_left_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_input_meter_left_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "input_meter_left". C++ signature :  void remove_input_meter_left_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_input_meter_level_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_input_meter_level_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "input_meter_level". C++ signature :  void remove_input_meter_level_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_input_meter_right_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_input_meter_right_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "input_meter_right". C++ signature :  void remove_input_meter_right_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_input_routing_channel_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_input_routing_channel_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "input_routing_channel". C++ signature :  void remove_input_routing_channel_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_input_routing_type_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_input_routing_type_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "input_routing_type". C++ signature :  void remove_input_routing_type_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_input_routings_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_input_routings_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "input_routings". C++ signature :  void remove_input_routings_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_input_sub_routings_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_input_sub_routings_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "input_sub_routings". C++ signature :  void remove_input_sub_routings_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_is_frozen_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_frozen_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_frozen". C++ signature :  void remove_is_frozen_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_is_showing_chains_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_showing_chains_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_showing_chains". C++ signature :  void remove_is_showing_chains_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_mute_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_mute_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mute". C++ signature :  void remove_mute_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_muted_via_solo_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_muted_via_solo_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "muted_via_solo". C++ signature :  void remove_muted_via_solo_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_name_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_name_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_output_meter_left_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_output_meter_left_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "output_meter_left". C++ signature :  void remove_output_meter_left_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_output_meter_level_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_output_meter_level_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "output_meter_level". C++ signature :  void remove_output_meter_level_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_output_meter_right_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_output_meter_right_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "output_meter_right". C++ signature :  void remove_output_meter_right_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_output_routing_channel_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_output_routing_channel_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "output_routing_channel". C++ signature :  void remove_output_routing_channel_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_output_routing_type_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_output_routing_type_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "output_routing_type". C++ signature :  void remove_output_routing_type_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_output_routings_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_output_routings_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "output_routings". C++ signature :  void remove_output_routings_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_output_sub_routings_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_output_sub_routings_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "output_sub_routings". C++ signature :  void remove_output_sub_routings_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_performance_impact_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_performance_impact_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "performance_impact". C++ signature :  void remove_performance_impact_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_playing_slot_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_playing_slot_index_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "playing_slot_index". C++ signature :  void remove_playing_slot_index_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.remove_solo_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_solo_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "solo". C++ signature :  void remove_solo_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.set_data()<Description>Built-In</Description></Built-In>
<Doc>set_data( (Track)arg1, (object)key, (object)value) -&gt; None : Store data for the given key in this object. The data is persistent and will be restored when loading the Live Set. C++ signature :  void set_data(TTrackPyHandle,TString,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.solo_has_listener()<Description>Built-In</Description></Built-In>
<Doc>solo_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "solo". C++ signature :  bool solo_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.stop_all_clips()<Description>Built-In</Description></Built-In>
<Doc>stop_all_clips( (Track)arg1 [, (bool)Quantized=True]) -&gt; None : Stop running and triggered clip and slots on this track. C++ signature :  void stop_all_clips(TTrackPyHandle [,bool=True])</Doc>
<Value>Live.Track.Track.View<Description>Value</Description></Value>
<Doc>Representing the view aspects of a Track.</Doc>
<Value>Live.Track.Track.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Track.Track._live_ptr<Description>Value</Description></Value>
<Value>Live.Track.Track.add_arm_listener()<Description>Value</Description></Value>
<Doc>add_arm_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "arm" has changed. C++ signature :  void add_arm_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_arrangement_clips_listener()<Description>Value</Description></Value>
<Doc>add_arrangement_clips_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "arrangement_clips" has changed. C++ signature :  void add_arrangement_clips_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_available_input_routing_channels_listener()<Description>Value</Description></Value>
<Doc>add_available_input_routing_channels_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "available_input_routing_channels" has changed. C++ signature :  void add_available_input_routing_channels_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_available_input_routing_types_listener()<Description>Value</Description></Value>
<Doc>add_available_input_routing_types_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "available_input_routing_types" has changed. C++ signature :  void add_available_input_routing_types_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_available_output_routing_channels_listener()<Description>Value</Description></Value>
<Doc>add_available_output_routing_channels_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "available_output_routing_channels" has changed. C++ signature :  void add_available_output_routing_channels_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_available_output_routing_types_listener()<Description>Value</Description></Value>
<Doc>add_available_output_routing_types_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "available_output_routing_types" has changed. C++ signature :  void add_available_output_routing_types_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_back_to_arranger_listener()<Description>Value</Description></Value>
<Doc>add_back_to_arranger_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "back_to_arranger" has changed. C++ signature :  void add_back_to_arranger_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_clip_slots_listener()<Description>Value</Description></Value>
<Doc>add_clip_slots_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "clip_slots" has changed. C++ signature :  void add_clip_slots_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_color_index_listener()<Description>Value</Description></Value>
<Doc>add_color_index_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "color_index" has changed. C++ signature :  void add_color_index_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_color_listener()<Description>Value</Description></Value>
<Doc>add_color_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "color" has changed. C++ signature :  void add_color_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_current_input_routing_listener()<Description>Value</Description></Value>
<Doc>add_current_input_routing_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "current_input_routing" has changed. C++ signature :  void add_current_input_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_current_input_sub_routing_listener()<Description>Value</Description></Value>
<Doc>add_current_input_sub_routing_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "current_input_sub_routing" has changed. C++ signature :  void add_current_input_sub_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_current_monitoring_state_listener()<Description>Value</Description></Value>
<Doc>add_current_monitoring_state_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "current_monitoring_state" has changed. C++ signature :  void add_current_monitoring_state_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_current_output_routing_listener()<Description>Value</Description></Value>
<Doc>add_current_output_routing_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "current_output_routing" has changed. C++ signature :  void add_current_output_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_current_output_sub_routing_listener()<Description>Value</Description></Value>
<Doc>add_current_output_sub_routing_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "current_output_sub_routing" has changed. C++ signature :  void add_current_output_sub_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_data_listener()<Description>Value</Description></Value>
<Doc>add_data_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "data" has changed. C++ signature :  void add_data_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_devices_listener()<Description>Value</Description></Value>
<Doc>add_devices_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "devices" has changed. C++ signature :  void add_devices_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_fired_slot_index_listener()<Description>Value</Description></Value>
<Doc>add_fired_slot_index_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "fired_slot_index" has changed. C++ signature :  void add_fired_slot_index_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_has_audio_input_listener()<Description>Value</Description></Value>
<Doc>add_has_audio_input_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "has_audio_input" has changed. C++ signature :  void add_has_audio_input_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_has_audio_output_listener()<Description>Value</Description></Value>
<Doc>add_has_audio_output_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "has_audio_output" has changed. C++ signature :  void add_has_audio_output_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_has_midi_input_listener()<Description>Value</Description></Value>
<Doc>add_has_midi_input_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "has_midi_input" has changed. C++ signature :  void add_has_midi_input_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_has_midi_output_listener()<Description>Value</Description></Value>
<Doc>add_has_midi_output_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "has_midi_output" has changed. C++ signature :  void add_has_midi_output_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_implicit_arm_listener()<Description>Value</Description></Value>
<Doc>add_implicit_arm_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "implicit_arm" has changed. C++ signature :  void add_implicit_arm_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_input_meter_left_listener()<Description>Value</Description></Value>
<Doc>add_input_meter_left_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "input_meter_left" has changed. C++ signature :  void add_input_meter_left_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_input_meter_level_listener()<Description>Value</Description></Value>
<Doc>add_input_meter_level_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "input_meter_level" has changed. C++ signature :  void add_input_meter_level_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_input_meter_right_listener()<Description>Value</Description></Value>
<Doc>add_input_meter_right_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "input_meter_right" has changed. C++ signature :  void add_input_meter_right_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_input_routing_channel_listener()<Description>Value</Description></Value>
<Doc>add_input_routing_channel_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "input_routing_channel" has changed. C++ signature :  void add_input_routing_channel_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_input_routing_type_listener()<Description>Value</Description></Value>
<Doc>add_input_routing_type_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "input_routing_type" has changed. C++ signature :  void add_input_routing_type_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_input_routings_listener()<Description>Value</Description></Value>
<Doc>add_input_routings_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "input_routings" has changed. C++ signature :  void add_input_routings_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_input_sub_routings_listener()<Description>Value</Description></Value>
<Doc>add_input_sub_routings_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "input_sub_routings" has changed. C++ signature :  void add_input_sub_routings_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_is_frozen_listener()<Description>Value</Description></Value>
<Doc>add_is_frozen_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_frozen" has changed. C++ signature :  void add_is_frozen_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_is_showing_chains_listener()<Description>Value</Description></Value>
<Doc>add_is_showing_chains_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_showing_chains" has changed. C++ signature :  void add_is_showing_chains_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_mute_listener()<Description>Value</Description></Value>
<Doc>add_mute_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mute" has changed. C++ signature :  void add_mute_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_muted_via_solo_listener()<Description>Value</Description></Value>
<Doc>add_muted_via_solo_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "muted_via_solo" has changed. C++ signature :  void add_muted_via_solo_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_name_listener()<Description>Value</Description></Value>
<Doc>add_name_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_output_meter_left_listener()<Description>Value</Description></Value>
<Doc>add_output_meter_left_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "output_meter_left" has changed. C++ signature :  void add_output_meter_left_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_output_meter_level_listener()<Description>Value</Description></Value>
<Doc>add_output_meter_level_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "output_meter_level" has changed. C++ signature :  void add_output_meter_level_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_output_meter_right_listener()<Description>Value</Description></Value>
<Doc>add_output_meter_right_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "output_meter_right" has changed. C++ signature :  void add_output_meter_right_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_output_routing_channel_listener()<Description>Value</Description></Value>
<Doc>add_output_routing_channel_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "output_routing_channel" has changed. C++ signature :  void add_output_routing_channel_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_output_routing_type_listener()<Description>Value</Description></Value>
<Doc>add_output_routing_type_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "output_routing_type" has changed. C++ signature :  void add_output_routing_type_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_output_routings_listener()<Description>Value</Description></Value>
<Doc>add_output_routings_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "output_routings" has changed. C++ signature :  void add_output_routings_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_output_sub_routings_listener()<Description>Value</Description></Value>
<Doc>add_output_sub_routings_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "output_sub_routings" has changed. C++ signature :  void add_output_sub_routings_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_performance_impact_listener()<Description>Value</Description></Value>
<Doc>add_performance_impact_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "performance_impact" has changed. C++ signature :  void add_performance_impact_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_playing_slot_index_listener()<Description>Value</Description></Value>
<Doc>add_playing_slot_index_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "playing_slot_index" has changed. C++ signature :  void add_playing_slot_index_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.add_solo_listener()<Description>Value</Description></Value>
<Doc>add_solo_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "solo" has changed. C++ signature :  void add_solo_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.arm<Description>Value</Description></Value>
<Doc>Arm the track for recording. Not available for Main- and Send Tracks.</Doc>
<Value>Live.Track.Track.arm_has_listener()<Description>Value</Description></Value>
<Doc>arm_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "arm". C++ signature :  bool arm_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.arrangement_clips<Description>Value</Description></Value>
<Doc>const access to the list of clips in arrangement viewThe list will be empty for the main, send and group tracks.</Doc>
<Value>Live.Track.Track.arrangement_clips_has_listener()<Description>Value</Description></Value>
<Doc>arrangement_clips_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "arrangement_clips". C++ signature :  bool arrangement_clips_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.available_input_routing_channels<Description>Value</Description></Value>
<Doc>Return a list of source channels for input routing.</Doc>
<Value>Live.Track.Track.available_input_routing_channels_has_listener()<Description>Value</Description></Value>
<Doc>available_input_routing_channels_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "available_input_routing_channels". C++ signature :  bool available_input_routing_channels_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.available_input_routing_types<Description>Value</Description></Value>
<Doc>Return a list of source types for input routing.</Doc>
<Value>Live.Track.Track.available_input_routing_types_has_listener()<Description>Value</Description></Value>
<Doc>available_input_routing_types_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "available_input_routing_types". C++ signature :  bool available_input_routing_types_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.available_output_routing_channels<Description>Value</Description></Value>
<Doc>Return a list of destination channels for output routing.</Doc>
<Value>Live.Track.Track.available_output_routing_channels_has_listener()<Description>Value</Description></Value>
<Doc>available_output_routing_channels_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "available_output_routing_channels". C++ signature :  bool available_output_routing_channels_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.available_output_routing_types<Description>Value</Description></Value>
<Doc>Return a list of destination types for output routing.</Doc>
<Value>Live.Track.Track.available_output_routing_types_has_listener()<Description>Value</Description></Value>
<Doc>available_output_routing_types_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "available_output_routing_types". C++ signature :  bool available_output_routing_types_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.back_to_arranger<Description>Value</Description></Value>
<Doc>Indicates if it's possible to go back to playing back the clips in the Arranger.Setting a value 0 will go back to the Arranger playback. Setting on grouptracks will go back to the Arranger on all grouped tracks.</Doc>
<Value>Live.Track.Track.back_to_arranger_has_listener()<Description>Value</Description></Value>
<Doc>back_to_arranger_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "back_to_arranger". C++ signature :  bool back_to_arranger_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.can_be_armed<Description>Value</Description></Value>
<Doc>return True, if this Track has a valid arm property. Not all trackscan be armed (for example return Tracks or the Main Tracks).</Doc>
<Value>Live.Track.Track.can_be_frozen<Description>Value</Description></Value>
<Doc>return True, if this Track can be frozen.</Doc>
<Value>Live.Track.Track.can_show_chains<Description>Value</Description></Value>
<Doc>return True, if this Track contains a rack instrument device that is capable of showing its chains in session view.</Doc>
<Value>Live.Track.Track.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the track.</Doc>
<Value>Live.Track.Track.clip_slots<Description>Value</Description></Value>
<Doc>const access to the list of clipslots (see class AClipSlot) for this track.The list will be empty for the main and sendtracks.</Doc>
<Value>Live.Track.Track.clip_slots_has_listener()<Description>Value</Description></Value>
<Doc>clip_slots_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "clip_slots". C++ signature :  bool clip_slots_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.color<Description>Value</Description></Value>
<Doc>Get/set access to the color of the Track (RGB).</Doc>
<Value>Live.Track.Track.color_has_listener()<Description>Value</Description></Value>
<Doc>color_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "color". C++ signature :  bool color_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.color_index<Description>Value</Description></Value>
<Doc>Get/Set access to the color index of the track. Can be None for no color.</Doc>
<Value>Live.Track.Track.color_index_has_listener()<Description>Value</Description></Value>
<Doc>color_index_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "color_index". C++ signature :  bool color_index_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.create_audio_clip()<Description>Value</Description></Value>
<Doc>create_audio_clip( (Track)arg1, (object)arg2, (float)arg3) -&gt; None : Creates an audio clip referencing the file at the given path and inserts it into the arrangement at the specified time. Throws an error when called on a non-audio or a frozen track, when the specified time is outside the [0., 1576800.] range, when the track is currently being recorded into, or when the path doesn't point to a valid audio file. C++ signature :  void create_audio_clip(TTrackPyHandle,TString,double)</Doc>
<Value>Live.Track.Track.current_input_routing<Description>Value</Description></Value>
<Doc>Get/Set the name of the current active input routing.When setting a new routing, the new routing must be one of the available ones.</Doc>
<Value>Live.Track.Track.current_input_routing_has_listener()<Description>Value</Description></Value>
<Doc>current_input_routing_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "current_input_routing". C++ signature :  bool current_input_routing_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.current_input_sub_routing<Description>Value</Description></Value>
<Doc>Get/Set the current active input sub routing.When setting a new routing, the new routing must be one of the available ones.</Doc>
<Value>Live.Track.Track.current_input_sub_routing_has_listener()<Description>Value</Description></Value>
<Doc>current_input_sub_routing_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "current_input_sub_routing". C++ signature :  bool current_input_sub_routing_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.current_monitoring_state<Description>Value</Description></Value>
<Doc>Get/Set the track's current monitoring state.</Doc>
<Value>Live.Track.Track.current_monitoring_state_has_listener()<Description>Value</Description></Value>
<Doc>current_monitoring_state_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "current_monitoring_state". C++ signature :  bool current_monitoring_state_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.current_output_routing<Description>Value</Description></Value>
<Doc>Get/Set the current active output routing.When setting a new routing, the new routing must be one of the available ones.</Doc>
<Value>Live.Track.Track.current_output_routing_has_listener()<Description>Value</Description></Value>
<Doc>current_output_routing_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "current_output_routing". C++ signature :  bool current_output_routing_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.current_output_sub_routing<Description>Value</Description></Value>
<Doc>Get/Set the current active output sub routing.When setting a new routing, the new routing must be one of the available ones.</Doc>
<Value>Live.Track.Track.current_output_sub_routing_has_listener()<Description>Value</Description></Value>
<Doc>current_output_sub_routing_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "current_output_sub_routing". C++ signature :  bool current_output_sub_routing_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.data_has_listener()<Description>Value</Description></Value>
<Doc>data_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "data". C++ signature :  bool data_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.delete_clip()<Description>Value</Description></Value>
<Doc>delete_clip( (Track)arg1, (Clip)arg2) -&gt; None : Delete the given clip. Raises a runtime error when the clip belongs to another track. C++ signature :  void delete_clip(TTrackPyHandle,TPyHandle&lt;AClip&gt;)</Doc>
<Value>Live.Track.Track.delete_device()<Description>Value</Description></Value>
<Doc>delete_device( (Track)arg1, (int)arg2) -&gt; None : Delete a device identified by the index in the 'devices' list. C++ signature :  void delete_device(TTrackPyHandle,int)</Doc>
<Value>Live.Track.Track.devices<Description>Value</Description></Value>
<Doc>Return const access to all available Devices that are present in the TracksDevicechain. This tuple will also include the 'mixer_device' that every Trackalways has.</Doc>
<Value>Live.Track.Track.devices_has_listener()<Description>Value</Description></Value>
<Doc>devices_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "devices". C++ signature :  bool devices_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.duplicate_clip_slot()<Description>Value</Description></Value>
<Doc>duplicate_clip_slot( (Track)arg1, (int)arg2) -&gt; int : Duplicate a clip and put it into the next free slot and return the index of the destination slot. A new scene is created if no free slot is available. If creating the new scene would exceed the limitations, a runtime error is raised. C++ signature :  int duplicate_clip_slot(TTrackPyHandle,int)</Doc>
<Value>Live.Track.Track.duplicate_clip_to_arrangement()<Description>Value</Description></Value>
<Doc>duplicate_clip_to_arrangement( (Track)self, (Clip)clip, (float)destination_time) -&gt; Clip : Duplicate the given clip into the arrangement of this track at the provided destination time and return it. When the type of the clip and the type of the track are incompatible, a runtime error is raised. C++ signature :  TWeakPtr&lt;TPyHandle&lt;AClip&gt;&gt; duplicate_clip_to_arrangement(TTrackPyHandle,TPyHandle&lt;AClip&gt;,double)</Doc>
<Value>Live.Track.Track.fired_slot_index<Description>Value</Description></Value>
<Doc>const access to the index of the fired (and thus blinking) clipslot in this track.This index is -1 if no slot is fired and -2 if the track's stop button has been fired.</Doc>
<Value>Live.Track.Track.fired_slot_index_has_listener()<Description>Value</Description></Value>
<Doc>fired_slot_index_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "fired_slot_index". C++ signature :  bool fired_slot_index_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.fold_state<Description>Value</Description></Value>
<Doc>Get/Set whether the track is folded or not. Only available if is_foldable is True.</Doc>
<Value>Live.Track.Track.get_data()<Description>Value</Description></Value>
<Doc>get_data( (Track)arg1, (object)key, (object)default_value) -&gt; object : Get data for the given key, that was previously stored using set_data. C++ signature :  boost::python::api::object get_data(TTrackPyHandle,TString,boost::python::api::object)</Doc>
<Value>Live.Track.Track.group_track<Description>Value</Description></Value>
<Doc>return the group track if is_grouped.</Doc>
<Value>Live.Track.Track.has_audio_input<Description>Value</Description></Value>
<Doc>return True, if this Track can be feed with an Audio signal. This istrue for all Audio Tracks.</Doc>
<Value>Live.Track.Track.has_audio_input_has_listener()<Description>Value</Description></Value>
<Doc>has_audio_input_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "has_audio_input". C++ signature :  bool has_audio_input_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.has_audio_output<Description>Value</Description></Value>
<Doc>return True, if this Track sends out an Audio signal. This istrue for all Audio Tracks, and MIDI tracks with an Instrument.</Doc>
<Value>Live.Track.Track.has_audio_output_has_listener()<Description>Value</Description></Value>
<Doc>has_audio_output_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "has_audio_output". C++ signature :  bool has_audio_output_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.has_midi_input<Description>Value</Description></Value>
<Doc>return True, if this Track can be feed with an Audio signal. This istrue for all MIDI Tracks.</Doc>
<Value>Live.Track.Track.has_midi_input_has_listener()<Description>Value</Description></Value>
<Doc>has_midi_input_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "has_midi_input". C++ signature :  bool has_midi_input_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.has_midi_output<Description>Value</Description></Value>
<Doc>return True, if this Track sends out MIDI events. This istrue for all MIDI Tracks with no Instruments.</Doc>
<Value>Live.Track.Track.has_midi_output_has_listener()<Description>Value</Description></Value>
<Doc>has_midi_output_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "has_midi_output". C++ signature :  bool has_midi_output_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.implicit_arm<Description>Value</Description></Value>
<Doc>Arm the track for recording. When The track is implicitly armed, it showsin a weaker color in the live GUI and is not saved in the set.</Doc>
<Value>Live.Track.Track.implicit_arm_has_listener()<Description>Value</Description></Value>
<Doc>implicit_arm_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "implicit_arm". C++ signature :  bool implicit_arm_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.input_meter_left<Description>Value</Description></Value>
<Doc>Momentary value of left input channel meter, 0.0 to 1.0. For Audio Tracks only.</Doc>
<Value>Live.Track.Track.input_meter_left_has_listener()<Description>Value</Description></Value>
<Doc>input_meter_left_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "input_meter_left". C++ signature :  bool input_meter_left_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.input_meter_level<Description>Value</Description></Value>
<Doc>Return the MIDI or Audio meter value of the Tracks input, depending on thetype of the Track input. Meter values (MIDI or Audio) are always scaledfrom 0.0 to 1.0.</Doc>
<Value>Live.Track.Track.input_meter_level_has_listener()<Description>Value</Description></Value>
<Doc>input_meter_level_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "input_meter_level". C++ signature :  bool input_meter_level_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.input_meter_right<Description>Value</Description></Value>
<Doc>Momentary value of right input channel meter, 0.0 to 1.0. For Audio Tracks only.</Doc>
<Value>Live.Track.Track.input_meter_right_has_listener()<Description>Value</Description></Value>
<Doc>input_meter_right_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "input_meter_right". C++ signature :  bool input_meter_right_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.input_routing_channel<Description>Value</Description></Value>
<Doc>Get and set the current source channel for input routing.Raises ValueError if the type isn't one of the current values inavailable_input_routing_channels.</Doc>
<Value>Live.Track.Track.input_routing_channel_has_listener()<Description>Value</Description></Value>
<Doc>input_routing_channel_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "input_routing_channel". C++ signature :  bool input_routing_channel_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.input_routing_type<Description>Value</Description></Value>
<Doc>Get and set the current source type for input routing.Raises ValueError if the type isn't one of the current values inavailable_input_routing_types.</Doc>
<Value>Live.Track.Track.input_routing_type_has_listener()<Description>Value</Description></Value>
<Doc>input_routing_type_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "input_routing_type". C++ signature :  bool input_routing_type_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.input_routings<Description>Value</Description></Value>
<Doc>Const access to the list of available input routings.</Doc>
<Value>Live.Track.Track.input_routings_has_listener()<Description>Value</Description></Value>
<Doc>input_routings_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "input_routings". C++ signature :  bool input_routings_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.input_sub_routings<Description>Value</Description></Value>
<Doc>Return a list of all available input sub routings.</Doc>
<Value>Live.Track.Track.input_sub_routings_has_listener()<Description>Value</Description></Value>
<Doc>input_sub_routings_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "input_sub_routings". C++ signature :  bool input_sub_routings_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.is_foldable<Description>Value</Description></Value>
<Doc>return True if the track can be (un)folded to hide/reveal contained tracks.</Doc>
<Value>Live.Track.Track.is_frozen<Description>Value</Description></Value>
<Doc>return True if this Track is currently frozen. No changes should be applied to the track's devices or clips while it is frozen.</Doc>
<Value>Live.Track.Track.is_frozen_has_listener()<Description>Value</Description></Value>
<Doc>is_frozen_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_frozen". C++ signature :  bool is_frozen_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.is_grouped<Description>Value</Description></Value>
<Doc>return True if this Track is current part of a group track.</Doc>
<Value>Live.Track.Track.is_part_of_selection<Description>Value</Description></Value>
<Doc>return False if the track is not selected.</Doc>
<Value>Live.Track.Track.is_showing_chains<Description>Value</Description></Value>
<Doc>Get/Set whether a track with a rack device is showing its chains in session view.</Doc>
<Value>Live.Track.Track.is_showing_chains_has_listener()<Description>Value</Description></Value>
<Doc>is_showing_chains_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_showing_chains". C++ signature :  bool is_showing_chains_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.is_visible<Description>Value</Description></Value>
<Doc>return False if the track is hidden within a folded group track.</Doc>
<Value>Live.Track.Track.jump_in_running_session_clip()<Description>Value</Description></Value>
<Doc>jump_in_running_session_clip( (Track)arg1, (float)arg2) -&gt; None : Jump forward or backward in the currently running Sessionclip (if any) by the specified relative amount in beats. Does nothing if no Session Clip is currently running. C++ signature :  void jump_in_running_session_clip(TTrackPyHandle,double)</Doc>
<Value>Live.Track.Track.mixer_device<Description>Value</Description></Value>
<Doc>Return access to the special Device that every Track has: This Device containsthe Volume, Pan, Sendamounts, and Crossfade assignment parameters.</Doc>
<Value>Live.Track.Track.monitoring_states<Description>Value</Description></Value>
<Value>Live.Track.Track.mute<Description>Value</Description></Value>
<Doc>Mute/unmute the track.</Doc>
<Value>Live.Track.Track.mute_has_listener()<Description>Value</Description></Value>
<Doc>mute_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mute". C++ signature :  bool mute_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.muted_via_solo<Description>Value</Description></Value>
<Doc>Returns true if the track is muted because another track is soloed.</Doc>
<Value>Live.Track.Track.muted_via_solo_has_listener()<Description>Value</Description></Value>
<Doc>muted_via_solo_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "muted_via_solo". C++ signature :  bool muted_via_solo_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.name<Description>Value</Description></Value>
<Doc>Read/write access to the name of the Track, as visible in the track header.</Doc>
<Value>Live.Track.Track.name_has_listener()<Description>Value</Description></Value>
<Doc>name_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.output_meter_left<Description>Value</Description></Value>
<Doc>Momentary value of left output channel meter, 0.0 to 1.0.For tracks with audio output only.</Doc>
<Value>Live.Track.Track.output_meter_left_has_listener()<Description>Value</Description></Value>
<Doc>output_meter_left_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "output_meter_left". C++ signature :  bool output_meter_left_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.output_meter_level<Description>Value</Description></Value>
<Doc>Return the MIDI or Audio meter value of the Track output (behind themixer_device), depending on the type of the Track input, this can be a MIDIor Audio meter. Meter values (MIDI or Audio) are always scaled from 0.0 to 1.0.</Doc>
<Value>Live.Track.Track.output_meter_level_has_listener()<Description>Value</Description></Value>
<Doc>output_meter_level_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "output_meter_level". C++ signature :  bool output_meter_level_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.output_meter_right<Description>Value</Description></Value>
<Doc>Momentary value of right output channel meter, 0.0 to 1.0.For tracks with audio output only.</Doc>
<Value>Live.Track.Track.output_meter_right_has_listener()<Description>Value</Description></Value>
<Doc>output_meter_right_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "output_meter_right". C++ signature :  bool output_meter_right_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.output_routing_channel<Description>Value</Description></Value>
<Doc>Get and set the current destination channel for output routing.Raises ValueError if the channel isn't one of the current values inavailable_output_routing_channels.</Doc>
<Value>Live.Track.Track.output_routing_channel_has_listener()<Description>Value</Description></Value>
<Doc>output_routing_channel_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "output_routing_channel". C++ signature :  bool output_routing_channel_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.output_routing_type<Description>Value</Description></Value>
<Doc>Get and set the current destination type for output routing.Raises ValueError if the type isn't one of the current values inavailable_output_routing_types.</Doc>
<Value>Live.Track.Track.output_routing_type_has_listener()<Description>Value</Description></Value>
<Doc>output_routing_type_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "output_routing_type". C++ signature :  bool output_routing_type_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.output_routings<Description>Value</Description></Value>
<Doc>Const access to the list of all available output routings.</Doc>
<Value>Live.Track.Track.output_routings_has_listener()<Description>Value</Description></Value>
<Doc>output_routings_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "output_routings". C++ signature :  bool output_routings_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.output_sub_routings<Description>Value</Description></Value>
<Doc>Return a list of all available output sub routings.</Doc>
<Value>Live.Track.Track.output_sub_routings_has_listener()<Description>Value</Description></Value>
<Doc>output_sub_routings_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "output_sub_routings". C++ signature :  bool output_sub_routings_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.performance_impact<Description>Value</Description></Value>
<Doc>Reports the performance impact of this track.</Doc>
<Value>Live.Track.Track.performance_impact_has_listener()<Description>Value</Description></Value>
<Doc>performance_impact_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "performance_impact". C++ signature :  bool performance_impact_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.playing_slot_index<Description>Value</Description></Value>
<Doc>const access to the index of the currently playing clip in the track.Will be -1 when no clip is playing.</Doc>
<Value>Live.Track.Track.playing_slot_index_has_listener()<Description>Value</Description></Value>
<Doc>playing_slot_index_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "playing_slot_index". C++ signature :  bool playing_slot_index_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_arm_listener()<Description>Value</Description></Value>
<Doc>remove_arm_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "arm". C++ signature :  void remove_arm_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_arrangement_clips_listener()<Description>Value</Description></Value>
<Doc>remove_arrangement_clips_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "arrangement_clips". C++ signature :  void remove_arrangement_clips_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_available_input_routing_channels_listener()<Description>Value</Description></Value>
<Doc>remove_available_input_routing_channels_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "available_input_routing_channels". C++ signature :  void remove_available_input_routing_channels_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_available_input_routing_types_listener()<Description>Value</Description></Value>
<Doc>remove_available_input_routing_types_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "available_input_routing_types". C++ signature :  void remove_available_input_routing_types_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_available_output_routing_channels_listener()<Description>Value</Description></Value>
<Doc>remove_available_output_routing_channels_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "available_output_routing_channels". C++ signature :  void remove_available_output_routing_channels_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_available_output_routing_types_listener()<Description>Value</Description></Value>
<Doc>remove_available_output_routing_types_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "available_output_routing_types". C++ signature :  void remove_available_output_routing_types_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_back_to_arranger_listener()<Description>Value</Description></Value>
<Doc>remove_back_to_arranger_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "back_to_arranger". C++ signature :  void remove_back_to_arranger_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_clip_slots_listener()<Description>Value</Description></Value>
<Doc>remove_clip_slots_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "clip_slots". C++ signature :  void remove_clip_slots_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_color_index_listener()<Description>Value</Description></Value>
<Doc>remove_color_index_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "color_index". C++ signature :  void remove_color_index_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_color_listener()<Description>Value</Description></Value>
<Doc>remove_color_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "color". C++ signature :  void remove_color_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_current_input_routing_listener()<Description>Value</Description></Value>
<Doc>remove_current_input_routing_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "current_input_routing". C++ signature :  void remove_current_input_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_current_input_sub_routing_listener()<Description>Value</Description></Value>
<Doc>remove_current_input_sub_routing_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "current_input_sub_routing". C++ signature :  void remove_current_input_sub_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_current_monitoring_state_listener()<Description>Value</Description></Value>
<Doc>remove_current_monitoring_state_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "current_monitoring_state". C++ signature :  void remove_current_monitoring_state_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_current_output_routing_listener()<Description>Value</Description></Value>
<Doc>remove_current_output_routing_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "current_output_routing". C++ signature :  void remove_current_output_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_current_output_sub_routing_listener()<Description>Value</Description></Value>
<Doc>remove_current_output_sub_routing_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "current_output_sub_routing". C++ signature :  void remove_current_output_sub_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_data_listener()<Description>Value</Description></Value>
<Doc>remove_data_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "data". C++ signature :  void remove_data_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_devices_listener()<Description>Value</Description></Value>
<Doc>remove_devices_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "devices". C++ signature :  void remove_devices_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_fired_slot_index_listener()<Description>Value</Description></Value>
<Doc>remove_fired_slot_index_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "fired_slot_index". C++ signature :  void remove_fired_slot_index_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_has_audio_input_listener()<Description>Value</Description></Value>
<Doc>remove_has_audio_input_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "has_audio_input". C++ signature :  void remove_has_audio_input_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_has_audio_output_listener()<Description>Value</Description></Value>
<Doc>remove_has_audio_output_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "has_audio_output". C++ signature :  void remove_has_audio_output_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_has_midi_input_listener()<Description>Value</Description></Value>
<Doc>remove_has_midi_input_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "has_midi_input". C++ signature :  void remove_has_midi_input_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_has_midi_output_listener()<Description>Value</Description></Value>
<Doc>remove_has_midi_output_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "has_midi_output". C++ signature :  void remove_has_midi_output_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_implicit_arm_listener()<Description>Value</Description></Value>
<Doc>remove_implicit_arm_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "implicit_arm". C++ signature :  void remove_implicit_arm_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_input_meter_left_listener()<Description>Value</Description></Value>
<Doc>remove_input_meter_left_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "input_meter_left". C++ signature :  void remove_input_meter_left_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_input_meter_level_listener()<Description>Value</Description></Value>
<Doc>remove_input_meter_level_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "input_meter_level". C++ signature :  void remove_input_meter_level_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_input_meter_right_listener()<Description>Value</Description></Value>
<Doc>remove_input_meter_right_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "input_meter_right". C++ signature :  void remove_input_meter_right_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_input_routing_channel_listener()<Description>Value</Description></Value>
<Doc>remove_input_routing_channel_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "input_routing_channel". C++ signature :  void remove_input_routing_channel_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_input_routing_type_listener()<Description>Value</Description></Value>
<Doc>remove_input_routing_type_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "input_routing_type". C++ signature :  void remove_input_routing_type_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_input_routings_listener()<Description>Value</Description></Value>
<Doc>remove_input_routings_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "input_routings". C++ signature :  void remove_input_routings_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_input_sub_routings_listener()<Description>Value</Description></Value>
<Doc>remove_input_sub_routings_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "input_sub_routings". C++ signature :  void remove_input_sub_routings_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_is_frozen_listener()<Description>Value</Description></Value>
<Doc>remove_is_frozen_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_frozen". C++ signature :  void remove_is_frozen_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_is_showing_chains_listener()<Description>Value</Description></Value>
<Doc>remove_is_showing_chains_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_showing_chains". C++ signature :  void remove_is_showing_chains_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_mute_listener()<Description>Value</Description></Value>
<Doc>remove_mute_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mute". C++ signature :  void remove_mute_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_muted_via_solo_listener()<Description>Value</Description></Value>
<Doc>remove_muted_via_solo_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "muted_via_solo". C++ signature :  void remove_muted_via_solo_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_name_listener()<Description>Value</Description></Value>
<Doc>remove_name_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_output_meter_left_listener()<Description>Value</Description></Value>
<Doc>remove_output_meter_left_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "output_meter_left". C++ signature :  void remove_output_meter_left_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_output_meter_level_listener()<Description>Value</Description></Value>
<Doc>remove_output_meter_level_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "output_meter_level". C++ signature :  void remove_output_meter_level_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_output_meter_right_listener()<Description>Value</Description></Value>
<Doc>remove_output_meter_right_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "output_meter_right". C++ signature :  void remove_output_meter_right_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_output_routing_channel_listener()<Description>Value</Description></Value>
<Doc>remove_output_routing_channel_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "output_routing_channel". C++ signature :  void remove_output_routing_channel_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_output_routing_type_listener()<Description>Value</Description></Value>
<Doc>remove_output_routing_type_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "output_routing_type". C++ signature :  void remove_output_routing_type_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_output_routings_listener()<Description>Value</Description></Value>
<Doc>remove_output_routings_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "output_routings". C++ signature :  void remove_output_routings_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_output_sub_routings_listener()<Description>Value</Description></Value>
<Doc>remove_output_sub_routings_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "output_sub_routings". C++ signature :  void remove_output_sub_routings_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_performance_impact_listener()<Description>Value</Description></Value>
<Doc>remove_performance_impact_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "performance_impact". C++ signature :  void remove_performance_impact_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_playing_slot_index_listener()<Description>Value</Description></Value>
<Doc>remove_playing_slot_index_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "playing_slot_index". C++ signature :  void remove_playing_slot_index_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.remove_solo_listener()<Description>Value</Description></Value>
<Doc>remove_solo_listener( (Track)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "solo". C++ signature :  void remove_solo_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.set_data()<Description>Value</Description></Value>
<Doc>set_data( (Track)arg1, (object)key, (object)value) -&gt; None : Store data for the given key in this object. The data is persistent and will be restored when loading the Live Set. C++ signature :  void set_data(TTrackPyHandle,TString,boost::python::api::object)</Doc>
<Value>Live.Track.Track.solo<Description>Value</Description></Value>
<Doc>Get/Set the solo status of the track. Note that this will not disable thesolo state of any other track. If you want exclusive solo, you have to disable the solo state of the other Tracks manually.</Doc>
<Value>Live.Track.Track.solo_has_listener()<Description>Value</Description></Value>
<Doc>solo_has_listener( (Track)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "solo". C++ signature :  bool solo_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>
<Value>Live.Track.Track.stop_all_clips()<Description>Value</Description></Value>
<Doc>stop_all_clips( (Track)arg1 [, (bool)Quantized=True]) -&gt; None : Stop running and triggered clip and slots on this track. C++ signature :  void stop_all_clips(TTrackPyHandle [,bool=True])</Doc>
<Value>Live.Track.Track.view<Description>Value</Description></Value>
<Doc>Representing the view aspects of a Track.</Doc>
<Class>Live.Track.Track.View<Description>Class</Description></Class>
<Doc>Representing the view aspects of a Track.</Doc>
<Built-In>Live.Track.Track.View.add_device_insert_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>add_device_insert_mode_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "device_insert_mode" has changed. C++ signature :  void add_device_insert_mode_listener(TPyViewData&lt;ATrack&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.View.add_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ATrack&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.View.add_selected_device_listener()<Description>Built-In</Description></Built-In>
<Doc>add_selected_device_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "selected_device" has changed. C++ signature :  void add_selected_device_listener(TPyViewData&lt;ATrack&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.View.device_insert_mode_has_listener()<Description>Built-In</Description></Built-In>
<Doc>device_insert_mode_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "device_insert_mode". C++ signature :  bool device_insert_mode_has_listener(TPyViewData&lt;ATrack&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.View.is_collapsed_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ATrack&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.View.remove_device_insert_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_device_insert_mode_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "device_insert_mode". C++ signature :  void remove_device_insert_mode_listener(TPyViewData&lt;ATrack&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.View.remove_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ATrack&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.View.remove_selected_device_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_selected_device_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "selected_device". C++ signature :  void remove_selected_device_listener(TPyViewData&lt;ATrack&gt;,boost::python::api::object)</Doc>
<Built-In>Live.Track.Track.View.select_instrument()<Description>Built-In</Description></Built-In>
<Doc>select_instrument( (View)arg1) -&gt; bool : Selects the track's instrument if it has one. C++ signature :  bool select_instrument(TPyViewData&lt;ATrack&gt;)</Doc>
<Built-In>Live.Track.Track.View.selected_device_has_listener()<Description>Built-In</Description></Built-In>
<Doc>selected_device_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "selected_device". C++ signature :  bool selected_device_has_listener(TPyViewData&lt;ATrack&gt;,boost::python::api::object)</Doc>
<Value>Live.Track.Track.View.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.Track.Track.View._live_ptr<Description>Value</Description></Value>
<Value>Live.Track.Track.View.add_device_insert_mode_listener()<Description>Value</Description></Value>
<Doc>add_device_insert_mode_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "device_insert_mode" has changed. C++ signature :  void add_device_insert_mode_listener(TPyViewData&lt;ATrack&gt;,boost::python::api::object)</Doc>
<Value>Live.Track.Track.View.add_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ATrack&gt;,boost::python::api::object)</Doc>
<Value>Live.Track.Track.View.add_selected_device_listener()<Description>Value</Description></Value>
<Doc>add_selected_device_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "selected_device" has changed. C++ signature :  void add_selected_device_listener(TPyViewData&lt;ATrack&gt;,boost::python::api::object)</Doc>
<Value>Live.Track.Track.View.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the track view.</Doc>
<Value>Live.Track.Track.View.device_insert_mode<Description>Value</Description></Value>
<Doc>Get/Listen the device insertion mode of the track.  By default, it will insert devices at the end, but it can be changed to make it relative to current selection.</Doc>
<Value>Live.Track.Track.View.device_insert_mode_has_listener()<Description>Value</Description></Value>
<Doc>device_insert_mode_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "device_insert_mode". C++ signature :  bool device_insert_mode_has_listener(TPyViewData&lt;ATrack&gt;,boost::python::api::object)</Doc>
<Value>Live.Track.Track.View.is_collapsed<Description>Value</Description></Value>
<Doc>Get/Set/Listen if the track is shown collapsed in the arranger view.</Doc>
<Value>Live.Track.Track.View.is_collapsed_has_listener()<Description>Value</Description></Value>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ATrack&gt;,boost::python::api::object)</Doc>
<Value>Live.Track.Track.View.remove_device_insert_mode_listener()<Description>Value</Description></Value>
<Doc>remove_device_insert_mode_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "device_insert_mode". C++ signature :  void remove_device_insert_mode_listener(TPyViewData&lt;ATrack&gt;,boost::python::api::object)</Doc>
<Value>Live.Track.Track.View.remove_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ATrack&gt;,boost::python::api::object)</Doc>
<Value>Live.Track.Track.View.remove_selected_device_listener()<Description>Value</Description></Value>
<Doc>remove_selected_device_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "selected_device". C++ signature :  void remove_selected_device_listener(TPyViewData&lt;ATrack&gt;,boost::python::api::object)</Doc>
<Value>Live.Track.Track.View.select_instrument()<Description>Value</Description></Value>
<Doc>select_instrument( (View)arg1) -&gt; bool : Selects the track's instrument if it has one. C++ signature :  bool select_instrument(TPyViewData&lt;ATrack&gt;)</Doc>
<Value>Live.Track.Track.View.selected_device<Description>Value</Description></Value>
<Doc>Get/Set/Listen the insertion mode of the device.  While in insertion mode, loading new devices from the browser will place devices at the selected position.</Doc>
<Value>Live.Track.Track.View.selected_device_has_listener()<Description>Value</Description></Value>
<Doc>selected_device_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "selected_device". C++ signature :  bool selected_device_has_listener(TPyViewData&lt;ATrack&gt;,boost::python::api::object)</Doc>
<Class>Live.Track.Track.monitoring_states<Description>Class</Description></Class>
<Built-In>Live.Track.Track.monitoring_states.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Track.Track.monitoring_states.AUTO<Description>Value</Description></Value>
<Value>Live.Track.Track.monitoring_states.IN<Description>Value</Description></Value>
<Value>Live.Track.Track.monitoring_states.OFF<Description>Value</Description></Value>
<Doc>abs(self)</Doc>
<Value>Live.Track.Track.monitoring_states.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.Track.Track.monitoring_states.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.Track.Track.monitoring_states.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.Track.Track.monitoring_states.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.Track.Track.monitoring_states.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.Track.Track.monitoring_states.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.Track.Track.monitoring_states.name<Description>Value</Description></Value>
<Value>Live.Track.Track.monitoring_states.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.Track.Track.monitoring_states.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.Track.Track.monitoring_states.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.Track.Track.monitoring_states.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.Track.Track.monitoring_states.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Module>Live.TuningSystem<Description>Module</Description></Module>
<Class>Live.TuningSystem.PitchClassAndOctave<Description>Class</Description></Class>
<Doc>This class represents a PitchClassAndOctave type.</Doc>
<Value>Live.TuningSystem.PitchClassAndOctave.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.TuningSystem.PitchClassAndOctave.index_in_octave<Description>Value</Description></Value>
<Doc>A PitchClassAndOctave's index within the pseudo octave.</Doc>
<Value>Live.TuningSystem.PitchClassAndOctave.octave<Description>Value</Description></Value>
<Doc>A PitchClassAndOctave's octave.</Doc>
<Class>Live.TuningSystem.ReferencePitch<Description>Class</Description></Class>
<Doc>This class represents a ReferencePitch type.</Doc>
<Value>Live.TuningSystem.ReferencePitch.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.TuningSystem.ReferencePitch.frequency<Description>Value</Description></Value>
<Doc>A ReferencePitch's frequency in Hz.</Doc>
<Value>Live.TuningSystem.ReferencePitch.index_in_octave<Description>Value</Description></Value>
<Doc>A ReferencePitch's index within the pseudo octave.</Doc>
<Value>Live.TuningSystem.ReferencePitch.octave<Description>Value</Description></Value>
<Doc>A ReferencePitch's octave.</Doc>
<Class>Live.TuningSystem.TuningSystem<Description>Class</Description></Class>
<Doc>Represents a Tuning System and its properties.</Doc>
<Built-In>Live.TuningSystem.TuningSystem.add_highest_note_listener()<Description>Built-In</Description></Built-In>
<Doc>add_highest_note_listener( (TuningSystem)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "highest_note" has changed. C++ signature :  void add_highest_note_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Built-In>Live.TuningSystem.TuningSystem.add_lowest_note_listener()<Description>Built-In</Description></Built-In>
<Doc>add_lowest_note_listener( (TuningSystem)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "lowest_note" has changed. C++ signature :  void add_lowest_note_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Built-In>Live.TuningSystem.TuningSystem.add_name_listener()<Description>Built-In</Description></Built-In>
<Doc>add_name_listener( (TuningSystem)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Built-In>Live.TuningSystem.TuningSystem.add_note_tunings_listener()<Description>Built-In</Description></Built-In>
<Doc>add_note_tunings_listener( (TuningSystem)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "note_tunings" has changed. C++ signature :  void add_note_tunings_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Built-In>Live.TuningSystem.TuningSystem.add_reference_pitch_listener()<Description>Built-In</Description></Built-In>
<Doc>add_reference_pitch_listener( (TuningSystem)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "reference_pitch" has changed. C++ signature :  void add_reference_pitch_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Built-In>Live.TuningSystem.TuningSystem.highest_note_has_listener()<Description>Built-In</Description></Built-In>
<Doc>highest_note_has_listener( (TuningSystem)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "highest_note". C++ signature :  bool highest_note_has_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Built-In>Live.TuningSystem.TuningSystem.lowest_note_has_listener()<Description>Built-In</Description></Built-In>
<Doc>lowest_note_has_listener( (TuningSystem)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "lowest_note". C++ signature :  bool lowest_note_has_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Built-In>Live.TuningSystem.TuningSystem.name_has_listener()<Description>Built-In</Description></Built-In>
<Doc>name_has_listener( (TuningSystem)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Built-In>Live.TuningSystem.TuningSystem.note_tunings_has_listener()<Description>Built-In</Description></Built-In>
<Doc>note_tunings_has_listener( (TuningSystem)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "note_tunings". C++ signature :  bool note_tunings_has_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Built-In>Live.TuningSystem.TuningSystem.reference_pitch_has_listener()<Description>Built-In</Description></Built-In>
<Doc>reference_pitch_has_listener( (TuningSystem)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "reference_pitch". C++ signature :  bool reference_pitch_has_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Built-In>Live.TuningSystem.TuningSystem.remove_highest_note_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_highest_note_listener( (TuningSystem)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "highest_note". C++ signature :  void remove_highest_note_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Built-In>Live.TuningSystem.TuningSystem.remove_lowest_note_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_lowest_note_listener( (TuningSystem)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "lowest_note". C++ signature :  void remove_lowest_note_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Built-In>Live.TuningSystem.TuningSystem.remove_name_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_name_listener( (TuningSystem)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Built-In>Live.TuningSystem.TuningSystem.remove_note_tunings_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_note_tunings_listener( (TuningSystem)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "note_tunings". C++ signature :  void remove_note_tunings_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Built-In>Live.TuningSystem.TuningSystem.remove_reference_pitch_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_reference_pitch_listener( (TuningSystem)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "reference_pitch". C++ signature :  void remove_reference_pitch_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Value>Live.TuningSystem.TuningSystem.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.TuningSystem.TuningSystem._live_ptr<Description>Value</Description></Value>
<Value>Live.TuningSystem.TuningSystem.add_highest_note_listener()<Description>Value</Description></Value>
<Doc>add_highest_note_listener( (TuningSystem)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "highest_note" has changed. C++ signature :  void add_highest_note_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Value>Live.TuningSystem.TuningSystem.add_lowest_note_listener()<Description>Value</Description></Value>
<Doc>add_lowest_note_listener( (TuningSystem)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "lowest_note" has changed. C++ signature :  void add_lowest_note_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Value>Live.TuningSystem.TuningSystem.add_name_listener()<Description>Value</Description></Value>
<Doc>add_name_listener( (TuningSystem)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Value>Live.TuningSystem.TuningSystem.add_note_tunings_listener()<Description>Value</Description></Value>
<Doc>add_note_tunings_listener( (TuningSystem)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "note_tunings" has changed. C++ signature :  void add_note_tunings_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Value>Live.TuningSystem.TuningSystem.add_reference_pitch_listener()<Description>Value</Description></Value>
<Doc>add_reference_pitch_listener( (TuningSystem)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "reference_pitch" has changed. C++ signature :  void add_reference_pitch_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Value>Live.TuningSystem.TuningSystem.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the TuningSystem.</Doc>
<Value>Live.TuningSystem.TuningSystem.highest_note<Description>Value</Description></Value>
<Doc>Get/Set the highest note of the current tuning system, where the first entry isthe index within the pseudo octave and the second entry is the octave.</Doc>
<Value>Live.TuningSystem.TuningSystem.highest_note_has_listener()<Description>Value</Description></Value>
<Doc>highest_note_has_listener( (TuningSystem)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "highest_note". C++ signature :  bool highest_note_has_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Value>Live.TuningSystem.TuningSystem.lowest_note<Description>Value</Description></Value>
<Doc>Get/Set the lowest note of the current tuning system, where the first entry isthe index within the pseudo octave and the second entry is the octave.</Doc>
<Value>Live.TuningSystem.TuningSystem.lowest_note_has_listener()<Description>Value</Description></Value>
<Doc>lowest_note_has_listener( (TuningSystem)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "lowest_note". C++ signature :  bool lowest_note_has_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Value>Live.TuningSystem.TuningSystem.name<Description>Value</Description></Value>
<Doc>Get/Set the name of the currently active tuning system.</Doc>
<Value>Live.TuningSystem.TuningSystem.name_has_listener()<Description>Value</Description></Value>
<Doc>name_has_listener( (TuningSystem)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Value>Live.TuningSystem.TuningSystem.note_tunings<Description>Value</Description></Value>
<Doc>Get/Set the currently active tuning system's note tunings, specified in Cents, where 100 Cents is one semi-tone in equal temperament.</Doc>
<Value>Live.TuningSystem.TuningSystem.note_tunings_has_listener()<Description>Value</Description></Value>
<Doc>note_tunings_has_listener( (TuningSystem)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "note_tunings". C++ signature :  bool note_tunings_has_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Value>Live.TuningSystem.TuningSystem.number_of_notes_in_pseudo_octave<Description>Value</Description></Value>
<Doc>Get the number of notes in the pseudo octave.</Doc>
<Value>Live.TuningSystem.TuningSystem.pseudo_octave_in_cents<Description>Value</Description></Value>
<Doc>Get the pseudo octave in cents for the currently active tuning system.</Doc>
<Value>Live.TuningSystem.TuningSystem.reference_pitch<Description>Value</Description></Value>
<Doc>Get/Set the reference pitch the currently active tuning system.</Doc>
<Value>Live.TuningSystem.TuningSystem.reference_pitch_has_listener()<Description>Value</Description></Value>
<Doc>reference_pitch_has_listener( (TuningSystem)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "reference_pitch". C++ signature :  bool reference_pitch_has_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Value>Live.TuningSystem.TuningSystem.remove_highest_note_listener()<Description>Value</Description></Value>
<Doc>remove_highest_note_listener( (TuningSystem)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "highest_note". C++ signature :  void remove_highest_note_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Value>Live.TuningSystem.TuningSystem.remove_lowest_note_listener()<Description>Value</Description></Value>
<Doc>remove_lowest_note_listener( (TuningSystem)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "lowest_note". C++ signature :  void remove_lowest_note_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Value>Live.TuningSystem.TuningSystem.remove_name_listener()<Description>Value</Description></Value>
<Doc>remove_name_listener( (TuningSystem)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Value>Live.TuningSystem.TuningSystem.remove_note_tunings_listener()<Description>Value</Description></Value>
<Doc>remove_note_tunings_listener( (TuningSystem)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "note_tunings". C++ signature :  void remove_note_tunings_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Value>Live.TuningSystem.TuningSystem.remove_reference_pitch_listener()<Description>Value</Description></Value>
<Doc>remove_reference_pitch_listener( (TuningSystem)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "reference_pitch". C++ signature :  void remove_reference_pitch_listener(TPyHandle&lt;ATuningSystem&gt;,boost::python::api::object)</Doc>
<Module>Live.WavetableDevice<Description>Module</Description></Module>
<Class>Live.WavetableDevice.EffectMode<Description>Class</Description></Class>
<Built-In>Live.WavetableDevice.EffectMode.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.WavetableDevice.EffectMode.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.WavetableDevice.EffectMode.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.WavetableDevice.EffectMode.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.WavetableDevice.EffectMode.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.WavetableDevice.EffectMode.frequency_modulation<Description>Value</Description></Value>
<Value>Live.WavetableDevice.EffectMode.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.WavetableDevice.EffectMode.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.WavetableDevice.EffectMode.name<Description>Value</Description></Value>
<Value>Live.WavetableDevice.EffectMode.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.WavetableDevice.EffectMode.none<Description>Value</Description></Value>
<Value>Live.WavetableDevice.EffectMode.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.WavetableDevice.EffectMode.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.WavetableDevice.EffectMode.sync_and_pulse_width<Description>Value</Description></Value>
<Value>Live.WavetableDevice.EffectMode.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.WavetableDevice.EffectMode.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.WavetableDevice.EffectMode.warp_and_fold<Description>Value</Description></Value>
<Class>Live.WavetableDevice.FilterRouting<Description>Class</Description></Class>
<Built-In>Live.WavetableDevice.FilterRouting.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.WavetableDevice.FilterRouting.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.WavetableDevice.FilterRouting.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.WavetableDevice.FilterRouting.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.WavetableDevice.FilterRouting.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.WavetableDevice.FilterRouting.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.WavetableDevice.FilterRouting.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.WavetableDevice.FilterRouting.name<Description>Value</Description></Value>
<Value>Live.WavetableDevice.FilterRouting.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.WavetableDevice.FilterRouting.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.WavetableDevice.FilterRouting.parallel<Description>Value</Description></Value>
<Value>Live.WavetableDevice.FilterRouting.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.WavetableDevice.FilterRouting.serial<Description>Value</Description></Value>
<Value>Live.WavetableDevice.FilterRouting.split<Description>Value</Description></Value>
<Value>Live.WavetableDevice.FilterRouting.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.WavetableDevice.FilterRouting.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.WavetableDevice.ModulationSource<Description>Class</Description></Class>
<Built-In>Live.WavetableDevice.ModulationSource.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.WavetableDevice.ModulationSource.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.WavetableDevice.ModulationSource.amp_envelope<Description>Value</Description></Value>
<Value>Live.WavetableDevice.ModulationSource.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.WavetableDevice.ModulationSource.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.WavetableDevice.ModulationSource.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.WavetableDevice.ModulationSource.envelope_2<Description>Value</Description></Value>
<Value>Live.WavetableDevice.ModulationSource.envelope_3<Description>Value</Description></Value>
<Value>Live.WavetableDevice.ModulationSource.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.WavetableDevice.ModulationSource.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.WavetableDevice.ModulationSource.lfo_1<Description>Value</Description></Value>
<Value>Live.WavetableDevice.ModulationSource.lfo_2<Description>Value</Description></Value>
<Value>Live.WavetableDevice.ModulationSource.midi_channel_pressure<Description>Value</Description></Value>
<Value>Live.WavetableDevice.ModulationSource.midi_mod_wheel<Description>Value</Description></Value>
<Value>Live.WavetableDevice.ModulationSource.midi_note<Description>Value</Description></Value>
<Value>Live.WavetableDevice.ModulationSource.midi_pitch_bend<Description>Value</Description></Value>
<Value>Live.WavetableDevice.ModulationSource.midi_random<Description>Value</Description></Value>
<Value>Live.WavetableDevice.ModulationSource.midi_velocity<Description>Value</Description></Value>
<Value>Live.WavetableDevice.ModulationSource.name<Description>Value</Description></Value>
<Value>Live.WavetableDevice.ModulationSource.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.WavetableDevice.ModulationSource.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.WavetableDevice.ModulationSource.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.WavetableDevice.ModulationSource.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.WavetableDevice.ModulationSource.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.WavetableDevice.UnisonMode<Description>Class</Description></Class>
<Built-In>Live.WavetableDevice.UnisonMode.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.WavetableDevice.UnisonMode.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.WavetableDevice.UnisonMode.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.WavetableDevice.UnisonMode.classic<Description>Value</Description></Value>
<Value>Live.WavetableDevice.UnisonMode.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.WavetableDevice.UnisonMode.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.WavetableDevice.UnisonMode.fast_shimmer<Description>Value</Description></Value>
<Value>Live.WavetableDevice.UnisonMode.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.WavetableDevice.UnisonMode.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.WavetableDevice.UnisonMode.name<Description>Value</Description></Value>
<Value>Live.WavetableDevice.UnisonMode.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.WavetableDevice.UnisonMode.none<Description>Value</Description></Value>
<Value>Live.WavetableDevice.UnisonMode.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.WavetableDevice.UnisonMode.phase_sync<Description>Value</Description></Value>
<Value>Live.WavetableDevice.UnisonMode.position_spread<Description>Value</Description></Value>
<Value>Live.WavetableDevice.UnisonMode.random_note<Description>Value</Description></Value>
<Value>Live.WavetableDevice.UnisonMode.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.WavetableDevice.UnisonMode.slow_shimmer<Description>Value</Description></Value>
<Value>Live.WavetableDevice.UnisonMode.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.WavetableDevice.UnisonMode.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.WavetableDevice.VoiceCount<Description>Class</Description></Class>
<Built-In>Live.WavetableDevice.VoiceCount.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.WavetableDevice.VoiceCount.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.WavetableDevice.VoiceCount.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.WavetableDevice.VoiceCount.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.WavetableDevice.VoiceCount.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.WavetableDevice.VoiceCount.eight<Description>Value</Description></Value>
<Value>Live.WavetableDevice.VoiceCount.five<Description>Value</Description></Value>
<Value>Live.WavetableDevice.VoiceCount.four<Description>Value</Description></Value>
<Value>Live.WavetableDevice.VoiceCount.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.WavetableDevice.VoiceCount.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.WavetableDevice.VoiceCount.name<Description>Value</Description></Value>
<Value>Live.WavetableDevice.VoiceCount.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.WavetableDevice.VoiceCount.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.WavetableDevice.VoiceCount.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.WavetableDevice.VoiceCount.seven<Description>Value</Description></Value>
<Value>Live.WavetableDevice.VoiceCount.six<Description>Value</Description></Value>
<Value>Live.WavetableDevice.VoiceCount.three<Description>Value</Description></Value>
<Value>Live.WavetableDevice.VoiceCount.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.WavetableDevice.VoiceCount.two<Description>Value</Description></Value>
<Value>Live.WavetableDevice.VoiceCount.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.WavetableDevice.Voicing<Description>Class</Description></Class>
<Built-In>Live.WavetableDevice.Voicing.from_bytes()<Description>Built-In</Description></Built-In>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.WavetableDevice.Voicing.type<Description>Value</Description></Value>
<Doc>type(object) -&gt; the object's typetype(name, bases, dict, **kwds) -&gt; a new type</Doc>
<Value>Live.WavetableDevice.Voicing.bit_length<Description>Value</Description></Value>
<Doc>Number of bits necessary to represent self in binary.&gt;&gt;&gt; bin(37)'0b100101'&gt;&gt;&gt; (37).bit_length()6</Doc>
<Value>Live.WavetableDevice.Voicing.conjugate<Description>Value</Description></Value>
<Doc>Returns self, the complex conjugate of any int.</Doc>
<Value>Live.WavetableDevice.Voicing.denominator<Description>Value</Description></Value>
<Doc>the denominator of a rational number in lowest terms</Doc>
<Value>Live.WavetableDevice.Voicing.from_bytes()<Description>Value</Description></Value>
<Doc>Return the integer represented by the given array of bytes.  bytes Holds the array of bytes to convert.  The argument must either support the buffer protocol or be an iterable object producing bytes. Bytes and bytearray are examples of built-in objects that support the buffer protocol.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Indicates whether two's complement is used to represent the integer.</Doc>
<Value>Live.WavetableDevice.Voicing.imag<Description>Value</Description></Value>
<Doc>the imaginary part of a complex number</Doc>
<Value>Live.WavetableDevice.Voicing.mono<Description>Value</Description></Value>
<Value>Live.WavetableDevice.Voicing.name<Description>Value</Description></Value>
<Value>Live.WavetableDevice.Voicing.names<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Value>Live.WavetableDevice.Voicing.numerator<Description>Value</Description></Value>
<Doc>the numerator of a rational number in lowest terms</Doc>
<Value>Live.WavetableDevice.Voicing.poly<Description>Value</Description></Value>
<Value>Live.WavetableDevice.Voicing.real<Description>Value</Description></Value>
<Doc>the real part of a complex number</Doc>
<Value>Live.WavetableDevice.Voicing.to_bytes<Description>Value</Description></Value>
<Doc>Return an array of bytes representing an integer.  length Length of bytes object to use.  An OverflowError is raised if the integer is not representable with the given number of bytes.  Default is length 1.  byteorder The byte order used to represent the integer.  If byteorder is 'big', the most significant byte is at the beginning of the byte array.  If byteorder is 'little', the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use `sys.byteorder' as the byte order value.  Default is to use 'big'.  signed Determines whether two's complement is used to represent the integer. If signed is False and a negative integer is given, an OverflowError is raised.</Doc>
<Value>Live.WavetableDevice.Voicing.values<Description>Value</Description></Value>
<Doc>dict() -&gt; new empty dictionarydict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairsdict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable:  d[k] = vdict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</Doc>
<Class>Live.WavetableDevice.WavetableDevice<Description>Class</Description></Class>
<Doc>This class represents a Wavetable device.</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.add_filter_routing_listener()<Description>Built-In</Description></Built-In>
<Doc>add_filter_routing_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "filter_routing" has changed. C++ signature :  void add_filter_routing_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.add_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.add_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.add_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.add_modulation_matrix_changed_listener()<Description>Built-In</Description></Built-In>
<Doc>add_modulation_matrix_changed_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "modulation_matrix_changed" has changed. C++ signature :  void add_modulation_matrix_changed_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.add_mono_poly_listener()<Description>Built-In</Description></Built-In>
<Doc>add_mono_poly_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mono_poly" has changed. C++ signature :  void add_mono_poly_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.add_name_listener()<Description>Built-In</Description></Built-In>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.add_oscillator_1_effect_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>add_oscillator_1_effect_mode_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "oscillator_1_effect_mode" has changed. C++ signature :  void add_oscillator_1_effect_mode_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.add_oscillator_1_wavetable_category_listener()<Description>Built-In</Description></Built-In>
<Doc>add_oscillator_1_wavetable_category_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "oscillator_1_wavetable_category" has changed. C++ signature :  void add_oscillator_1_wavetable_category_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.add_oscillator_1_wavetable_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_oscillator_1_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "oscillator_1_wavetable_index" has changed. C++ signature :  void add_oscillator_1_wavetable_index_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.add_oscillator_1_wavetables_listener()<Description>Built-In</Description></Built-In>
<Doc>add_oscillator_1_wavetables_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "oscillator_1_wavetables" has changed. C++ signature :  void add_oscillator_1_wavetables_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.add_oscillator_2_effect_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>add_oscillator_2_effect_mode_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "oscillator_2_effect_mode" has changed. C++ signature :  void add_oscillator_2_effect_mode_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.add_oscillator_2_wavetable_category_listener()<Description>Built-In</Description></Built-In>
<Doc>add_oscillator_2_wavetable_category_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "oscillator_2_wavetable_category" has changed. C++ signature :  void add_oscillator_2_wavetable_category_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.add_oscillator_2_wavetable_index_listener()<Description>Built-In</Description></Built-In>
<Doc>add_oscillator_2_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "oscillator_2_wavetable_index" has changed. C++ signature :  void add_oscillator_2_wavetable_index_listener(TWavetableDevicePyHandle,boost::python::api::object)add_oscillator_2_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "oscillator_2_wavetable_index" has changed. C++ signature :  void add_oscillator_2_wavetable_index_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.add_oscillator_2_wavetables_listener()<Description>Built-In</Description></Built-In>
<Doc>add_oscillator_2_wavetables_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "oscillator_2_wavetables" has changed. C++ signature :  void add_oscillator_2_wavetables_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.add_parameter_to_modulation_matrix()<Description>Built-In</Description></Built-In>
<Doc>add_parameter_to_modulation_matrix( (WavetableDevice)self, (DeviceParameter)parameter) -&gt; int : Add a non-pitch parameter to the modulation matrix. C++ signature :  int add_parameter_to_modulation_matrix(TWavetableDevicePyHandle,TPyHandle&lt;ATimeableValue&gt;)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.add_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.add_poly_voices_listener()<Description>Built-In</Description></Built-In>
<Doc>add_poly_voices_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "poly_voices" has changed. C++ signature :  void add_poly_voices_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.add_unison_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>add_unison_mode_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "unison_mode" has changed. C++ signature :  void add_unison_mode_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.add_unison_voice_count_listener()<Description>Built-In</Description></Built-In>
<Doc>add_unison_voice_count_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "unison_voice_count" has changed. C++ signature :  void add_unison_voice_count_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.add_visible_modulation_target_names_listener()<Description>Built-In</Description></Built-In>
<Doc>add_visible_modulation_target_names_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "visible_modulation_target_names" has changed. C++ signature :  void add_visible_modulation_target_names_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.filter_routing_has_listener()<Description>Built-In</Description></Built-In>
<Doc>filter_routing_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "filter_routing". C++ signature :  bool filter_routing_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.get_modulation_target_parameter_name()<Description>Built-In</Description></Built-In>
<Doc>get_modulation_target_parameter_name( (WavetableDevice)self, (int)target_index) -&gt; str : Get the parameter name of the modulation target at the given index. C++ signature :  TString get_modulation_target_parameter_name(TWavetableDevicePyHandle,int)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.get_modulation_value()<Description>Built-In</Description></Built-In>
<Doc>get_modulation_value( (WavetableDevice)self, (int)target_index, (int)source) -&gt; float : Get the value of a modulation amount for the given target-source connection. C++ signature :  float get_modulation_value(TWavetableDevicePyHandle,int,int)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.is_active_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.is_parameter_modulatable()<Description>Built-In</Description></Built-In>
<Doc>is_parameter_modulatable( (WavetableDevice)self, (DeviceParameter)parameter) -&gt; bool : Indicate whether the parameter is modulatable. Note that pitch parameters only exist in python and must be handled there. C++ signature :  bool is_parameter_modulatable(TWavetableDevicePyHandle,TPyHandle&lt;ATimeableValue&gt;)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.latency_in_ms_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.latency_in_samples_has_listener()<Description>Built-In</Description></Built-In>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.modulation_matrix_changed_has_listener()<Description>Built-In</Description></Built-In>
<Doc>modulation_matrix_changed_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "modulation_matrix_changed". C++ signature :  bool modulation_matrix_changed_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.mono_poly_has_listener()<Description>Built-In</Description></Built-In>
<Doc>mono_poly_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mono_poly". C++ signature :  bool mono_poly_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.name_has_listener()<Description>Built-In</Description></Built-In>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.oscillator_1_effect_mode_has_listener()<Description>Built-In</Description></Built-In>
<Doc>oscillator_1_effect_mode_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "oscillator_1_effect_mode". C++ signature :  bool oscillator_1_effect_mode_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.oscillator_1_wavetable_category_has_listener()<Description>Built-In</Description></Built-In>
<Doc>oscillator_1_wavetable_category_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "oscillator_1_wavetable_category". C++ signature :  bool oscillator_1_wavetable_category_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.oscillator_1_wavetable_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>oscillator_1_wavetable_index_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "oscillator_1_wavetable_index". C++ signature :  bool oscillator_1_wavetable_index_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.oscillator_1_wavetables_has_listener()<Description>Built-In</Description></Built-In>
<Doc>oscillator_1_wavetables_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "oscillator_1_wavetables". C++ signature :  bool oscillator_1_wavetables_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.oscillator_2_effect_mode_has_listener()<Description>Built-In</Description></Built-In>
<Doc>oscillator_2_effect_mode_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "oscillator_2_effect_mode". C++ signature :  bool oscillator_2_effect_mode_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.oscillator_2_wavetable_category_has_listener()<Description>Built-In</Description></Built-In>
<Doc>oscillator_2_wavetable_category_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "oscillator_2_wavetable_category". C++ signature :  bool oscillator_2_wavetable_category_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.oscillator_2_wavetable_index_has_listener()<Description>Built-In</Description></Built-In>
<Doc>oscillator_2_wavetable_index_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "oscillator_2_wavetable_index". C++ signature :  bool oscillator_2_wavetable_index_has_listener(TWavetableDevicePyHandle,boost::python::api::object)oscillator_2_wavetable_index_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "oscillator_2_wavetable_index". C++ signature :  bool oscillator_2_wavetable_index_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.oscillator_2_wavetables_has_listener()<Description>Built-In</Description></Built-In>
<Doc>oscillator_2_wavetables_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "oscillator_2_wavetables". C++ signature :  bool oscillator_2_wavetables_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.parameters_has_listener()<Description>Built-In</Description></Built-In>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.poly_voices_has_listener()<Description>Built-In</Description></Built-In>
<Doc>poly_voices_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "poly_voices". C++ signature :  bool poly_voices_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.remove_filter_routing_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_filter_routing_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "filter_routing". C++ signature :  void remove_filter_routing_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.remove_is_active_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.remove_latency_in_ms_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.remove_latency_in_samples_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.remove_modulation_matrix_changed_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_modulation_matrix_changed_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "modulation_matrix_changed". C++ signature :  void remove_modulation_matrix_changed_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.remove_mono_poly_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_mono_poly_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mono_poly". C++ signature :  void remove_mono_poly_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.remove_name_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.remove_oscillator_1_effect_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_oscillator_1_effect_mode_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "oscillator_1_effect_mode". C++ signature :  void remove_oscillator_1_effect_mode_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.remove_oscillator_1_wavetable_category_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_oscillator_1_wavetable_category_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "oscillator_1_wavetable_category". C++ signature :  void remove_oscillator_1_wavetable_category_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.remove_oscillator_1_wavetable_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_oscillator_1_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "oscillator_1_wavetable_index". C++ signature :  void remove_oscillator_1_wavetable_index_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.remove_oscillator_1_wavetables_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_oscillator_1_wavetables_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "oscillator_1_wavetables". C++ signature :  void remove_oscillator_1_wavetables_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.remove_oscillator_2_effect_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_oscillator_2_effect_mode_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "oscillator_2_effect_mode". C++ signature :  void remove_oscillator_2_effect_mode_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.remove_oscillator_2_wavetable_category_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_oscillator_2_wavetable_category_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "oscillator_2_wavetable_category". C++ signature :  void remove_oscillator_2_wavetable_category_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.remove_oscillator_2_wavetable_index_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_oscillator_2_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "oscillator_2_wavetable_index". C++ signature :  void remove_oscillator_2_wavetable_index_listener(TWavetableDevicePyHandle,boost::python::api::object)remove_oscillator_2_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "oscillator_2_wavetable_index". C++ signature :  void remove_oscillator_2_wavetable_index_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.remove_oscillator_2_wavetables_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_oscillator_2_wavetables_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "oscillator_2_wavetables". C++ signature :  void remove_oscillator_2_wavetables_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.remove_parameters_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.remove_poly_voices_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_poly_voices_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "poly_voices". C++ signature :  void remove_poly_voices_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.remove_unison_mode_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_unison_mode_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "unison_mode". C++ signature :  void remove_unison_mode_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.remove_unison_voice_count_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_unison_voice_count_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "unison_voice_count". C++ signature :  void remove_unison_voice_count_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.remove_visible_modulation_target_names_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_visible_modulation_target_names_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "visible_modulation_target_names". C++ signature :  void remove_visible_modulation_target_names_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.set_modulation_value()<Description>Built-In</Description></Built-In>
<Doc>set_modulation_value( (WavetableDevice)self, (int)target_index, (int)source, (float)value) -&gt; None : Set the value of a modulation amount for the given target-source connection. C++ signature :  void set_modulation_value(TWavetableDevicePyHandle,int,int,float)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.store_chosen_bank()<Description>Built-In</Description></Built-In>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.unison_mode_has_listener()<Description>Built-In</Description></Built-In>
<Doc>unison_mode_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "unison_mode". C++ signature :  bool unison_mode_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.unison_voice_count_has_listener()<Description>Built-In</Description></Built-In>
<Doc>unison_voice_count_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "unison_voice_count". C++ signature :  bool unison_voice_count_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.visible_modulation_target_names_has_listener()<Description>Built-In</Description></Built-In>
<Doc>visible_modulation_target_names_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "visible_modulation_target_names". C++ signature :  bool visible_modulation_target_names_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.View<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.WavetableDevice.WavetableDevice._live_ptr<Description>Value</Description></Value>
<Value>Live.WavetableDevice.WavetableDevice.add_filter_routing_listener()<Description>Value</Description></Value>
<Doc>add_filter_routing_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "filter_routing" has changed. C++ signature :  void add_filter_routing_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.add_is_active_listener()<Description>Value</Description></Value>
<Doc>add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.add_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_ms" has changed. C++ signature :  void add_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.add_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>add_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "latency_in_samples" has changed. C++ signature :  void add_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.add_modulation_matrix_changed_listener()<Description>Value</Description></Value>
<Doc>add_modulation_matrix_changed_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "modulation_matrix_changed" has changed. C++ signature :  void add_modulation_matrix_changed_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.add_mono_poly_listener()<Description>Value</Description></Value>
<Doc>add_mono_poly_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "mono_poly" has changed. C++ signature :  void add_mono_poly_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.add_name_listener()<Description>Value</Description></Value>
<Doc>add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.add_oscillator_1_effect_mode_listener()<Description>Value</Description></Value>
<Doc>add_oscillator_1_effect_mode_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "oscillator_1_effect_mode" has changed. C++ signature :  void add_oscillator_1_effect_mode_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.add_oscillator_1_wavetable_category_listener()<Description>Value</Description></Value>
<Doc>add_oscillator_1_wavetable_category_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "oscillator_1_wavetable_category" has changed. C++ signature :  void add_oscillator_1_wavetable_category_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.add_oscillator_1_wavetable_index_listener()<Description>Value</Description></Value>
<Doc>add_oscillator_1_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "oscillator_1_wavetable_index" has changed. C++ signature :  void add_oscillator_1_wavetable_index_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.add_oscillator_1_wavetables_listener()<Description>Value</Description></Value>
<Doc>add_oscillator_1_wavetables_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "oscillator_1_wavetables" has changed. C++ signature :  void add_oscillator_1_wavetables_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.add_oscillator_2_effect_mode_listener()<Description>Value</Description></Value>
<Doc>add_oscillator_2_effect_mode_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "oscillator_2_effect_mode" has changed. C++ signature :  void add_oscillator_2_effect_mode_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.add_oscillator_2_wavetable_category_listener()<Description>Value</Description></Value>
<Doc>add_oscillator_2_wavetable_category_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "oscillator_2_wavetable_category" has changed. C++ signature :  void add_oscillator_2_wavetable_category_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.add_oscillator_2_wavetable_index_listener()<Description>Value</Description></Value>
<Doc>add_oscillator_2_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "oscillator_2_wavetable_index" has changed. C++ signature :  void add_oscillator_2_wavetable_index_listener(TWavetableDevicePyHandle,boost::python::api::object)add_oscillator_2_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "oscillator_2_wavetable_index" has changed. C++ signature :  void add_oscillator_2_wavetable_index_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.add_oscillator_2_wavetables_listener()<Description>Value</Description></Value>
<Doc>add_oscillator_2_wavetables_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "oscillator_2_wavetables" has changed. C++ signature :  void add_oscillator_2_wavetables_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.add_parameter_to_modulation_matrix()<Description>Value</Description></Value>
<Doc>add_parameter_to_modulation_matrix( (WavetableDevice)self, (DeviceParameter)parameter) -&gt; int : Add a non-pitch parameter to the modulation matrix. C++ signature :  int add_parameter_to_modulation_matrix(TWavetableDevicePyHandle,TPyHandle&lt;ATimeableValue&gt;)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.add_parameters_listener()<Description>Value</Description></Value>
<Doc>add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.add_poly_voices_listener()<Description>Value</Description></Value>
<Doc>add_poly_voices_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "poly_voices" has changed. C++ signature :  void add_poly_voices_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.add_unison_mode_listener()<Description>Value</Description></Value>
<Doc>add_unison_mode_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "unison_mode" has changed. C++ signature :  void add_unison_mode_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.add_unison_voice_count_listener()<Description>Value</Description></Value>
<Doc>add_unison_voice_count_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "unison_voice_count" has changed. C++ signature :  void add_unison_voice_count_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.add_visible_modulation_target_names_listener()<Description>Value</Description></Value>
<Doc>add_visible_modulation_target_names_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "visible_modulation_target_names" has changed. C++ signature :  void add_visible_modulation_target_names_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.can_have_chains<Description>Value</Description></Value>
<Doc>Returns true if the device is a rack.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.can_have_drum_pads<Description>Value</Description></Value>
<Doc>Returns true if the device is a drum rack.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the Device.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.class_display_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class name as displayed in Live's browser and device chain</Doc>
<Value>Live.WavetableDevice.WavetableDevice.class_name<Description>Value</Description></Value>
<Doc>Return const access to the name of the device's class.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.filter_routing<Description>Value</Description></Value>
<Doc>Return the current filter routing.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.filter_routing_has_listener()<Description>Value</Description></Value>
<Doc>filter_routing_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "filter_routing". C++ signature :  bool filter_routing_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.get_modulation_target_parameter_name()<Description>Value</Description></Value>
<Doc>get_modulation_target_parameter_name( (WavetableDevice)self, (int)target_index) -&gt; str : Get the parameter name of the modulation target at the given index. C++ signature :  TString get_modulation_target_parameter_name(TWavetableDevicePyHandle,int)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.get_modulation_value()<Description>Value</Description></Value>
<Doc>get_modulation_value( (WavetableDevice)self, (int)target_index, (int)source) -&gt; float : Get the value of a modulation amount for the given target-source connection. C++ signature :  float get_modulation_value(TWavetableDevicePyHandle,int,int)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.is_active<Description>Value</Description></Value>
<Doc>Return const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.is_active_has_listener()<Description>Value</Description></Value>
<Doc>is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.is_parameter_modulatable()<Description>Value</Description></Value>
<Doc>is_parameter_modulatable( (WavetableDevice)self, (DeviceParameter)parameter) -&gt; bool : Indicate whether the parameter is modulatable. Note that pitch parameters only exist in python and must be handled there. C++ signature :  bool is_parameter_modulatable(TWavetableDevicePyHandle,TPyHandle&lt;ATimeableValue&gt;)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.latency_in_ms<Description>Value</Description></Value>
<Doc>Returns the latency of the device in ms.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.latency_in_ms_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_ms_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_ms". C++ signature :  bool latency_in_ms_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.latency_in_samples<Description>Value</Description></Value>
<Doc>Returns the latency of the device in samples.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.latency_in_samples_has_listener()<Description>Value</Description></Value>
<Doc>latency_in_samples_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "latency_in_samples". C++ signature :  bool latency_in_samples_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.modulation_matrix_changed_has_listener()<Description>Value</Description></Value>
<Doc>modulation_matrix_changed_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "modulation_matrix_changed". C++ signature :  bool modulation_matrix_changed_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.mono_poly<Description>Value</Description></Value>
<Doc>Return the current voicing mode.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.mono_poly_has_listener()<Description>Value</Description></Value>
<Doc>mono_poly_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "mono_poly". C++ signature :  bool mono_poly_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.name<Description>Value</Description></Value>
<Doc>Return access to the name of the device.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.name_has_listener()<Description>Value</Description></Value>
<Doc>name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.oscillator_1_effect_mode<Description>Value</Description></Value>
<Doc>Return the current effect mode of the oscillator 1.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.oscillator_1_effect_mode_has_listener()<Description>Value</Description></Value>
<Doc>oscillator_1_effect_mode_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "oscillator_1_effect_mode". C++ signature :  bool oscillator_1_effect_mode_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.oscillator_1_wavetable_category<Description>Value</Description></Value>
<Doc>Return the current wavetable category of the oscillator 1.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.oscillator_1_wavetable_category_has_listener()<Description>Value</Description></Value>
<Doc>oscillator_1_wavetable_category_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "oscillator_1_wavetable_category". C++ signature :  bool oscillator_1_wavetable_category_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.oscillator_1_wavetable_index<Description>Value</Description></Value>
<Doc>Return the current wavetable index of the oscillator 1.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.oscillator_1_wavetable_index_has_listener()<Description>Value</Description></Value>
<Doc>oscillator_1_wavetable_index_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "oscillator_1_wavetable_index". C++ signature :  bool oscillator_1_wavetable_index_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.oscillator_1_wavetables<Description>Value</Description></Value>
<Doc>Get a vector of oscillator 1's wavetable names.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.oscillator_1_wavetables_has_listener()<Description>Value</Description></Value>
<Doc>oscillator_1_wavetables_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "oscillator_1_wavetables". C++ signature :  bool oscillator_1_wavetables_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.oscillator_2_effect_mode<Description>Value</Description></Value>
<Doc>Return the current effect mode of the oscillator 2.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.oscillator_2_effect_mode_has_listener()<Description>Value</Description></Value>
<Doc>oscillator_2_effect_mode_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "oscillator_2_effect_mode". C++ signature :  bool oscillator_2_effect_mode_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.oscillator_2_wavetable_category<Description>Value</Description></Value>
<Doc>Return the current wavetable category of the oscillator 2.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.oscillator_2_wavetable_category_has_listener()<Description>Value</Description></Value>
<Doc>oscillator_2_wavetable_category_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "oscillator_2_wavetable_category". C++ signature :  bool oscillator_2_wavetable_category_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.oscillator_2_wavetable_index<Description>Value</Description></Value>
<Doc>Return the current wavetable index of the oscillator 2.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.oscillator_2_wavetable_index_has_listener()<Description>Value</Description></Value>
<Doc>oscillator_2_wavetable_index_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "oscillator_2_wavetable_index". C++ signature :  bool oscillator_2_wavetable_index_has_listener(TWavetableDevicePyHandle,boost::python::api::object)oscillator_2_wavetable_index_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "oscillator_2_wavetable_index". C++ signature :  bool oscillator_2_wavetable_index_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.oscillator_2_wavetables<Description>Value</Description></Value>
<Doc>Get a vector of oscillator 2's wavetable names.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.oscillator_2_wavetables_has_listener()<Description>Value</Description></Value>
<Doc>oscillator_2_wavetables_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "oscillator_2_wavetables". C++ signature :  bool oscillator_2_wavetables_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.oscillator_wavetable_categories<Description>Value</Description></Value>
<Doc>Get a vector of the available wavetable categories.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.parameters<Description>Value</Description></Value>
<Doc>Const access to the list of available automatable parameters for this device.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.parameters_has_listener()<Description>Value</Description></Value>
<Doc>parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.poly_voices<Description>Value</Description></Value>
<Doc>Return the current number of polyphonic voices. Uses the VoiceCount enumeration.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.poly_voices_has_listener()<Description>Value</Description></Value>
<Doc>poly_voices_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "poly_voices". C++ signature :  bool poly_voices_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.remove_filter_routing_listener()<Description>Value</Description></Value>
<Doc>remove_filter_routing_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "filter_routing". C++ signature :  void remove_filter_routing_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.remove_is_active_listener()<Description>Value</Description></Value>
<Doc>remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.remove_latency_in_ms_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_ms_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_ms". C++ signature :  void remove_latency_in_ms_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.remove_latency_in_samples_listener()<Description>Value</Description></Value>
<Doc>remove_latency_in_samples_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "latency_in_samples". C++ signature :  void remove_latency_in_samples_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.remove_modulation_matrix_changed_listener()<Description>Value</Description></Value>
<Doc>remove_modulation_matrix_changed_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "modulation_matrix_changed". C++ signature :  void remove_modulation_matrix_changed_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.remove_mono_poly_listener()<Description>Value</Description></Value>
<Doc>remove_mono_poly_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "mono_poly". C++ signature :  void remove_mono_poly_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.remove_name_listener()<Description>Value</Description></Value>
<Doc>remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.remove_oscillator_1_effect_mode_listener()<Description>Value</Description></Value>
<Doc>remove_oscillator_1_effect_mode_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "oscillator_1_effect_mode". C++ signature :  void remove_oscillator_1_effect_mode_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.remove_oscillator_1_wavetable_category_listener()<Description>Value</Description></Value>
<Doc>remove_oscillator_1_wavetable_category_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "oscillator_1_wavetable_category". C++ signature :  void remove_oscillator_1_wavetable_category_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.remove_oscillator_1_wavetable_index_listener()<Description>Value</Description></Value>
<Doc>remove_oscillator_1_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "oscillator_1_wavetable_index". C++ signature :  void remove_oscillator_1_wavetable_index_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.remove_oscillator_1_wavetables_listener()<Description>Value</Description></Value>
<Doc>remove_oscillator_1_wavetables_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "oscillator_1_wavetables". C++ signature :  void remove_oscillator_1_wavetables_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.remove_oscillator_2_effect_mode_listener()<Description>Value</Description></Value>
<Doc>remove_oscillator_2_effect_mode_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "oscillator_2_effect_mode". C++ signature :  void remove_oscillator_2_effect_mode_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.remove_oscillator_2_wavetable_category_listener()<Description>Value</Description></Value>
<Doc>remove_oscillator_2_wavetable_category_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "oscillator_2_wavetable_category". C++ signature :  void remove_oscillator_2_wavetable_category_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.remove_oscillator_2_wavetable_index_listener()<Description>Value</Description></Value>
<Doc>remove_oscillator_2_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "oscillator_2_wavetable_index". C++ signature :  void remove_oscillator_2_wavetable_index_listener(TWavetableDevicePyHandle,boost::python::api::object)remove_oscillator_2_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "oscillator_2_wavetable_index". C++ signature :  void remove_oscillator_2_wavetable_index_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.remove_oscillator_2_wavetables_listener()<Description>Value</Description></Value>
<Doc>remove_oscillator_2_wavetables_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "oscillator_2_wavetables". C++ signature :  void remove_oscillator_2_wavetables_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.remove_parameters_listener()<Description>Value</Description></Value>
<Doc>remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.remove_poly_voices_listener()<Description>Value</Description></Value>
<Doc>remove_poly_voices_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "poly_voices". C++ signature :  void remove_poly_voices_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.remove_unison_mode_listener()<Description>Value</Description></Value>
<Doc>remove_unison_mode_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "unison_mode". C++ signature :  void remove_unison_mode_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.remove_unison_voice_count_listener()<Description>Value</Description></Value>
<Doc>remove_unison_voice_count_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "unison_voice_count". C++ signature :  void remove_unison_voice_count_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.remove_visible_modulation_target_names_listener()<Description>Value</Description></Value>
<Doc>remove_visible_modulation_target_names_listener( (WavetableDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "visible_modulation_target_names". C++ signature :  void remove_visible_modulation_target_names_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.set_modulation_value()<Description>Value</Description></Value>
<Doc>set_modulation_value( (WavetableDevice)self, (int)target_index, (int)source, (float)value) -&gt; None : Set the value of a modulation amount for the given target-source connection. C++ signature :  void set_modulation_value(TWavetableDevicePyHandle,int,int,float)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.store_chosen_bank()<Description>Value</Description></Value>
<Doc>store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.type<Description>Value</Description></Value>
<Doc>Return the type of the device.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.unison_mode<Description>Value</Description></Value>
<Doc>Return the current unison mode.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.unison_mode_has_listener()<Description>Value</Description></Value>
<Doc>unison_mode_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "unison_mode". C++ signature :  bool unison_mode_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.unison_voice_count<Description>Value</Description></Value>
<Doc>Return the current number of unison voices.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.unison_voice_count_has_listener()<Description>Value</Description></Value>
<Doc>unison_voice_count_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "unison_voice_count". C++ signature :  bool unison_voice_count_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.view<Description>Value</Description></Value>
<Doc>Representing the view aspects of a device.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.visible_modulation_target_names<Description>Value</Description></Value>
<Doc>Get the names of all the visible modulation targets.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.visible_modulation_target_names_has_listener()<Description>Value</Description></Value>
<Doc>visible_modulation_target_names_has_listener( (WavetableDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "visible_modulation_target_names". C++ signature :  bool visible_modulation_target_names_has_listener(TWavetableDevicePyHandle,boost::python::api::object)</Doc>
<Class>Live.WavetableDevice.WavetableDevice.View<Description>Class</Description></Class>
<Doc>Representing the view aspects of a device.</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.View.add_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.View.is_collapsed_has_listener()<Description>Built-In</Description></Built-In>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Built-In>Live.WavetableDevice.WavetableDevice.View.remove_is_collapsed_listener()<Description>Built-In</Description></Built-In>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.View.class<Description>Value</Description></Value>
<Doc>Implement delattr(self, name).</Doc>
<Value>Live.WavetableDevice.WavetableDevice.View._live_ptr<Description>Value</Description></Value>
<Value>Live.WavetableDevice.WavetableDevice.View.add_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>add_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_collapsed" has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.View.canonical_parent<Description>Value</Description></Value>
<Doc>Get the canonical parent of the View.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.View.is_collapsed<Description>Value</Description></Value>
<Doc>Get/Set/Listen if the device is shown collapsed in the device chain.</Doc>
<Value>Live.WavetableDevice.WavetableDevice.View.is_collapsed_has_listener()<Description>Value</Description></Value>
<Doc>is_collapsed_has_listener( (View)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_collapsed". C++ signature :  bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
<Value>Live.WavetableDevice.WavetableDevice.View.remove_is_collapsed_listener()<Description>Value</Description></Value>
<Doc>remove_is_collapsed_listener( (View)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_collapsed". C++ signature :  void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;,boost::python::api::object)</Doc>
</Live>